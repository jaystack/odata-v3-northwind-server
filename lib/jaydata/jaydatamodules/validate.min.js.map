{"version":3,"sources":["node_modules/browser-pack/_prelude.js","validate.js","src/JayDataModules/src/JayDataModules/validate.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_core","_core2","_jquery","_jquery2","$","entityValidator","Validation","Entity","dateConverter","stringDate","Date","parse","defaultValidationOption","required","key","customValidator","validateMethod","numberValidationOption","minValue","maxValue","supportedValidations","$data.Number","$data.Float","$data.Decimal","$data.Integer","$data.Int16","$data.Int32","$data.Int64","$data.Byte","$data.SByte","$data.String","minLength","maxLength","regex","$data.Date","converter","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Array","$data.Boolean","$data.Object","createValidationItem","memDef","rule","typeName","result","validation","ruleName","ruleValue","getValidationValue","name","validator","addMethod","element","undefined","getValidationMessage","rules","message","messages","buildValidationModel","type","memberDefinitions","getPublicMappedProperties","forEach","Container","resolveName","resolveType","dataType","validations","keys","prototype","toJQueryValidate","callBack","Guard","raise","Exception","model","validateResult","getType","PromiseHandlerBase","createCallbackSettings","success","origCallback","form","event","fn","formBinder","apply","submitHandler","error","invalidHandler","jaydata/core"],"mappings":"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","file":"validate.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿// JayData 1.5.5 RC\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/modules/validate\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data, $) {\n\n    var entityValidator = $data.Validation.Entity;\n    var dateConverter = function dateConverter(stringDate) {\n        try {\n            return new Date(Date.parse(stringDate));\n        } catch (e) {\n            return new Date(0);\n        }\n    };\n\n    var validationMapping = {\n        required: { key: 'required' },\n        minValue: { key: 'min', validateMethod: true, converter: dateConverter },\n        maxValue: { key: 'max', validateMethod: true, converter: dateConverter },\n        length: { key: 'length' },\n        minLength: { key: 'minlength' },\n        maxLength: { key: 'maxlength' },\n        regex: { key: 'regex', validateMethod: true },\n        customValidator: { key: 'customValidator', validateMethod: true }\n    };\n\n    var defaultValidationOption = {\n        required: { key: 'required' },\n        customValidator: { key: 'customValidator', validateMethod: true }\n    };\n\n    var numberValidationOption = {\n        required: { key: 'required' },\n        customValidator: { key: 'customValidator', validateMethod: true },\n        minValue: { key: 'min' },\n        maxValue: { key: 'max' }\n    };\n\n    var supportedValidations = {\n        '$data.Number': numberValidationOption,\n        '$data.Float': numberValidationOption,\n        '$data.Decimal': numberValidationOption,\n        '$data.Integer': numberValidationOption,\n        '$data.Int16': numberValidationOption,\n        '$data.Int32': numberValidationOption,\n        '$data.Int64': numberValidationOption,\n        '$data.Byte': numberValidationOption,\n        '$data.SByte': numberValidationOption,\n        '$data.String': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            minLength: { key: 'minlength' },\n            maxLength: { key: 'maxlength' },\n            length: { key: 'length' },\n            regex: { key: 'regex', validateMethod: true }\n        },\n        '$data.Date': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            minValue: { key: 'min', validateMethod: true, converter: dateConverter },\n            maxValue: { key: 'max', validateMethod: true, converter: dateConverter }\n        },\n        '$data.DateTimeOffset': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            minValue: { key: 'min', validateMethod: true, converter: dateConverter },\n            maxValue: { key: 'max', validateMethod: true, converter: dateConverter }\n        },\n        '$data.Time': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            minValue: { key: 'min' },\n            maxValue: { key: 'max' }\n        },\n        '$data.Day': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            minValue: { key: 'min' },\n            maxValue: { key: 'max' }\n        },\n        '$data.Duration': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true }\n        },\n        '$data.Array': {\n            required: { key: 'required' },\n            customValidator: { key: 'customValidator', validateMethod: true },\n            length: { key: 'length', validateMethod: true }\n        },\n        '$data.Boolean': defaultValidationOption,\n        '$data.Object': defaultValidationOption\n    };\n\n    var createValidationItem = function createValidationItem(memDef, rule, typeName, result) {\n        if (memDef[rule]) {\n            var validation = supportedValidations[typeName][rule];\n            var ruleName = validation.key;\n            var ruleValue = entityValidator.getValidationValue(memDef, rule);\n            if (validation.validateMethod === true) {\n                ruleName = memDef.name + '_' + ruleName;\n                $.validator.addMethod(ruleName, function (value, element) {\n                    if (!value) value = undefined;\n\n                    if (value && validation.converter && typeof validation.converter == \"function\") value = validation.converter(value);\n\n                    return entityValidator.supportedValidations[typeName][rule](value, ruleValue);\n                }, entityValidator.getValidationMessage(memDef, rule, 'Validation Error!'));\n                result.rules[memDef.name] = result.rules[memDef.name] || {};\n                result.rules[memDef.name][ruleName] = true;\n                return;\n            } else {\n                result.rules[memDef.name] = result.rules[memDef.name] || {};\n                result.rules[memDef.name][ruleName] = ruleValue;\n            }\n\n            var message = entityValidator.getValidationMessage(memDef, rule);\n            if (message) {\n                result.messages[memDef.name] = result.messages[memDef.name] || {};\n                result.messages[memDef.name][ruleName] = message;\n            }\n        }\n    };\n\n    var buildValidationModel = function buildValidationModel(type, result) {\n        type.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            var typeName = _core.Container.resolveName(_core.Container.resolveType(memDef.dataType));\n            if (supportedValidations[typeName]) {\n                var validations = Object.keys(supportedValidations[typeName]);\n                validations.forEach(function (validation) {\n                    createValidationItem(memDef, validation, typeName, result);\n                });\n            }\n        });\n    };\n\n    $data.Entity.prototype.toJQueryValidate = function (callBack) {\n        if (typeof $ === 'undefined' || typeof $.validator === 'undefined') {\n            _core.Guard.raise(new _core.Exception('jQuery and jQuery validator plugin is required', 'Not Found!'));\n        }\n        var model = this;\n\n        var validateResult = { rules: {}, messages: {} };\n        buildValidationModel(model.getType(), validateResult);\n\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack, {});\n        if (callBack.success) {\n            var origCallback = callBack.success;\n            callBack.success = function (form, event) {\n                if ($.fn.formBinder) $(form).formBinder(model, false);\n                origCallback.apply(this, [model, form, event]);\n            };\n        }\n        if (typeof callBack.success == \"function\") validateResult.submitHandler = callBack.success;\n        if (typeof callBack.error == \"function\") validateResult.invalidHandler = callBack.error;\n        return validateResult;\n    };\n})(_core2.default, _jquery2.default);\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"jaydata/core\":\"jaydata/core\"}]},{},[1])(1)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport jQuery from 'jquery'\r\n\r\n(function ($data, $) {\r\n\r\n    var entityValidator = $data.Validation.Entity;\r\n    var dateConverter = function (stringDate) {\r\n        try {\r\n            return new Date(Date.parse(stringDate));\r\n        } catch (e) {\r\n            return new Date(0);\r\n        }\r\n    };\r\n\r\n    var validationMapping = {\r\n        required: { key: 'required' },\r\n        minValue: { key: 'min', validateMethod: true, converter: dateConverter },\r\n        maxValue: { key: 'max', validateMethod: true, converter: dateConverter },\r\n        length: { key: 'length' },\r\n        minLength: { key: 'minlength' },\r\n        maxLength: { key: 'maxlength' },\r\n        regex: { key: 'regex', validateMethod: true },\r\n        customValidator: { key: 'customValidator', validateMethod: true }\r\n    };\r\n\r\n    var defaultValidationOption = {\r\n        required: { key: 'required' },\r\n        customValidator: { key: 'customValidator', validateMethod: true }\r\n    };\r\n\r\n    var numberValidationOption = {\r\n        required: { key: 'required' },\r\n        customValidator: { key: 'customValidator', validateMethod: true },\r\n        minValue: { key: 'min' },\r\n        maxValue: { key: 'max' }\r\n    };\r\n\r\n    var supportedValidations = {\r\n        '$data.Number': numberValidationOption,\r\n        '$data.Float': numberValidationOption,\r\n        '$data.Decimal': numberValidationOption,\r\n        '$data.Integer': numberValidationOption,\r\n        '$data.Int16': numberValidationOption,\r\n        '$data.Int32': numberValidationOption,\r\n        '$data.Int64': numberValidationOption,\r\n        '$data.Byte': numberValidationOption,\r\n        '$data.SByte': numberValidationOption,\r\n        '$data.String': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            minLength: { key: 'minlength' },\r\n            maxLength: { key: 'maxlength' },\r\n            length: { key: 'length' },\r\n            regex: { key: 'regex', validateMethod: true }\r\n        },\r\n        '$data.Date': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            minValue: { key: 'min', validateMethod: true, converter: dateConverter },\r\n            maxValue: { key: 'max', validateMethod: true, converter: dateConverter }\r\n        },\r\n        '$data.DateTimeOffset': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            minValue: { key: 'min', validateMethod: true, converter: dateConverter },\r\n            maxValue: { key: 'max', validateMethod: true, converter: dateConverter }\r\n        },\r\n        '$data.Time': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            minValue: { key: 'min' },\r\n            maxValue: { key: 'max' }\r\n        },\r\n        '$data.Day': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            minValue: { key: 'min' },\r\n            maxValue: { key: 'max' }\r\n        },\r\n        '$data.Duration': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true }\r\n        },\r\n        '$data.Array': {\r\n            required: { key: 'required' },\r\n            customValidator: { key: 'customValidator', validateMethod: true },\r\n            length: { key: 'length', validateMethod: true }\r\n        },\r\n        '$data.Boolean': defaultValidationOption,\r\n        '$data.Object': defaultValidationOption\r\n    };\r\n\r\n    var createValidationItem = function (memDef, rule, typeName, result) {\r\n        if (memDef[rule]) {\r\n            var validation = supportedValidations[typeName][rule];\r\n            var ruleName = validation.key;\r\n            var ruleValue = entityValidator.getValidationValue(memDef, rule);\r\n            if (validation.validateMethod === true) {\r\n                ruleName = memDef.name + '_' + ruleName;\r\n                $.validator.addMethod(ruleName, function (value, element) {\r\n                    if (!value)\r\n                        value = undefined;\r\n\r\n                    if (value && validation.converter && typeof validation.converter == \"function\")\r\n                        value = validation.converter(value);\r\n\r\n                    return entityValidator.supportedValidations[typeName][rule](value, ruleValue);\r\n                }, entityValidator.getValidationMessage(memDef, rule, 'Validation Error!'));\r\n                result.rules[memDef.name] = result.rules[memDef.name] || {};\r\n                result.rules[memDef.name][ruleName] = true;\r\n                return;\r\n            }\r\n            else {\r\n                result.rules[memDef.name] = result.rules[memDef.name] || {};\r\n                result.rules[memDef.name][ruleName] = ruleValue;\r\n            }\r\n\r\n            var message = entityValidator.getValidationMessage(memDef, rule);\r\n            if (message) {\r\n                result.messages[memDef.name] = result.messages[memDef.name] || {};\r\n                result.messages[memDef.name][ruleName] = message;\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    var buildValidationModel = function (type, result) {\r\n        type.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            var typeName = Container.resolveName(Container.resolveType(memDef.dataType));\r\n            if (supportedValidations[typeName]) {\r\n                var validations = Object.keys(supportedValidations[typeName]);\r\n                validations.forEach(function (validation) {\r\n                    createValidationItem(memDef, validation, typeName, result);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    $data.Entity.prototype.toJQueryValidate = function (callBack) {\r\n        if (typeof $ === 'undefined' || typeof $.validator === 'undefined') {\r\n            Guard.raise(new Exception('jQuery and jQuery validator plugin is required', 'Not Found!'));\r\n        }\r\n        var model = this;\r\n\r\n        var validateResult = { rules: {}, messages: {} };\r\n        buildValidationModel(model.getType(), validateResult);\r\n\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack, {});\r\n        if (callBack.success) {\r\n            var origCallback = callBack.success;\r\n            callBack.success = function (form, event) {\r\n                if ($.fn.formBinder)\r\n                    $(form).formBinder(model, false);\r\n                origCallback.apply(this, [model, form, event]);\r\n            };\r\n        }\r\n        if (typeof callBack.success == \"function\")\r\n            validateResult.submitHandler = callBack.success;\r\n        if (typeof callBack.error == \"function\")\r\n            validateResult.invalidHandler = callBack.error;\r\n        return validateResult;\r\n    };\r\n\r\n})($data, jQuery);\r\n\r\nexport default $data\r\n"],"sourceRoot":"/source/"}