{"version":3,"sources":["node_modules/browser-pack/_prelude.js","knockout.js","src/JayDataModules/src/JayDataModules/knockout.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_core","_core2","_ko","_ko2","ObservableFactory","originalType","observableClassNem","instanceDefinition","constructor","_this","getEntity","propertyChanged","attach","sender","val","propertyName","newValue","retrieveProperty","memberDefinition","name","backingFieldName","koProperty","observable","subscribe","storeProperty","equalityComparers","type","properties","memberDefinitions","getPublicMappedProperties","propName","Class","defineEx","KoObservableEntity","params","ConstructorParameter","isWrappedType","keys","Container","converters","to","forEach","typeName","origConverter","undefined","registerConverter","isObservable","apply","arguments","Guard","raise","Exception","ieVersion","prVisitor","qecVisitConstantExpression","qecVisitCodeExpression","qecVisit","esExecuteQuery","queryableToArray","ensureDropdownSelectionIsConsistentWithModelValue","element","modelValue","preferModelValue","selectExtensions","readValue","writeValue","utils","triggerEvent","checkObservableValue","expression","context","Expressions","ConstantExpression","some","item","skipExecute","push","observableValue","createConstantExpression","getTypeName","version","div","document","createElement","iElems","getElementsByTagName","innerHTML","ensureSelectElementIsRenderedCorrectly","selectElement","originalWidth","style","width","setOptionNodeSelectionState","optionNode","isSelected","navigator","userAgent","indexOf","setAttribute","selected","setTextContent","textContent","unwrapObservable","innerText","display","bindingHandlers","update","valueAccessor","allBindingsAccessor","tagName","toLowerCase","selectWasPreviouslyEmpty","previousSelectedValues","arrayMap","arrayFilter","childNodes","node","previousScrollTop","scrollTop","cleanNode","options","remove","allBindings","option","setHtml","appendChild","j","optionValue","optionText","optionsTextValue","newOptions","countSelectionsRetained","arrayIndexOf","optionValueDomDataKey","ParameterResolverVisitor","prototype","VisitProperty","eNode","resolvedObservables","QueryExpressionCreator","VisitConstantExpression","VisitCodeExpression","source","toString","jsCodeTree","createCodeParser","scopeContext","createExpression","log","event","data","constantResolver","createConstantValueResolver","parameters","__global","parameterProcessor","createParameterResolverVisitor","Visit","concat","code2entity","createCodeToEntityConverter","entityExpression","queryParameters","lambdaParameters","lambdaTypes","frameType","result","createParametricQueryExpression","expressionRes","FrameOperator","observables","baseExpression","EntityContext","executeQuery","on_ready","transaction","obsObj","preparator","createQueryExpressionCreator","newExpression","createQueryable","EntityWrapper","extend","innerData","wrappedType","isAssignableTo","Entity","innerInstance","fullName","_wrappedType","updateEntity","entity","members","memDef","idx","changedProperties","splice","getProperties","props","getType","koData","map","memberInfo","owner","metadata","asKoObservable","observableTypeName","namespace","isTypeRegistered","observableType","resolveType","Queryable","toArray","onResult_items","callBack","PromiseHandlerBase","createCallbackSettings","results","tran","error","requiredError","jaydata/core"],"mappings":"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","file":"knockout.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿// JayData 1.5.5 RC\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/modules/knockout\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _ko = (typeof window !== \"undefined\" ? window['ko'] : typeof global !== \"undefined\" ? global['ko'] : null);\n\nvar _ko2 = _interopRequireDefault(_ko);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data) {\n\n    /*converters*/\n    Object.keys($data.Container.converters.to).forEach(function (typeName) {\n        var origConverter = $data.Container.converters.to[typeName] ? $data.Container.converters.to[typeName]['$data.Function'] || $data.Container.converters.to[typeName]['default'] : undefined;\n        $data.Container.registerConverter(typeName, '$data.Function', function (value) {\n            if (_ko2.default.isObservable(value)) {\n                return value;\n            } else if (origConverter) {\n                return origConverter.apply($data.Container.converters[typeName], arguments);\n            } else {\n                _core.Guard.raise(new _core.Exception('Type Error', 'value is not koObservable', value));\n            }\n        });\n    });\n\n    function ObservableFactory(originalType, observableClassNem) {\n        var instanceDefinition = {\n            constructor: function constructor() {\n                var _this = this;\n\n                _this.getEntity().propertyChanged.attach(function (sender, val) {\n                    if (_this[val.propertyName]() !== val.newValue) {\n                        _this[val.propertyName](val.newValue);\n                    }\n                });\n            },\n\n            retrieveProperty: function retrieveProperty(memberDefinition) {\n                var _this = this;\n                var propertyName = memberDefinition.name;\n                var backingFieldName = \"_\" + propertyName;\n\n                if (!_this[backingFieldName]) {\n                    var koProperty = new _ko2.default.observable(_this.getEntity()[propertyName]);\n\n                    koProperty.subscribe(function (val) {\n                        _this.getEntity()[propertyName] = val;\n                    });\n\n                    _this[backingFieldName] = koProperty;\n                }\n\n                return _this[backingFieldName];\n            },\n            storeProperty: function storeProperty(memberDefinition, value) {},\n            equalityComparers: { type: $data.Object }\n        };\n\n        var properties = originalType.memberDefinitions.getPublicMappedProperties();\n        for (var i = 0, l = properties.length; i < l; i++) {\n            var propName = properties[i].name;\n            instanceDefinition[propName] = {\n                type: _ko2.default.observable\n            };\n            instanceDefinition[\"ValidationErrors\"] = {\n                type: _ko2.default.observable\n            };\n        }\n\n        $data.Class.defineEx(observableClassNem, [{ type: $data.KoObservableEntity, params: [new $data.Class.ConstructorParameter(0), function () {\n                return originalType;\n            }] }], null, instanceDefinition, {\n            isWrappedType: function isWrappedType(type) {\n                return type === originalType;\n            }\n        });\n    };\n\n    if (typeof _ko2.default !== 'undefined') {\n        var ieVersion;\n        var prVisitor;\n        var qecVisitConstantExpression;\n        var qecVisitCodeExpression;\n        var qecVisit;\n        var esExecuteQuery;\n        var queryableToArray;\n\n        (function () {\n            var ensureDropdownSelectionIsConsistentWithModelValue = function ensureDropdownSelectionIsConsistentWithModelValue(element, modelValue, preferModelValue) {\n                if (preferModelValue) {\n                    if (modelValue !== _ko2.default.selectExtensions.readValue(element)) _ko2.default.selectExtensions.writeValue(element, modelValue);\n                }\n\n                // No matter which direction we're syncing in, we want the end result to be equality between dropdown value and model value.\n                // If they aren't equal, either we prefer the dropdown value, or the model value couldn't be represented, so either way,\n                // change the model value to match the dropdown.\n                if (modelValue !== _ko2.default.selectExtensions.readValue(element)) _ko2.default.utils.triggerEvent(element, \"change\");\n            };\n\n            /* Observable Query*/\n\n            var checkObservableValue = function checkObservableValue(expression, context) {\n                if (expression instanceof $data.Expressions.ConstantExpression && _ko2.default.isObservable(expression.value)) {\n                    context.some(function (item) {\n                        if (item.observable === expression.value) {\n                            item.skipExecute = true;\n                        }\n                    });\n                    context.push({\n                        observable: expression.value,\n                        skipExecute: false\n                    });\n                    var observableValue = expression.value();\n                    return _core.Container.createConstantExpression(observableValue, _core.Container.getTypeName(observableValue), expression.name + '$Observable');\n                }\n                return expression;\n            };\n\n            //$data.Expressions.ParameterResolverVisitor.prototype.resolvedObservables = [];\n\n\n            // custom bindings\n\n            ieVersion = function () {\n                var version = 3,\n                    div = document.createElement('div'),\n                    iElems = div.getElementsByTagName('i');\n\n                // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\n                while (div.innerHTML = '<!--[if gt IE ' + ++version + ']><i></i><![endif]-->', iElems[0]) {};\n                return version > 4 ? version : undefined;\n            }();\n\n            _ko2.default.utils.ensureSelectElementIsRenderedCorrectly = function (selectElement) {\n                // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\n                // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\n                if (ieVersion >= 9) {\n                    var originalWidth = selectElement.style.width;\n                    selectElement.style.width = 0;\n                    selectElement.style.width = originalWidth;\n                }\n            };\n\n            _ko2.default.utils.setOptionNodeSelectionState = function (optionNode, isSelected) {\n                // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\n                if (navigator.userAgent.indexOf(\"MSIE 6\") >= 0) optionNode.setAttribute(\"selected\", isSelected);else optionNode.selected = isSelected;\n            };\n\n            _ko2.default.utils.setTextContent = function (element, textContent) {\n                var value = _ko2.default.utils.unwrapObservable(textContent);\n                if (value === null || value === undefined) value = \"\";\n\n                'innerText' in element ? element.innerText = value : element.textContent = value;\n\n                if (ieVersion >= 9) {\n                    // Believe it or not, this actually fixes an IE9 rendering bug\n                    // (See https://github.com/SteveSanderson/knockout/issues/209)\n                    element.style.display = element.style.display;\n                }\n            };\n\n            ;\n\n            _ko2.default.bindingHandlers['options'] = {\n                'update': function update(element, valueAccessor, allBindingsAccessor) {\n                    if (element.tagName.toLowerCase() !== \"select\") throw new Error(\"options binding applies only to SELECT elements\");\n\n                    var selectWasPreviouslyEmpty = element.length == 0;\n                    var previousSelectedValues = _ko2.default.utils.arrayMap(_ko2.default.utils.arrayFilter(element.childNodes, function (node) {\n                        return node.tagName && node.tagName.toLowerCase() === \"option\" && node.selected;\n                    }), function (node) {\n                        return _ko2.default.selectExtensions.readValue(node) || node.innerText || node.textContent;\n                    });\n                    var previousScrollTop = element.scrollTop;\n\n                    var value = _ko2.default.utils.unwrapObservable(valueAccessor());\n                    var selectedValue = element.value;\n\n                    // Remove all existing <option>s.\n                    // Need to use .remove() rather than .removeChild() for <option>s otherwise IE behaves oddly (https://github.com/SteveSanderson/knockout/issues/134)\n                    while (element.length > 0) {\n                        _ko2.default.cleanNode(element.options[0]);\n                        element.remove(0);\n                    }\n\n                    if (value) {\n                        var allBindings = allBindingsAccessor();\n                        if (typeof value.length != \"number\") value = [value];\n                        if (allBindings['optionsCaption']) {\n                            var option = document.createElement(\"option\");\n                            _ko2.default.utils.setHtml(option, allBindings['optionsCaption']);\n                            _ko2.default.selectExtensions.writeValue(option, allBindings['optionsCaptionValue'] || undefined);\n                            element.appendChild(option);\n                        }\n                        for (var i = 0, j = value.length; i < j; i++) {\n                            var option = document.createElement(\"option\");\n\n                            // Apply a value to the option element\n                            var optionValue = typeof allBindings['optionsValue'] == \"string\" ? value[i][allBindings['optionsValue']] : value[i];\n                            optionValue = _ko2.default.utils.unwrapObservable(optionValue);\n                            _ko2.default.selectExtensions.writeValue(option, optionValue);\n\n                            // Apply some text to the option element\n                            var optionsTextValue = allBindings['optionsText'];\n                            var optionText;\n                            if (typeof optionsTextValue == \"function\") optionText = optionsTextValue(value[i]); // Given a function; run it against the data value\n                            else if (typeof optionsTextValue == \"string\") optionText = value[i][optionsTextValue]; // Given a string; treat it as a property name on the data value\n                                else optionText = optionValue; // Given no optionsText arg; use the data value itself\n                            if (optionText === null || optionText === undefined) optionText = \"\";\n\n                            _ko2.default.utils.setTextContent(option, optionText);\n\n                            element.appendChild(option);\n                        }\n\n                        // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\n                        // That's why we first added them without selection. Now it's time to set the selection.\n                        var newOptions = element.getElementsByTagName(\"option\");\n                        var countSelectionsRetained = 0;\n                        for (var i = 0, j = newOptions.length; i < j; i++) {\n                            if (_ko2.default.utils.arrayIndexOf(previousSelectedValues, _ko2.default.selectExtensions.readValue(newOptions[i])) >= 0) {\n                                _ko2.default.utils.setOptionNodeSelectionState(newOptions[i], true);\n                                countSelectionsRetained++;\n                            }\n                        }\n\n                        element.scrollTop = previousScrollTop;\n\n                        if (selectWasPreviouslyEmpty && 'value' in allBindings) {\n                            // Ensure consistency between model value and selected option.\n                            // If the dropdown is being populated for the first time here (or was otherwise previously empty),\n                            // the dropdown selection state is meaningless, so we preserve the model value.\n                            ensureDropdownSelectionIsConsistentWithModelValue(element, _ko2.default.utils.unwrapObservable(allBindings['value']), /* preferModelValue */true);\n                        }\n\n                        // Workaround for IE9 bug\n                        _ko2.default.utils.ensureSelectElementIsRenderedCorrectly(element);\n                    }\n                }\n            };\n            _ko2.default.bindingHandlers['options'].optionValueDomDataKey = '__ko.optionValueDomData__';prVisitor = $data.Expressions.ParameterResolverVisitor.prototype.VisitProperty;\n\n            $data.Expressions.ParameterResolverVisitor.prototype.VisitProperty = function (eNode, context) {\n                var expression = prVisitor.call(this, eNode, context);\n                this.resolvedObservables = this.resolvedObservables || [];\n                return checkObservableValue(expression, this.resolvedObservables);\n            };\n\n            qecVisitConstantExpression = $data.Expressions.QueryExpressionCreator.prototype.VisitConstantExpression;\n\n            $data.Expressions.QueryExpressionCreator.prototype.VisitConstantExpression = function (expression, context) {\n                if (qecVisitConstantExpression) expression = qecVisitConstantExpression.call(this, expression, context);\n\n                return checkObservableValue(expression, this.resolvedObservables);\n            };\n\n            //$data.Expressions.QueryExpressionCreator.prototype.resolvedObservables = [];\n            qecVisitCodeExpression = $data.Expressions.QueryExpressionCreator.prototype.VisitCodeExpression;\n\n            $data.Expressions.QueryExpressionCreator.prototype.VisitCodeExpression = function (expression, context) {\n                ///<summary>Converts the CodeExpression into an EntityExpression</summary>\n                ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\n                var source = expression.source.toString();\n                var jsCodeTree = _core.Container.createCodeParser(this.scopeContext).createExpression(source);\n                this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\n\n                //TODO rename classes to reflex variable names\n                //TODO engage localValueResolver here\n                //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\n                var constantResolver = _core.Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\n                var parameterProcessor = _core.Container.createParameterResolverVisitor();\n\n                jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\n\n                //added\n                this.resolvedObservables = (this.resolvedObservables || []).concat(parameterProcessor.resolvedObservables);\n\n                this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\n                var code2entity = _core.Container.createCodeToEntityConverter(this.scopeContext);\n\n                ///user provided query parameter object (specified as thisArg earlier) is passed in\n                var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\n\n                ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\n                var result = _core.Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\n                this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\n\n                return result;\n            };\n\n            qecVisit = $data.Expressions.QueryExpressionCreator.prototype.Visit;\n\n            $data.Expressions.QueryExpressionCreator.prototype.Visit = function (expression, context) {\n\n                var expressionRes;\n                if (expression instanceof $data.Expressions.FrameOperator) {\n                    this.resolvedObservables = [];\n                    var expressionRes = qecVisit.call(this, expression, context);\n\n                    expressionRes.observables = this.resolvedObservables;\n                    expressionRes.baseExpression = expression;\n                } else {\n                    expressionRes = qecVisit.call(this, expression, context);\n                }\n                return expressionRes;\n            };\n\n            esExecuteQuery = $data.EntityContext.prototype.executeQuery;\n\n            $data.EntityContext.prototype.executeQuery = function (expression, on_ready, transaction) {\n                var self = this;\n                var observables = expression.expression.observables;\n                if (observables && observables.length > 0) {\n                    observables.forEach(function (obsObj) {\n                        if (!obsObj) return;\n\n                        obsObj.observable.subscribe(function () {\n                            if (!obsObj.skipExecute) {\n                                var preparator = _core.Container.createQueryExpressionCreator(self);\n                                var newExpression = preparator.Visit(expression.expression.baseExpression);\n\n                                esExecuteQuery.call(self, _core.Container.createQueryable(expression, newExpression), on_ready, transaction);\n                            }\n                        });\n                    });\n                }\n\n                esExecuteQuery.call(self, expression, on_ready, transaction);\n            };\n\n            /* Observable Query End*/\n\n            /* Observable entities */\n            $data.EntityWrapper.extend('$data.KoObservableEntity', {\n                constructor: function constructor(innerData, wrappedType) {\n                    if (!(wrappedType && wrappedType.isAssignableTo && wrappedType.isAssignableTo($data.Entity))) {\n                        _core.Guard.raise(new _core.Exception(\"Type: '\" + wrappedType + \"' is not assignable to $data.Entity\"));\n                    }\n\n                    var innerInstance;\n                    if (innerData instanceof wrappedType) {\n                        innerInstance = innerData;\n                    } else if (innerData instanceof $data.Entity) {\n                        _core.Guard.raise(new _core.Exception(\"innerData is instance of '$data.Entity' instead of '\" + wrappedType.fullName + \"'\"));\n                    } else {\n                        innerInstance = new wrappedType(innerData);\n                    }\n\n                    this._wrappedType = wrappedType;\n                    this.innerInstance = innerInstance;\n                },\n                getEntity: function getEntity() {\n                    return this.innerInstance;\n                },\n                updateEntity: function updateEntity(entity) {\n                    var data;\n                    if (entity instanceof this._wrappedType) data = entity;else if (entity && !(entity instanceof $data.Entity) && entity instanceof $data.Object) data = entity;else _core.Guard.raise('entity is an invalid object');\n\n                    var members = this._wrappedType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < members.length; i++) {\n                        var memDef = members[i];\n                        if (data[memDef.name] !== undefined) {\n                            this[memDef.name](data[memDef.name]);\n                            var idx = this.innerInstance.changedProperties.indexOf(memDef);\n                            if (idx >= 0) this.innerInstance.changedProperties.splice(idx, 1);\n                        }\n                    }\n                },\n\n                getProperties: function getProperties() {\n                    //todo cache!\n                    var self = this;\n                    var props = this.innerInstance.getType().memberDefinitions.getPublicMappedProperties();\n                    //todo remove map\n                    var koData = props.map(function (memberInfo) {\n                        return {\n                            type: memberInfo.type,\n                            name: memberInfo.name,\n                            owner: self,\n                            metadata: memberInfo,\n                            value: self[memberInfo.name]\n                        };\n                    });\n                    return koData;\n                }\n            });\n\n            $data.Entity.prototype.asKoObservable = function () {\n                var type = this.getType();\n                var observableTypeName = type.namespace + '.Observable' + type.name;\n                if (!_core.Container.isTypeRegistered(observableTypeName)) {\n                    ObservableFactory(type, observableTypeName);\n                }\n                var observableType = _core.Container.resolveType(observableTypeName);\n\n                if (!observableType.isWrappedType(type)) {\n                    ObservableFactory(type, observableTypeName);\n                    observableType = _core.Container.resolveType(observableTypeName);\n                }\n\n                return new observableType(this);\n            };\n\n            queryableToArray = $data.Queryable.prototype.toArray;\n\n            $data.Queryable.prototype.toArray = function (onResult_items, transaction) {\n                if (_ko2.default.isObservable(onResult_items)) {\n                    if (typeof onResult_items.push !== 'undefined') {\n                        var callBack = $data.PromiseHandlerBase.createCallbackSettings();\n\n                        return this.toArray(function (results, tran) {\n                            onResult_items([]);\n                            results.forEach(function (result, idx) {\n                                if (result instanceof $data.Entity) {\n                                    onResult_items.push(result.asKoObservable());\n                                } else {\n                                    callBack.error('Not Implemented: Observable result has anonymous objects');\n                                }\n                            });\n                        }, transaction);\n                    } else {\n                        return queryableToArray.call(this, function (result, tran) {\n                            onResult_items(result);\n                        }, transaction);\n                    }\n                } else {\n                    return queryableToArray.call(this, onResult_items, transaction);\n                }\n            };\n            /* Observable entities End*/\n        })();\n    } else {\n            var requiredError = function requiredError() {\n                _core.Guard.raise(new _core.Exception('Knockout js is required', 'Not Found!'));\n            };\n\n            $data.Entity.prototype.asKoObservable = requiredError;\n        }\n})(_core2.default);\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"jaydata/core\":\"jaydata/core\"}]},{},[1])(1)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport ko from 'ko'\r\n\r\n\r\n(function ($data) {\r\n\r\n    /*converters*/\r\n    Object.keys($data.Container.converters.to).forEach(function (typeName) {\r\n        var origConverter = $data.Container.converters.to[typeName] ? $data.Container.converters.to[typeName]['$data.Function'] || $data.Container.converters.to[typeName]['default'] : undefined;\r\n        $data.Container.registerConverter(typeName, '$data.Function', function (value) {\r\n            if (ko.isObservable(value)) {\r\n                return value;\r\n            } else if (origConverter) {\r\n                return origConverter.apply($data.Container.converters[typeName], arguments);\r\n            } else {\r\n                Guard.raise(new Exception('Type Error', 'value is not koObservable', value));\r\n            }\r\n        });\r\n    });\r\n\r\n    function ObservableFactory(originalType, observableClassNem) {\r\n        var instanceDefinition = {\r\n            constructor: function () {\r\n                var _this = this;\r\n\r\n                _this.getEntity().propertyChanged.attach(function (sender, val) {\r\n                    if (_this[val.propertyName]() !== val.newValue) {\r\n                        _this[val.propertyName](val.newValue);\r\n                    }\r\n                });\r\n            },\r\n\r\n            retrieveProperty: function (memberDefinition) {\r\n                var _this = this;\r\n                var propertyName = memberDefinition.name\r\n                var backingFieldName = \"_\" + propertyName;\r\n\r\n                if (!_this[backingFieldName]) {\r\n                    var koProperty = new ko.observable(_this.getEntity()[propertyName]);\r\n\r\n                    koProperty.subscribe(function (val) {\r\n                        _this.getEntity()[propertyName] = val;\r\n                    });\r\n\r\n                    _this[backingFieldName] = koProperty;\r\n                }\r\n\r\n                return _this[backingFieldName];\r\n            },\r\n            storeProperty: function (memberDefinition, value) {\r\n            },\r\n            equalityComparers: { type: $data.Object }\r\n        };\r\n\r\n        var properties = originalType.memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0, l = properties.length; i < l; i++) {\r\n            var propName = properties[i].name;\r\n            instanceDefinition[propName] = {\r\n                type: ko.observable\r\n            };\r\n            instanceDefinition[\"ValidationErrors\"] = {\r\n                type: ko.observable\r\n            };\r\n        }\r\n\r\n        $data.Class.defineEx(\r\n            observableClassNem,\r\n            [{ type: $data.KoObservableEntity, params: [new $data.Class.ConstructorParameter(0), function () { return originalType }] }],\r\n            null,\r\n            instanceDefinition,\r\n            {\r\n                isWrappedType: function (type) { return type === originalType; }\r\n            });\r\n    };\r\n\r\n    if (typeof ko !== 'undefined') {\r\n\t\t// custom bindings\r\n\t\tvar ieVersion = (function() {\r\n\t\t\tvar version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n\t\t\t// Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n\t\t\twhile (\r\n\t\t\t\tdiv.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n\t\t\t\tiElems[0]\r\n\t\t\t){};\r\n\t\t\treturn version > 4 ? version : undefined;\r\n\t\t}());\r\n\r\n\t\tko.utils.ensureSelectElementIsRenderedCorrectly = function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            if (ieVersion >= 9) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        };\r\n\r\n\t\tko.utils.setOptionNodeSelectionState = function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (navigator.userAgent.indexOf(\"MSIE 6\") >= 0)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        };\r\n\r\n\t\tko.utils.setTextContent = function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            'innerText' in element ? element.innerText = value\r\n                                   : element.textContent = value;\r\n\r\n            if (ieVersion >= 9) {\r\n                // Believe it or not, this actually fixes an IE9 rendering bug\r\n                // (See https://github.com/SteveSanderson/knockout/issues/209)\r\n                element.style.display = element.style.display;\r\n            }\r\n        };\r\n\r\n\t\tfunction ensureDropdownSelectionIsConsistentWithModelValue(element, modelValue, preferModelValue) {\r\n\t\t\tif (preferModelValue) {\r\n\t\t\t\tif (modelValue !== ko.selectExtensions.readValue(element))\r\n\t\t\t\t\tko.selectExtensions.writeValue(element, modelValue);\r\n\t\t\t}\r\n\r\n\t\t\t// No matter which direction we're syncing in, we want the end result to be equality between dropdown value and model value.\r\n\t\t\t// If they aren't equal, either we prefer the dropdown value, or the model value couldn't be represented, so either way,\r\n\t\t\t// change the model value to match the dropdown.\r\n\t\t\tif (modelValue !== ko.selectExtensions.readValue(element))\r\n\t\t\t\tko.utils.triggerEvent(element, \"change\");\r\n\t\t};\r\n\r\n\t\tko.bindingHandlers['options'] = {\r\n\t\t\t'update': function (element, valueAccessor, allBindingsAccessor) {\r\n\t\t\t\tif (element.tagName.toLowerCase() !== \"select\")\r\n\t\t\t\t\tthrow new Error(\"options binding applies only to SELECT elements\");\r\n\r\n\t\t\t\tvar selectWasPreviouslyEmpty = element.length == 0;\r\n\t\t\t\tvar previousSelectedValues = ko.utils.arrayMap(ko.utils.arrayFilter(element.childNodes, function (node) {\r\n\t\t\t\t\treturn node.tagName && (node.tagName.toLowerCase() === \"option\") && node.selected;\r\n\t\t\t\t}), function (node) {\r\n\t\t\t\t\treturn ko.selectExtensions.readValue(node) || node.innerText || node.textContent;\r\n\t\t\t\t});\r\n\t\t\t\tvar previousScrollTop = element.scrollTop;\r\n\r\n\t\t\t\tvar value = ko.utils.unwrapObservable(valueAccessor());\r\n\t\t\t\tvar selectedValue = element.value;\r\n\r\n\t\t\t\t// Remove all existing <option>s.\r\n\t\t\t\t// Need to use .remove() rather than .removeChild() for <option>s otherwise IE behaves oddly (https://github.com/SteveSanderson/knockout/issues/134)\r\n\t\t\t\twhile (element.length > 0) {\r\n\t\t\t\t\tko.cleanNode(element.options[0]);\r\n\t\t\t\t\telement.remove(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tvar allBindings = allBindingsAccessor();\r\n\t\t\t\t\tif (typeof value.length != \"number\")\r\n\t\t\t\t\t\tvalue = [value];\r\n\t\t\t\t\tif (allBindings['optionsCaption']) {\r\n\t\t\t\t\t\tvar option = document.createElement(\"option\");\r\n\t\t\t\t\t\tko.utils.setHtml(option, allBindings['optionsCaption']);\r\n\t\t\t\t\t\tko.selectExtensions.writeValue(option, allBindings['optionsCaptionValue'] || undefined);\r\n\t\t\t\t\t\telement.appendChild(option);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (var i = 0, j = value.length; i < j; i++) {\r\n\t\t\t\t\t\tvar option = document.createElement(\"option\");\r\n\r\n\t\t\t\t\t\t// Apply a value to the option element\r\n\t\t\t\t\t\tvar optionValue = typeof allBindings['optionsValue'] == \"string\" ? value[i][allBindings['optionsValue']] : value[i];\r\n\t\t\t\t\t\toptionValue = ko.utils.unwrapObservable(optionValue);\r\n\t\t\t\t\t\tko.selectExtensions.writeValue(option, optionValue);\r\n\r\n\t\t\t\t\t\t// Apply some text to the option element\r\n\t\t\t\t\t\tvar optionsTextValue = allBindings['optionsText'];\r\n\t\t\t\t\t\tvar optionText;\r\n\t\t\t\t\t\tif (typeof optionsTextValue == \"function\")\r\n\t\t\t\t\t\t\toptionText = optionsTextValue(value[i]); // Given a function; run it against the data value\r\n\t\t\t\t\t\telse if (typeof optionsTextValue == \"string\")\r\n\t\t\t\t\t\t\toptionText = value[i][optionsTextValue]; // Given a string; treat it as a property name on the data value\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\toptionText = optionValue;\t\t\t\t // Given no optionsText arg; use the data value itself\r\n\t\t\t\t\t\tif ((optionText === null) || (optionText === undefined))\r\n\t\t\t\t\t\t\toptionText = \"\";\r\n\r\n\t\t\t\t\t\tko.utils.setTextContent(option, optionText);\r\n\r\n\t\t\t\t\t\telement.appendChild(option);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n\t\t\t\t\t// That's why we first added them without selection. Now it's time to set the selection.\r\n\t\t\t\t\tvar newOptions = element.getElementsByTagName(\"option\");\r\n\t\t\t\t\tvar countSelectionsRetained = 0;\r\n\t\t\t\t\tfor (var i = 0, j = newOptions.length; i < j; i++) {\r\n\t\t\t\t\t\tif (ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[i])) >= 0) {\r\n\t\t\t\t\t\t\tko.utils.setOptionNodeSelectionState(newOptions[i], true);\r\n\t\t\t\t\t\t\tcountSelectionsRetained++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telement.scrollTop = previousScrollTop;\r\n\r\n\t\t\t\t\tif (selectWasPreviouslyEmpty && ('value' in allBindings)) {\r\n\t\t\t\t\t\t// Ensure consistency between model value and selected option.\r\n\t\t\t\t\t\t// If the dropdown is being populated for the first time here (or was otherwise previously empty),\r\n\t\t\t\t\t\t// the dropdown selection state is meaningless, so we preserve the model value.\r\n\t\t\t\t\t\tensureDropdownSelectionIsConsistentWithModelValue(element, ko.utils.unwrapObservable(allBindings['value']), /* preferModelValue */ true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Workaround for IE9 bug\r\n\t\t\t\t\tko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tko.bindingHandlers['options'].optionValueDomDataKey = '__ko.optionValueDomData__';\r\n\r\n        /* Observable Query*/\r\n        function checkObservableValue(expression, context) {\r\n            if (expression instanceof $data.Expressions.ConstantExpression && ko.isObservable(expression.value)) {\r\n                context.some(function (item) {\r\n                    if (item.observable === expression.value) {\r\n                        item.skipExecute = true;\r\n                    }\r\n                });\r\n                context.push({\r\n                    observable: expression.value,\r\n                    skipExecute: false\r\n                });\r\n                var observableValue = expression.value();\r\n                return Container.createConstantExpression(observableValue, Container.getTypeName(observableValue), expression.name + '$Observable');\r\n            }\r\n            return expression;\r\n        }\r\n\r\n        //$data.Expressions.ParameterResolverVisitor.prototype.resolvedObservables = [];\r\n        var prVisitor = $data.Expressions.ParameterResolverVisitor.prototype.VisitProperty;\r\n        $data.Expressions.ParameterResolverVisitor.prototype.VisitProperty = function (eNode, context) {\r\n            var expression = prVisitor.call(this, eNode, context);\r\n            this.resolvedObservables = this.resolvedObservables || [];\r\n            return checkObservableValue(expression, this.resolvedObservables);\r\n        }\r\n\r\n        var qecVisitConstantExpression = $data.Expressions.QueryExpressionCreator.prototype.VisitConstantExpression;\r\n        $data.Expressions.QueryExpressionCreator.prototype.VisitConstantExpression = function (expression, context) {\r\n            if (qecVisitConstantExpression)\r\n                expression = qecVisitConstantExpression.call(this, expression, context);\r\n\r\n            return checkObservableValue(expression, this.resolvedObservables);\r\n        }\r\n\r\n        //$data.Expressions.QueryExpressionCreator.prototype.resolvedObservables = [];\r\n        var qecVisitCodeExpression = $data.Expressions.QueryExpressionCreator.prototype.VisitCodeExpression;\r\n        $data.Expressions.QueryExpressionCreator.prototype.VisitCodeExpression = function (expression, context) {\r\n            ///<summary>Converts the CodeExpression into an EntityExpression</summary>\r\n            ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\r\n            var source = expression.source.toString();\r\n            var jsCodeTree = Container.createCodeParser(this.scopeContext).createExpression(source);\r\n            this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\r\n\r\n            //TODO rename classes to reflex variable names\r\n            //TODO engage localValueResolver here\r\n            //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\r\n            var constantResolver = Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\r\n            var parameterProcessor = Container.createParameterResolverVisitor();\r\n\r\n            jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\r\n\r\n            //added\r\n            this.resolvedObservables = (this.resolvedObservables || []).concat(parameterProcessor.resolvedObservables);\r\n\r\n            this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\r\n            var code2entity = Container.createCodeToEntityConverter(this.scopeContext);\r\n\r\n            ///user provided query parameter object (specified as thisArg earlier) is passed in\r\n            var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\r\n\r\n            ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\r\n            var result = Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\r\n            this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\r\n\r\n            return result;\r\n        }\r\n\r\n        var qecVisit = $data.Expressions.QueryExpressionCreator.prototype.Visit;\r\n        $data.Expressions.QueryExpressionCreator.prototype.Visit = function (expression, context) {\r\n\r\n            var expressionRes;\r\n            if (expression instanceof $data.Expressions.FrameOperator) {\r\n                this.resolvedObservables = [];\r\n                var expressionRes = qecVisit.call(this, expression, context);\r\n\r\n                expressionRes.observables = this.resolvedObservables;\r\n                expressionRes.baseExpression = expression;\r\n\r\n            } else {\r\n                expressionRes = qecVisit.call(this, expression, context);\r\n            }\r\n            return expressionRes;\r\n        };\r\n\r\n        var esExecuteQuery = $data.EntityContext.prototype.executeQuery;\r\n        $data.EntityContext.prototype.executeQuery = function (expression, on_ready, transaction) {\r\n            var self = this;\r\n            var observables = expression.expression.observables;\r\n            if (observables && observables.length > 0) {\r\n                observables.forEach(function (obsObj) {\r\n                    if (!obsObj)\r\n                        return;\r\n\r\n                    obsObj.observable.subscribe(function () {\r\n                        if (!obsObj.skipExecute) {\r\n                            var preparator = Container.createQueryExpressionCreator(self);\r\n                            var newExpression = preparator.Visit(expression.expression.baseExpression);\r\n\r\n                            esExecuteQuery.call(self, Container.createQueryable(expression, newExpression), on_ready, transaction);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            esExecuteQuery.call(self, expression, on_ready, transaction);\r\n        };\r\n\r\n        /* Observable Query End*/\r\n\r\n        /* Observable entities */\r\n        $data.EntityWrapper.extend('$data.KoObservableEntity', {\r\n            constructor: function (innerData, wrappedType) {\r\n                if (!(wrappedType && wrappedType.isAssignableTo && wrappedType.isAssignableTo($data.Entity))) {\r\n                    Guard.raise(new Exception(\"Type: '\" + wrappedType + \"' is not assignable to $data.Entity\"));\r\n                }\r\n\r\n                var innerInstance;\r\n                if (innerData instanceof wrappedType) {\r\n                    innerInstance = innerData;\r\n                } else if (innerData instanceof $data.Entity) {\r\n                    Guard.raise(new Exception(\"innerData is instance of '$data.Entity' instead of '\" + wrappedType.fullName + \"'\"));\r\n                } else {\r\n                    innerInstance = new wrappedType(innerData);\r\n                }\r\n\r\n                this._wrappedType = wrappedType;\r\n                this.innerInstance = innerInstance;\r\n            },\r\n            getEntity: function () {\r\n                return this.innerInstance;\r\n            },\r\n            updateEntity: function (entity) {\r\n                var data;\r\n                if (entity instanceof this._wrappedType)\r\n                    data = entity;\r\n                else if (entity && !(entity instanceof $data.Entity) && entity instanceof $data.Object)\r\n                    data = entity;\r\n                else\r\n                    Guard.raise('entity is an invalid object');\r\n\r\n                var members = this._wrappedType.memberDefinitions.getPublicMappedProperties();\r\n                for (var i = 0; i < members.length; i++) {\r\n                    var memDef = members[i];\r\n                    if (data[memDef.name] !== undefined) {\r\n                        this[memDef.name](data[memDef.name]);\r\n                        var idx = this.innerInstance.changedProperties.indexOf(memDef);\r\n                        if (idx >= 0)\r\n                            this.innerInstance.changedProperties.splice(idx, 1);\r\n                    }\r\n                }\r\n\r\n            },\r\n\r\n            getProperties: function() {\r\n                //todo cache!\r\n                var self = this;\r\n                var props = this.innerInstance.getType().memberDefinitions.getPublicMappedProperties();\r\n                //todo remove map\r\n                var koData = props.map( function(memberInfo) {\r\n                    return {\r\n                        type: memberInfo.type,\r\n                        name: memberInfo.name,\r\n                        owner: self,\r\n                        metadata: memberInfo,\r\n                        value: self[memberInfo.name]\r\n                    }\r\n                });\r\n                return koData;\r\n            }\r\n        });\r\n\r\n        $data.Entity.prototype.asKoObservable = function () {\r\n            var type = this.getType();\r\n            var observableTypeName = type.namespace + '.Observable' + type.name;\r\n            if (!Container.isTypeRegistered(observableTypeName)) {\r\n                ObservableFactory(type, observableTypeName);\r\n            }\r\n            var observableType = Container.resolveType(observableTypeName);\r\n\r\n            if (!observableType.isWrappedType(type)) {\r\n                ObservableFactory(type, observableTypeName);\r\n                observableType = Container.resolveType(observableTypeName);\r\n            }\r\n\r\n            return new observableType(this);\r\n        };\r\n\r\n        var queryableToArray = $data.Queryable.prototype.toArray;\r\n        $data.Queryable.prototype.toArray = function (onResult_items, transaction) {\r\n            if (ko.isObservable(onResult_items)) {\r\n                if (typeof onResult_items.push !== 'undefined') {\r\n                    var callBack = $data.PromiseHandlerBase.createCallbackSettings();\r\n\r\n                    return this.toArray(function (results, tran) {\r\n                        onResult_items([]);\r\n                        results.forEach(function (result, idx) {\r\n                            if (result instanceof $data.Entity) {\r\n                                onResult_items.push(result.asKoObservable());\r\n                            } else {\r\n                                callBack.error('Not Implemented: Observable result has anonymous objects');\r\n                            }\r\n                        });\r\n                    }, transaction);\r\n                } else {\r\n                    return queryableToArray.call(this, function (result, tran) { onResult_items(result); }, transaction);\r\n                }\r\n            } else {\r\n                return queryableToArray.call(this, onResult_items, transaction);\r\n            }\r\n        }\r\n        /* Observable entities End*/\r\n\r\n\r\n    } else {\r\n        function requiredError() {\r\n            Guard.raise(new Exception('Knockout js is required', 'Not Found!'));\r\n        }\r\n\r\n        $data.Entity.prototype.asKoObservable = requiredError\r\n    }\r\n\r\n})($data);\r\n\r\nexport default $data\r\n"],"sourceRoot":"/source/"}