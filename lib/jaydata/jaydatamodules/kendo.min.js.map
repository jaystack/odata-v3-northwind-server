{"version":3,"sources":["node_modules/browser-pack/_prelude.js","kendo.js","src/JayDataModules/src/JayDataModules/kendo.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_core","_core2","_jquery","_jquery2","_kendo","_kendo2","$","oldProcessor","Entity","inheritedTypeProcessor","kendo","BaseModelType","data","Model","init","fn","attachMode","EntityAttachMode","KeepChanges","kendoTypeMap","$data.Blob","$data.String","$data.Boolean","$data.Integer","$data.Number","$data.Date","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Byte","$data.SByte","$data.Int16","$data.Int32","$data.Int64","$data.Decimal","$data.Float","type","getKendoTypeName","canonicType","pd","createKendoModel","options","getNullable","required","getRequired","nullable","setInitialValue","memDef","memberDefinitions","fields","getPublicMappedProperties","forEach","Container","resolveName","name","defaultValue","editable","computed","validation","modelDefinition","contextSetTypes","owningContextType","undefined","filter","resolveType","EntitySet","map","elementType","newInstanceOptions","entityBuilder","instance","members","memberInfo","key","memberType","isAssignableTo","indexOf","_data","jayInstance","seed","initData","feed","j","md","getMemberDefinition","seedValue","kendoInstance","asKendoObservable","Array","jayType","kendoType","asKendoModel","feedValue","ObservableArray","bind","changeFromKendo","parent","dirty","toJSON","Blob","toBase64","arrayMemberDef","item","dataType","memberDef","innerInstance","propertyChanged","attach","propinfo","jay","newValue","getType","propertyName","blob","toString","convertTo","atob","changeFromJay","set","propName","field","propNameParts","split","propValue","autoSave","save","rootProp","newInstanceCallback","remove","keyProperties","getKeyProperties","id","console","warn","Trace","log","returnValue","cacheObject","kendoModelType","kendoModel","registerStoreAlias","provider","databaseName","tableName","url","apiUrl","oDataServiceHost","storeDef","dataSource","keys","k","setStore","prototype","kendoObservable","asKendoDataSource","modelOptions","storeAlias","mOptions","salias","token","ItemStore","_getStoreAlias","ctx","_getContextPromise","getEntitySetFromElementType","Queryable","addMember","columns","append","isArray","result","concat","prepareResult","prepend","setColumn","colName","def","it","extend","showComplex","defaultType","col","colD","push","EntityContext","addProperty","_entitySetReferences","entityContext","modelItemClass","TransportClass","RemoteTransport","items","read","query","onReady","then","q","withInlineCount","storageProvider","supportedSetOperations","withLength","thisArg","filters","index","logic","operator","allItemsQ","sort","order","dir","skip","take","promises","toArray","when","apply","total","kendoItem","totalCount","success","fail","error","arguments","create","model","modelItems","modelItem","addMany","saveChanges","stateManager","reset","storeToken","update","destroy","setup","jayDataSource","DataSource","createItem","schema","_promise","models","that","transport","Deferred","deferred","response","resolve","status","_error","reject","promise","defaultPageSize","ds","serverPaging","serverFiltering","serverSorting","pageSize","asKendoRemoteTransportClass","binders","submit","Binder","element","bindings","source","path","refresh","jaydata/core"],"mappings":"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","file":"kendo.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿// JayData 1.5.5 RC\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/modules/kendo\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _jquery = (typeof window !== \"undefined\" ? window['jQuery'] : typeof global !== \"undefined\" ? global['jQuery'] : null);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _kendo = (typeof window !== \"undefined\" ? window['kendo'] : typeof global !== \"undefined\" ? global['kendo'] : null);\n\nvar _kendo2 = _interopRequireDefault(_kendo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data, $) {\n    var oldProcessor = $data.Entity.inheritedTypeProcessor;\n\n    $data.kendo = {};\n    $data.kendo.BaseModelType = _kendo2.default.data.Model.define({\n        init: function init(data) {\n            _kendo2.default.data.Model.fn.init.call(this, data);\n        }\n    });\n    $data.kendo.attachMode = true;\n    if ($data.EntityAttachMode) {\n        $data.kendo.attachMode = $data.EntityAttachMode.KeepChanges;\n    }\n\n    var kendoTypeMap = {\n        \"$data.Blob\": \"string\",\n        \"$data.String\": \"string\",\n        \"$data.Boolean\": \"boolean\",\n        \"$data.Integer\": \"number\",\n        \"$data.Number\": \"number\",\n        \"$data.Date\": \"date\",\n        \"$data.DateTimeOffset\": \"date\",\n        \"$data.Time\": \"string\",\n        \"$data.Day\": \"string\",\n        \"$data.Duration\": \"string\",\n        \"$data.Byte\": \"number\",\n        \"$data.SByte\": \"number\",\n        \"$data.Int16\": \"number\",\n        \"$data.Int32\": \"number\",\n        \"$data.Int64\": \"number\",\n        \"$data.Decimal\": \"string\",\n        \"$data.Float\": \"number\"\n    };\n\n    $data.Entity.inheritedTypeProcessor = function (type) {\n        var memberDefinitions = type.memberDefinitions;\n\n        function getKendoTypeName(canonicType, pd) {\n            return kendoTypeMap[canonicType] || 'object';\n        };\n\n        function createKendoModel(options) {\n            ///<param name=\"options\">Contains options.owningContextType if initialized in a scope of a context</param>\n            var memberDefinitions = type.memberDefinitions,\n                fields = {};\n            //debugger;\n            function getNullable(canonicType, pd) {\n                if (canonicType === \"$data.Boolean\") {\n                    //grid validation errs on requied/nonnull bools\n                    return true;\n                }\n                return pd.required !== true;\n            };\n\n            function getRequired(canonicType, pd) {\n                if (\"$data.Boolean\" === canonicType) {\n                    return false;\n                }\n                return pd.required || \"nullable\" in pd ? !pd.nullable : false;\n            }\n\n            memberDefinitions.getPublicMappedProperties().forEach(function (pd) {\n                var canonicType = $data.Container.resolveName(pd.type);\n                //if (pd.dataType !== \"Array\" && !(pd.inverseProperty)) {\n                fields[pd.name] = {\n                    //TODO\n                    type: getKendoTypeName(canonicType, pd),\n                    nullable: getNullable(canonicType, pd),\n                    defaultValue: pd.defaultValue,\n                    //nullable: false,\n                    //nullable:  \"nullable\" in pd ? pd.nullable : true,\n                    editable: !pd.computed,\n                    //defaultValue: true,\n                    //defaultValue: 'abc',\n                    //defaultValue: pd.type === \"Edm.Boolean\" ? false : undefined,\n                    validation: {\n                        required: getRequired(canonicType, pd)\n                    }\n                };\n                //};\n            });\n\n            function setInitialValue(obj, memDef) {\n                return;\n                //if (!obj[memDef.name]) {\n                //    function getDefault() {\n                //        switch ($data.Container.resolveType(memDef.type)) {\n                //            case $data.Number: return 0.0;\n                //            case $data.Integer: return 0;\n                //            case $data.Date: return new Date();\n                //            case $data.Boolean: return false;\n                //        }\n                //    }\n                //    obj[memDef.name] = getDefault();\n                //}\n            }\n\n            var modelDefinition = {\n                fields: fields,\n                init: function init(data) {\n                    var ctxType = options && options.owningContextType || undefined;\n\n                    var contextSetTypes = [];\n                    if (options && options.owningContextType) {\n                        contextSetTypes = options.owningContextType.memberDefinitions.getPublicMappedProperties().filter(function (pd) {\n                            return $data.Container.resolveType(pd.type) === $data.EntitySet;\n                        }).map(function (pd) {\n                            return $data.Container.resolveType(pd.elementType);\n                        });\n                    }\n\n                    var newInstanceOptions = {\n                        entityBuilder: function entityBuilder(instance, members) {\n                            members.forEach(function (memberInfo) {\n                                if (!(memberInfo.key === true) && (memberInfo.required === true || memberInfo.nullable === false)) {\n                                    var memberType = $data.Container.resolveType(memberInfo.type);\n                                    if (memberType.isAssignableTo && memberType.isAssignableTo($data.Entity) && contextSetTypes.indexOf(memberType) === -1) {\n                                        //it's a complex property\n                                        var _data;\n                                        if (data) {\n                                            _data = data[memberInfo.name];\n                                        }\n                                        instance[memberInfo.name] = new memberType(_data, newInstanceOptions);\n                                    } else {\n                                        setInitialValue(instance, memberInfo);\n                                    }\n                                }\n                            });\n                        }\n                    };\n\n                    var jayInstance = data instanceof type ? data : new type(data, newInstanceOptions);\n\n                    var seed = jayInstance.initData;\n\n                    var feed = {};\n\n                    //TODO create precompiled strategy\n                    for (var j in seed) {\n                        var md = type.getMemberDefinition(j);\n                        var seedValue = seed[j];\n                        if (seedValue instanceof $data.Entity) {\n                            var kendoInstance = seedValue.asKendoObservable();\n                            feed[j] = kendoInstance;\n                        } else if (md && $data.Container.resolveType(md.type) === Array) {\n                            var jayType = $data.Container.resolveType(md.elementType);\n                            var kendoType = jayType;\n                            if (jayType.asKendoModel) {\n                                kendoType = jayType.asKendoModel();\n                            }\n                            var feedValue = new _kendo2.default.data.ObservableArray(seed[j], kendoType);\n                            feed[j] = feedValue;\n                            feed[j].bind('change', function (e) {\n                                jayInstance.changeFromKendo = true;\n                                this.parent().dirty = true;\n                                jayInstance[md.name] = this.toJSON();\n                                delete jayInstance.changeFromKendo;\n                            });\n                        } else if (md && $data.Container.resolveType(md.type) === $data.Blob) {\n                            feed[j] = $data.Blob.toBase64(seedValue);\n                            //feed[j] = new kendo.data.Observable($data.Blob.toBase64(seedValue));\n                            /*feed[j].bind('change', function(e){\r\n                                //jayInstance.changeFromKendo = true;\r\n                                jayInstance[md.name] = $data.Container.convertTo(atob(this), $data.Blob);\r\n                                //delete jayInstance.changeFromKendo;\r\n                            });*/\n                        } else {\n                                feed[j] = seedValue;\n                            }\n                    }\n\n                    var arrayMemberDef = type.memberDefinitions.getPublicMappedProperties().filter(function (item) {\n                        return $data.Container.resolveType(item.dataType) === Array && !$data.Container.resolveType(item.elementType).asKendoModel;\n                    });\n                    for (var j = 0; j < arrayMemberDef.length; j++) {\n                        var memberDef = arrayMemberDef[j];\n                        if (seed[memberDef.name] === null || seed[memberDef.name] === undefined) {\n                            feed[memberDef.name] = new _kendo2.default.data.ObservableArray([], $data.Container.resolveType(memberDef.elementType));\n                            feed[memberDef.name].bind('change', function (e) {\n                                jayInstance.changeFromKendo = true;\n                                this.parent().dirty = true;\n                                jayInstance[memberDef.name] = this.toJSON();\n                                delete jayInstance.changeFromKendo;\n                            });\n                        }\n                    }\n\n                    var self = this;\n                    this.innerInstance = function () {\n                        return jayInstance;\n                    };\n\n                    //kendo.data.Model.fn.init.call(this, feed);\n                    $data.kendo.BaseModelType.fn.init.call(this, feed);\n\n                    jayInstance.propertyChanged.attach(function (obj, propinfo) {\n                        var jay = this;\n                        var newValue = propinfo.newValue;\n                        var md = jayInstance.getType().getMemberDefinition(propinfo.propertyName);\n                        if (!jay.changeFromKendo) {\n                            newValue = newValue ? newValue.asKendoObservable ? newValue.asKendoObservable() : newValue : newValue;\n                            jayInstance.changeFromJay = true;\n                            if ($data.Container.resolveType(md.type) === $data.Blob && newValue) {\n                                newValue = $data.Blob.toBase64(newValue);\n                            }\n                            self.set(propinfo.propertyName, newValue);\n                            if (md.computed && self[propinfo.propertyName] !== newValue) {\n                                self[propinfo.propertyName] = newValue;\n                            }\n                            delete jayInstance.changeFromJay;\n                        } else {\n                            if ($data.Container.resolveType(md.type) === $data.Blob) {\n                                var blob = $data.Blob.toString(newValue);\n                                newValue = $data.Container.convertTo(atob(blob), $data.Blob);\n                                jayInstance.changeFromJay = true;\n                                jayInstance.initData[md.name] = newValue;\n                                //self.set(propinfo.propertyName, blob);\n                                delete jayInstance.changeFromJay;\n                            }\n                        }\n                    });\n\n                    this.bind(\"set\", function (e) {\n                        var propName = e.field;\n                        var propNameParts = propName.split(\".\");\n                        jayInstance.changeFromKendo = true;\n                        if (propNameParts.length == 1) {\n                            var propValue = e.value;\n                            if (!jayInstance.changeFromJay) {\n                                propValue = propValue && propValue.innerInstance ? propValue.innerInstance() : propValue;\n                                jayInstance[propName] = propValue;\n                                if (options && options.autoSave) {\n                                    jayInstance.save();\n                                }\n                            }\n                        } else {\n                            var rootProp = jayInstance[propNameParts[0]];\n                            if (rootProp instanceof $data.Entity) {\n                                jayInstance[propNameParts[0]] = rootProp;\n                            }\n                        }\n                        delete jayInstance.changeFromKendo;\n                    });\n                    if (options && options.newInstanceCallback) {\n                        options.newInstanceCallback(jayInstance);\n                    }\n                },\n                save: function save() {\n                    //console.log(\"item.save\", this, arguments);\n                    return this.innerInstance().save();\n                },\n                remove: function remove() {\n                    return this.innerInstance().remove();\n                }\n\n            };\n\n            var keyProperties = memberDefinitions.getKeyProperties();\n            switch (keyProperties.length) {\n                case 0:\n                    break;\n                case 1:\n                    modelDefinition.id = keyProperties[0].name;\n                    break;\n                default:\n                    console.warn(\"entity with multiple keys not supported\");\n                    break;\n            }\n            $data.Trace.log(\"md\", modelDefinition);\n\n            var returnValue = _kendo2.default.data.Model.define($data.kendo.BaseModelType, modelDefinition);\n\n            return returnValue;\n        }\n\n        function asKendoModel(options) {\n            var cacheObject = options || type;\n            return cacheObject.kendoModelType || (cacheObject.kendoModelType = createKendoModel(options));\n        }\n\n        function asKendoObservable(instance, options) {\n            var kendoModel = type.asKendoModel(options);\n            return new kendoModel(instance);\n        }\n\n        type.asKendoModel = asKendoModel;\n        //type.asKendoModelType = asKendoModel;\n\n        type.prototype.asKendoObservable = function (options) {\n            var self = this;\n\n            var kendoObservable = asKendoObservable(this, options);\n\n            return kendoObservable;\n        };\n\n        function r(value) {\n            return value || '';\n        }\n        function registerStoreAlias(type, options) {\n            if (!options.provider) return;\n            var key = r(options.databaseName) + r(options.tableName) + r(options.url) + r(options.apiUrl) + r(options.oDataServiceHost);\n            var storeDef = {\n                provider: options.provider,\n                databaseName: options.databaseName,\n                tableName: options.tableName,\n                dataSource: options.url,\n                apiUrl: options.apiUrl,\n                oDataServiceHost: options.oDataServiceHost\n            };\n            Object.keys(storeDef).forEach(function (k) {\n                delete options[k];\n            });\n\n            type.setStore(key, storeDef);\n            return key;\n        }\n\n        type.asKendoDataSource = function (options, modelOptions, storeAlias) {\n            options = options || {};\n            var mOptions = modelOptions || {};\n            var salias = registerStoreAlias(type, options) || storeAlias;\n            var token = $data.ItemStore._getStoreAlias(type, salias);\n            var ctx = $data.ItemStore._getContextPromise(token, type);\n            var set = ctx.getEntitySetFromElementType(type);\n            return set.asKendoDataSource(options, mOptions);\n        };\n\n        if (oldProcessor) {\n            oldProcessor(type);\n        }\n    };\n    $data.Queryable.addMember(\"asKendoColumns\", function (columns) {\n        var result = [];\n        columns = columns || {};\n        var showComplex = columns['$showComplexFields'] === true;\n        delete columns['$showComplexFields'];\n\n        this.defaultType.memberDefinitions.getPublicMappedProperties().forEach(function (pd) {\n            //if (pd.dataType !== \"Array\" && !(pd.inverseProperty)) {\n            if (showComplex || kendoTypeMap[$data.Container.resolveName(pd.type)]) {\n                var col = columns[pd.name] || {};\n                var colD = { field: pd.name };\n                $.extend(colD, col);\n                result.push(colD);\n            }\n            //}\n        });\n\n        function append(field) {\n            field = Array.isArray(field) ? field : [field];\n            var result = this.concat(field);\n            return prepareResult(result);\n        }\n\n        function prepend(field) {\n            field = Array.isArray(field) ? field : [field];\n            var result = field.concat(this);\n            return prepareResult(result);\n        }\n\n        function setColumn(colName, def) {\n            var it = this.filter(function (item) {\n                return item.field == colName;\n            })[0];\n            $.extend(it, def);\n            return this;\n        }\n\n        function prepareResult(r) {\n            r.prepend = prepend;\n            r.append = append;\n            r.setColumn = setColumn;\n            return r;\n        }\n        return prepareResult(result);\n        //return ['id', 'Year', 'Manufacturer', { command: [\"edit\", \"create\", \"destroy\", \"update\"] }];\n    }),\n\n    //, { command: [\"edit\", \"create\", \"destroy\", \"update\"]}\n    $data.EntityContext.addProperty(\"EntitySetNames\", function () {\n        var self = this;\n        //var sets = Object.keys(self._entitySetReferences);\n        //return sets;\n        return Object.keys(self._entitySetReferences).map(function (set) {\n            return self._entitySetReferences[set].tableName;\n        });\n    });\n\n    $data.Queryable.addMember(\"asKendoModel\", function (options) {\n        options.owningContextType = options.owningContextType || this.entityContext.getType();\n        return this.defaultType.asKendoModel(options);\n    });\n\n    $data.Queryable.addMember(\"asKendoRemoteTransportClass\", function (modelItemClass) {\n        var self = this;\n        var ctx = self.entityContext;\n        function reset() {\n            ctx.stateManager.reset();\n        };\n        var TransportClass = _kendo2.default.data.RemoteTransport.extend({\n            init: function init() {\n                this.items = [];\n            },\n            read: function read(options) {\n                var query = self;\n\n                query.entityContext.onReady().then(function () {\n                    var _this = this;\n                    var q = query;\n                    var sp = query.entityContext.storageProvider;\n                    var withInlineCount = query.entityContext.storageProvider.supportedSetOperations.withInlineCount;\n                    var withLength = !withInlineCount && query.entityContext.storageProvider.supportedSetOperations.length;\n\n                    if (withInlineCount) {\n                        q = q.withInlineCount();\n                    }\n\n                    if (options.data.filter) {\n                        var filter = \"\";\n                        var thisArg = {};\n                        options.data.filter.filters.forEach(function (f, index) {\n                            if (index > 0) {\n                                filter += options.data.filter.logic == \"or\" ? \" || \" : \" && \";\n                            }\n\n                            switch (f.operator) {\n                                case 'eq':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" == this.\" + f.field;\n                                    break;\n                                case 'neq':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" != this.\" + f.field;\n                                    break;\n                                case 'startswith':\n                                    filter += \"it.\" + f.field;\n                                    filter += \".startsWith(this.\" + f.field + \")\";\n                                    break;\n                                case 'contains':\n                                    filter += \"it.\" + f.field;\n                                    filter += \".contains(this.\" + f.field + \")\";\n                                    break;\n                                case 'doesnotcontain':\n                                    filter += \"!\";\n                                    filter += \"it.\" + f.field;\n                                    filter += \".contains(this.\" + f.field + \")\";\n                                    break;\n                                case 'endswith':\n                                    filter += \"it.\" + f.field;\n                                    filter += \".endsWith(this.\" + f.field + \")\";\n                                    break;\n                                case 'gte':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" >= this.\" + f.field;\n                                    break;\n                                case 'gt':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" > this.\" + f.field;\n                                    break;\n                                case 'lte':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" <= this.\" + f.field;\n                                    break;\n                                case 'lt':\n                                    filter += \"it.\" + f.field;\n                                    filter += \" < this.\" + f.field;\n                                    break;\n                                default:\n                                    $data.Trace.log('unknown operator', f.operator);\n                                    break;\n                            }\n                            thisArg[f.field] = f.value;\n                        });\n                        q = q.filter(filter, thisArg);\n                    }\n                    var allItemsQ = q;\n\n                    if (options.data.sort) {\n                        options.data.sort.forEach(function (s) {\n                            q = q.order((s.dir == 'desc' ? \"-\" : \"\") + s.field);\n                        });\n                    }\n\n                    if (options.data.skip) {\n                        q = q.skip(options.data.skip);\n                    }\n                    if (options.data.take) {\n                        q = q.take(options.data.take);\n                    }\n\n                    //Data.defaultHttpClient.enableJsonpCallback = true;\n                    var promises = [];\n\n                    promises.push(q.toArray());\n                    //var ta = q.toArray();\n                    if (withLength) {\n                        promises.push(allItemsQ.length());\n                    } else if (!withInlineCount) {\n                        promises.push(allItemsQ.toArray());\n                    }\n\n                    $data.Trace.log(promises);\n                    _jquery2.default.when.apply(this, promises).then(function (items, total) {\n                        //var result = items.map(function (item) { return item instanceof $data.Entity ? new model(item.initData) : item; });\n                        var result = items.map(function (item) {\n                            var d = item instanceof $data.Entity ? item.initData : item;\n                            var kendoItem = item.asKendoObservable();\n                            return kendoItem;\n                        });\n                        var r = {\n                            data: result,\n                            total: withInlineCount ? items.totalCount : withLength ? total : total.length\n                        };\n                        $data.Trace.log(r);\n                        options.success(r);\n                    }).fail(function () {\n                        console.log(\"error in create\");\n                        options.error({}, arguments);\n                    });\n                });\n            },\n            create: function create(options, model) {\n                var query = self;\n                query.entityContext.onReady().then(function () {\n                    if (model.length > 1) {\n                        var modelItems = [];\n                        model.forEach(function (modelItem) {\n                            modelItems.push(modelItem.innerInstance());\n                        });\n                        ctx.addMany(modelItems);\n                        ctx.saveChanges().then(function () {\n                            var data = [];\n                            modelItems.forEach(function (modelItem) {\n                                data.push(modelItem.initData);\n                            });\n                            options.success();\n                        }). /*{ data: data }*/fail(function () {\n                            console.log(\"error in create\");\n                            options.error({}, arguments);\n                            ctx.stateManager.reset();\n                        });\n                    } else {\n                        model[0].innerInstance().save(ctx.storeToken).then(function () {\n                            options.success();\n                        }). /*{ data: model[0].innerInstance().initData }*/fail(function () {\n                            console.log(\"error in create\");\n                            options.error({}, arguments);\n                        });\n                    }\n                });\n            },\n            update: function update(options, model) {\n                var query = self;\n                query.entityContext.onReady().then(function () {\n                    if (model.length > 1) {\n                        var items = model.map(function (item) {\n                            return item.innerInstance();\n                        });\n                        items.forEach(function (item) {\n                            ctx.attach(item, $data.kendo.attachMode);\n                        });\n                        ctx.saveChanges().then(function () {\n                            options.success();\n                        }).fail(function () {\n                            ctx.stateManager.reset();\n                            //alert(\"error in batch update\");\n                            options.error({}, arguments);\n                        });\n                    } else {\n                        model[0].innerInstance().save(undefined, undefined, $data.kendo.attachMode).then(function (item) {\n                            options.success();\n                        }).fail(function () {\n                            //alert(\"error in update\")\n                            options.error({}, arguments);\n                        });\n                    }\n                });\n            },\n\n            destroy: function destroy(options, model) {\n                var query = self;\n                query.entityContext.onReady().then(function () {\n                    if (model.length > 1) {\n                        model.forEach(function (item) {\n                            ctx.remove(item.innerInstance());\n                        });\n                        ctx.saveChanges().then(function () {\n                            options.success({ data: options.data });\n                        }).fail(function () {\n                            ctx.stateManager.reset();\n                            //alert(\"error in save:\" + arguments[0]);\n                            options.error({}, \"error\", options.data);\n                        });\n                    } else {\n                        model[0].innerInstance().remove().then(function () {\n                            options.success({ data: options.data });\n                        }).fail(function () {\n                            ctx.stateManager.reset();\n                            //alert(\"error in save:\" + arguments[0]);\n                            options.error({}, \"error\", options.data);\n                        });\n                    }\n                });\n            },\n            setup: function setup() {\n                $data.Trace.log(\"setup\");\n                $data.Trace.log(arguments);\n            }\n        });\n        return TransportClass;\n    });\n\n    var jayDataSource = _kendo2.default.data.DataSource.extend({\n        init: function init() {\n            _kendo2.default.data.DataSource.fn.init.apply(this, arguments);\n        },\n        createItem: function createItem(initData) {\n            var type = this.options.schema.model;\n            return new type(initData);\n        },\n        _promise: function _promise(data, models, type) {\n            var that = this,\n                extend = $.extend,\n                transport = that.transport;\n\n            return $.Deferred(function (deferred) {\n                transport[type].call(transport, extend({\n                    success: function success(response) {\n                        deferred.resolve({\n                            response: response,\n                            models: models,\n                            type: type\n                        });\n                    },\n                    error: function error(response, status, _error) {\n                        deferred.reject(response);\n                        that.error(response, status, _error);\n                    }\n                }, data), models);\n            }).promise();\n        }\n    });\n\n    $data.kendo = $data.kendo || {};\n\n    $data.kendo.defaultPageSize = 25;\n\n    $data.Queryable.addMember(\"asKendoDataSource\", function (ds, modelOptions) {\n        var self = this;\n\n        modelOptions = modelOptions || {};\n        var model = self.asKendoModel(modelOptions);\n\n        ds = ds || {};\n        //unless user explicitly opts out server side logic\n        //we just force it.\n        ds.serverPaging = ds.serverPaging === undefined ? true : ds.serverPaging;\n        ds.serverFiltering = ds.serverFiltering === undefined ? true : ds.serverFiltering;\n        ds.serverSorting = ds.serverSorting === undefined ? true : ds.serverSorting;\n        ds.pageSize = ds.pageSize === undefined ? $data.kendo.defaultPageSize : ds.pageSize;\n\n        var TransportClass = self.asKendoRemoteTransportClass(model);\n        ds.transport = new TransportClass();\n\n        ds.schema = {\n            model: model,\n            data: \"data\",\n            total: \"total\"\n        };\n        return new jayDataSource(ds);\n    });\n\n    _kendo2.default.data.binders.submit = _kendo2.default.data.Binder.extend({\n        init: function init(element, bindings, options) {\n            _kendo2.default.data.Binder.fn.init.call(this, element, bindings, options);\n            $(element).bind(\"submit\", function () {\n                var obj = bindings.submit.source;\n                var fn = obj[bindings.submit.path];\n                if (typeof fn === 'function') {\n                    fn.apply(obj, arguments);\n                    return false;\n                }\n            });\n        },\n        refresh: function refresh() {}\n    });\n})(_core2.default, _jquery2.default);\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"jaydata/core\":\"jaydata/core\"}]},{},[1])(1)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport jQuery from 'jquery';\r\nimport kendo from 'kendo'\r\n\r\n(function ($data, $) {\r\n    var oldProcessor = $data.Entity.inheritedTypeProcessor;\r\n\r\n    $data.kendo = {};\r\n    $data.kendo.BaseModelType = kendo.data.Model.define({\r\n        init: function (data) {\r\n            kendo.data.Model.fn.init.call(this, data);\r\n        }\r\n    });\r\n    $data.kendo.attachMode = true;\r\n    if ($data.EntityAttachMode) {\r\n        $data.kendo.attachMode = $data.EntityAttachMode.KeepChanges;\r\n    }\r\n\r\n    var kendoTypeMap = {\r\n        \"$data.Blob\": \"string\",\r\n        \"$data.String\": \"string\",\r\n        \"$data.Boolean\": \"boolean\",\r\n        \"$data.Integer\": \"number\",\r\n        \"$data.Number\": \"number\",\r\n        \"$data.Date\": \"date\",\r\n        \"$data.DateTimeOffset\": \"date\",\r\n        \"$data.Time\": \"string\",\r\n        \"$data.Day\": \"string\",\r\n        \"$data.Duration\": \"string\",\r\n        \"$data.Byte\": \"number\",\r\n        \"$data.SByte\": \"number\",\r\n        \"$data.Int16\": \"number\",\r\n        \"$data.Int32\": \"number\",\r\n        \"$data.Int64\": \"number\",\r\n        \"$data.Decimal\": \"string\",\r\n        \"$data.Float\": \"number\"\r\n    }\r\n\r\n    $data.Entity.inheritedTypeProcessor = function (type) {\r\n        var memberDefinitions = type.memberDefinitions;\r\n\r\n        function getKendoTypeName(canonicType, pd) {\r\n            return kendoTypeMap[canonicType] || 'object';\r\n        };\r\n\r\n        function createKendoModel(options) {\r\n            ///<param name=\"options\">Contains options.owningContextType if initialized in a scope of a context</param>\r\n            var memberDefinitions = type.memberDefinitions,\r\n\t\t\tfields = {};\r\n            //debugger;\r\n            function getNullable(canonicType, pd) {\r\n                if (canonicType === \"$data.Boolean\") {\r\n                    //grid validation errs on requied/nonnull bools\r\n                    return true;\r\n                }\r\n                return pd.required !== true;\r\n            };\r\n\r\n            function getRequired(canonicType, pd) {\r\n                if (\"$data.Boolean\" === canonicType) {\r\n                    return false;\r\n                }\r\n                return pd.required || \"nullable\" in pd ? !(pd.nullable) : false;\r\n            }\r\n\r\n            memberDefinitions\r\n\t\t\t.getPublicMappedProperties()\r\n\t\t\t.forEach(function (pd) {\r\n\t\t\t    var canonicType = $data.Container.resolveName(pd.type);\r\n\t\t\t    //if (pd.dataType !== \"Array\" && !(pd.inverseProperty)) {\r\n\t\t\t    fields[pd.name] = {\r\n\t\t\t        //TODO\r\n\t\t\t        type: getKendoTypeName(canonicType, pd),\r\n\t\t\t        nullable: getNullable(canonicType, pd),\r\n\t\t\t        defaultValue: pd.defaultValue,\r\n\t\t\t        //nullable: false,\r\n\t\t\t        //nullable:  \"nullable\" in pd ? pd.nullable : true,\r\n\t\t\t        editable: !pd.computed,\r\n\t\t\t        //defaultValue: true,\r\n\t\t\t        //defaultValue: 'abc',\r\n\t\t\t        //defaultValue: pd.type === \"Edm.Boolean\" ? false : undefined,\r\n\t\t\t        validation: {\r\n\t\t\t            required: getRequired(canonicType, pd)\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    //};\r\n\t\t\t});\r\n\r\n            function setInitialValue(obj, memDef) {\r\n                return;\r\n                //if (!obj[memDef.name]) {\r\n                //    function getDefault() {\r\n                //        switch ($data.Container.resolveType(memDef.type)) {\r\n                //            case $data.Number: return 0.0;\r\n                //            case $data.Integer: return 0;\r\n                //            case $data.Date: return new Date();\r\n                //            case $data.Boolean: return false;\r\n                //        }\r\n                //    }\r\n                //    obj[memDef.name] = getDefault();\r\n                //}\r\n            }\r\n\r\n            var modelDefinition = {\r\n                fields: fields,\r\n                init: function (data) {\r\n                    var ctxType = options && options.owningContextType || undefined;\r\n\r\n                    var contextSetTypes = [];\r\n                    if (options && options.owningContextType) {\r\n                        contextSetTypes = options.owningContextType\r\n\t\t\t\t\t\t.memberDefinitions\r\n\t\t\t\t\t\t.getPublicMappedProperties()\r\n\t\t\t\t\t\t.filter(function (pd) {\r\n\t\t\t\t\t\t    return $data.Container.resolveType(pd.type) === $data.EntitySet\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.map(function (pd) {\r\n\t\t\t\t\t\t    return $data.Container.resolveType(pd.elementType)\r\n\t\t\t\t\t\t});\r\n                    }\r\n\r\n                    var newInstanceOptions = {\r\n                        entityBuilder: function (instance, members) {\r\n                            members.forEach(function (memberInfo) {\r\n                                if (!(memberInfo.key === true) && (memberInfo.required === true || memberInfo.nullable === false)) {\r\n                                    var memberType = $data.Container.resolveType(memberInfo.type);\r\n                                    if (memberType.isAssignableTo && memberType.isAssignableTo($data.Entity) && contextSetTypes.indexOf(memberType) === -1) {\r\n                                        //it's a complex property\r\n                                        var _data;\r\n                                        if (data) {\r\n                                            _data = data[memberInfo.name];\r\n                                        }\r\n                                        instance[memberInfo.name] = new memberType(_data, newInstanceOptions);\r\n                                    }\r\n                                    else {\r\n                                        setInitialValue(instance, memberInfo);\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    var jayInstance = data instanceof type ? data : new type(data, newInstanceOptions);\r\n\r\n                    var seed = jayInstance.initData;\r\n\r\n                    var feed = {};\r\n\r\n                    //TODO create precompiled strategy\r\n                    for (var j in seed) {\r\n                        var md = type.getMemberDefinition(j);\r\n                        var seedValue = seed[j];\r\n                        if (seedValue instanceof $data.Entity) {\r\n                            var kendoInstance = seedValue.asKendoObservable();\r\n                            feed[j] = kendoInstance;\r\n                        }\r\n                        else if (md && $data.Container.resolveType(md.type) === Array) {\r\n                            var jayType = $data.Container.resolveType(md.elementType);\r\n                            var kendoType = jayType;\r\n                            if (jayType.asKendoModel) {\r\n                                kendoType = jayType.asKendoModel();\r\n                            }\r\n                            var feedValue = new kendo.data.ObservableArray(seed[j], kendoType);\r\n                            feed[j] = feedValue;\r\n                            feed[j].bind('change', function (e) {\r\n                                jayInstance.changeFromKendo = true;\r\n                                this.parent().dirty = true;\r\n                                jayInstance[md.name] = this.toJSON();\r\n                                delete jayInstance.changeFromKendo;\r\n                            });\r\n                        }\r\n                        else if (md && $data.Container.resolveType(md.type) === $data.Blob){\r\n                            feed[j] = $data.Blob.toBase64(seedValue);\r\n                            //feed[j] = new kendo.data.Observable($data.Blob.toBase64(seedValue));\r\n                            /*feed[j].bind('change', function(e){\r\n                                //jayInstance.changeFromKendo = true;\r\n                                jayInstance[md.name] = $data.Container.convertTo(atob(this), $data.Blob);\r\n                                //delete jayInstance.changeFromKendo;\r\n                            });*/\r\n                        }\r\n                        else {\r\n                            feed[j] = seedValue;\r\n                        }\r\n                    }\r\n\r\n                    var arrayMemberDef = type.memberDefinitions.getPublicMappedProperties().filter(function (item) {\r\n                        return (($data.Container.resolveType(item.dataType) === Array) && (!$data.Container.resolveType(item.elementType).asKendoModel))\r\n                    });\r\n                    for (var j = 0; j < arrayMemberDef.length; j++) {\r\n                        var memberDef = arrayMemberDef[j];\r\n                        if (seed[memberDef.name] === null || seed[memberDef.name] === undefined) {\r\n                            feed[memberDef.name] = new kendo.data.ObservableArray([], $data.Container.resolveType(memberDef.elementType))\r\n                            feed[memberDef.name].bind('change', function (e) {\r\n                                jayInstance.changeFromKendo = true;\r\n                                this.parent().dirty = true;\r\n                                jayInstance[memberDef.name] = this.toJSON();\r\n                                delete jayInstance.changeFromKendo;\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    var self = this;\r\n                    this.innerInstance = function () {\r\n                        return jayInstance\r\n                    }\r\n\r\n                    //kendo.data.Model.fn.init.call(this, feed);\r\n                    $data.kendo.BaseModelType.fn.init.call(this, feed);\r\n\r\n                    jayInstance.propertyChanged.attach(function (obj, propinfo) {\r\n                        var jay = this;\r\n                        var newValue = propinfo.newValue;\r\n                        var md = jayInstance.getType().getMemberDefinition(propinfo.propertyName);\r\n                        if (!jay.changeFromKendo) {\r\n                            newValue = newValue ? (newValue.asKendoObservable ? newValue.asKendoObservable() : newValue) : newValue;\r\n                            jayInstance.changeFromJay = true;\r\n                            if ($data.Container.resolveType(md.type) === $data.Blob && newValue){\r\n                                newValue = $data.Blob.toBase64(newValue);\r\n                            }\r\n                            self.set(propinfo.propertyName, newValue);\r\n                            if (md.computed && self[propinfo.propertyName] !== newValue){\r\n                                self[propinfo.propertyName] = newValue;\r\n                            }\r\n                            delete jayInstance.changeFromJay;\r\n                        }else{\r\n                            if ($data.Container.resolveType(md.type) === $data.Blob){\r\n                                var blob = $data.Blob.toString(newValue);\r\n                                newValue = $data.Container.convertTo(atob(blob), $data.Blob);\r\n                                jayInstance.changeFromJay = true;\r\n                                jayInstance.initData[md.name] = newValue;\r\n                                //self.set(propinfo.propertyName, blob);\r\n                                delete jayInstance.changeFromJay;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    this.bind(\"set\", function (e) {\r\n                        var propName = e.field;\r\n                        var propNameParts = propName.split(\".\");\r\n                        jayInstance.changeFromKendo = true;\r\n                        if (propNameParts.length == 1) {\r\n                            var propValue = e.value;\r\n                            if (!jayInstance.changeFromJay) {\r\n                                propValue = propValue && propValue.innerInstance ? propValue.innerInstance() : propValue;\r\n                                jayInstance[propName] = propValue;\r\n                                if (options && options.autoSave) {\r\n                                    jayInstance.save();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            var rootProp = jayInstance[propNameParts[0]];\r\n                            if (rootProp instanceof $data.Entity) {\r\n                                jayInstance[propNameParts[0]] = rootProp;\r\n                            }\r\n                        }\r\n                        delete jayInstance.changeFromKendo;\r\n                    });\r\n                    if (options && options.newInstanceCallback) {\r\n                        options.newInstanceCallback(jayInstance);\r\n                    }\r\n                },\r\n                save: function () {\r\n                    //console.log(\"item.save\", this, arguments);\r\n                    return this.innerInstance().save();\r\n                },\r\n                remove: function () {\r\n                    return this.innerInstance().remove();\r\n                }\r\n\r\n            };\r\n\r\n            var keyProperties = memberDefinitions.getKeyProperties();\r\n            switch (keyProperties.length) {\r\n                case 0:\r\n                    break;\r\n                case 1:\r\n                    modelDefinition.id = keyProperties[0].name;\r\n                    break;\r\n                default:\r\n                    console.warn(\"entity with multiple keys not supported\");\r\n                    break;\r\n            }\r\n            $data.Trace.log(\"md\", modelDefinition);\r\n\r\n            var returnValue = kendo.data.Model.define($data.kendo.BaseModelType, modelDefinition);\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        function asKendoModel(options) {\r\n            var cacheObject = options || type;\r\n            return cacheObject.kendoModelType || (cacheObject.kendoModelType = createKendoModel(options));\r\n        }\r\n\r\n        function asKendoObservable(instance, options) {\r\n            var kendoModel = type.asKendoModel(options);\r\n            return new kendoModel(instance);\r\n        }\r\n\r\n        type.asKendoModel = asKendoModel;\r\n        //type.asKendoModelType = asKendoModel;\r\n\r\n        type.prototype.asKendoObservable = function (options) {\r\n            var self = this;\r\n\r\n            var kendoObservable = asKendoObservable(this, options);\r\n\r\n            return kendoObservable;\r\n        }\r\n\r\n        function r(value) {\r\n            return value || '';\r\n        }\r\n        function registerStoreAlias(type, options) {\r\n            if (!options.provider)\r\n                return;\r\n            var key = r(options.databaseName) + r(options.tableName) + r(options.url) + r(options.apiUrl) + r(options.oDataServiceHost);\r\n            var storeDef = {\r\n                provider: options.provider,\r\n                databaseName: options.databaseName,\r\n                tableName: options.tableName,\r\n                dataSource: options.url,\r\n                apiUrl: options.apiUrl,\r\n                oDataServiceHost: options.oDataServiceHost\r\n            };\r\n            Object.keys(storeDef).forEach(function (k) {\r\n                delete options[k];\r\n            });\r\n\r\n            type.setStore(key, storeDef);\r\n            return key;\r\n        }\r\n\r\n        type.asKendoDataSource = function (options, modelOptions, storeAlias) {\r\n            options = options || {};\r\n            var mOptions = modelOptions || {};\r\n            var salias = registerStoreAlias(type, options) || storeAlias;\r\n            var token = $data.ItemStore._getStoreAlias(type, salias);\r\n            var ctx = $data.ItemStore._getContextPromise(token, type);\r\n            var set = ctx.getEntitySetFromElementType(type);\r\n            return set.asKendoDataSource(options, mOptions);\r\n        };\r\n\r\n        if (oldProcessor) {\r\n            oldProcessor(type);\r\n        }\r\n    }\r\n    $data.Queryable.addMember(\"asKendoColumns\", function (columns) {\r\n        var result = [];\r\n        columns = columns || {};\r\n        var showComplex = columns['$showComplexFields'] === true;\r\n        delete columns['$showComplexFields'];\r\n\r\n        this.defaultType\r\n\t\t.memberDefinitions\r\n\t\t.getPublicMappedProperties()\r\n\t\t.forEach(function (pd) {\r\n\t\t    //if (pd.dataType !== \"Array\" && !(pd.inverseProperty)) {\r\n\t\t    if (showComplex || kendoTypeMap[$data.Container.resolveName(pd.type)]) {\r\n\t\t        var col = columns[pd.name] || {};\r\n\t\t        var colD = { field: pd.name };\r\n\t\t        $.extend(colD, col)\r\n\t\t        result.push(colD);\r\n\t\t    }\r\n\t\t    //}\r\n\t\t});\r\n\r\n        function append(field) {\r\n            field = Array.isArray(field) ? field : [field];\r\n            var result = this.concat(field);\r\n            return prepareResult(result);\r\n        }\r\n\r\n        function prepend(field) {\r\n            field = Array.isArray(field) ? field : [field];\r\n            var result = field.concat(this);\r\n            return prepareResult(result);\r\n        }\r\n\r\n        function setColumn(colName, def) {\r\n            var it = this.filter(function (item) {\r\n                return item.field == colName\r\n            })[0];\r\n            $.extend(it, def);\r\n            return this;\r\n        }\r\n\r\n        function prepareResult(r) {\r\n            r.prepend = prepend;\r\n            r.append = append;\r\n            r.setColumn = setColumn;\r\n            return r;\r\n        }\r\n        return prepareResult(result);\r\n        //return ['id', 'Year', 'Manufacturer', { command: [\"edit\", \"create\", \"destroy\", \"update\"] }];\r\n    }),\r\n\r\n    //, { command: [\"edit\", \"create\", \"destroy\", \"update\"]}\r\n\t$data.EntityContext.addProperty(\"EntitySetNames\", function () {\r\n\t    var self = this;\r\n\t    //var sets = Object.keys(self._entitySetReferences);\r\n\t    //return sets;\r\n\t    return Object.keys(self._entitySetReferences).map(function (set) {\r\n\t        return self._entitySetReferences[set].tableName;\r\n\t    });\r\n\t});\r\n\r\n    $data.Queryable.addMember(\"asKendoModel\", function (options) {\r\n        options.owningContextType = options.owningContextType || this.entityContext.getType();\r\n        return this.defaultType.asKendoModel(options);\r\n    });\r\n\r\n    $data.Queryable.addMember(\"asKendoRemoteTransportClass\", function (modelItemClass) {\r\n        var self = this;\r\n        var ctx = self.entityContext;\r\n        function reset() {\r\n            ctx.stateManager.reset();\r\n        };\r\n        var TransportClass = kendo.data.RemoteTransport.extend({\r\n            init: function () {\r\n                this.items = [];\r\n            },\r\n            read: function (options) {\r\n                var query = self;\r\n\r\n                query.entityContext.onReady().then(function () {\r\n                    var _this = this;\r\n                    var q = query;\r\n                    var sp = query.entityContext.storageProvider;\r\n                    var withInlineCount = query.entityContext.storageProvider.supportedSetOperations.withInlineCount;\r\n                    var withLength = (!withInlineCount) && query.entityContext.storageProvider.supportedSetOperations.length;\r\n\r\n                    if (withInlineCount) {\r\n                        q = q.withInlineCount();\r\n                    }\r\n\r\n                    if (options.data.filter) {\r\n                        var filter = \"\";\r\n                        var thisArg = {};\r\n                        options.data.filter.filters.forEach(function (f, index) {\r\n                            if (index > 0) {\r\n                                filter += options.data.filter.logic == \"or\" ? \" || \" : \" && \";\r\n                            }\r\n\r\n                            switch (f.operator) {\r\n                                case 'eq':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" == this.\" + f.field;\r\n                                    break;\r\n                                case 'neq':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" != this.\" + f.field;\r\n                                    break;\r\n                                case 'startswith':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \".startsWith(this.\" + f.field + \")\";\r\n                                    break;\r\n                                case 'contains':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \".contains(this.\" + f.field + \")\";\r\n                                    break;\r\n                                case 'doesnotcontain':\r\n                                    filter += \"!\";\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \".contains(this.\" + f.field + \")\";\r\n                                    break;\r\n                                case 'endswith':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \".endsWith(this.\" + f.field + \")\";\r\n                                    break;\r\n                                case 'gte':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" >= this.\" + f.field;\r\n                                    break;\r\n                                case 'gt':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" > this.\" + f.field;\r\n                                    break;\r\n                                case 'lte':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" <= this.\" + f.field;\r\n                                    break;\r\n                                case 'lt':\r\n                                    filter += \"it.\" + f.field;\r\n                                    filter += \" < this.\" + f.field;\r\n                                    break;\r\n                                default:\r\n                                    $data.Trace.log('unknown operator', f.operator);\r\n                                    break;\r\n                            }\r\n                            thisArg[f.field] = f.value;\r\n                        })\r\n                        q = q.filter(filter, thisArg);\r\n                    }\r\n                    var allItemsQ = q;\r\n\r\n                    if (options.data.sort) {\r\n                        options.data.sort.forEach(function (s) {\r\n                            q = q.order((s.dir == 'desc' ? \"-\" : \"\") + s.field);\r\n                        })\r\n                    }\r\n\r\n                    if (options.data.skip) {\r\n                        q = q.skip(options.data.skip);\r\n                    }\r\n                    if (options.data.take) {\r\n                        q = q.take(options.data.take);\r\n                    }\r\n\r\n                    //Data.defaultHttpClient.enableJsonpCallback = true;\r\n                    var promises = [];\r\n\r\n                    promises.push(q.toArray());\r\n                    //var ta = q.toArray();\r\n                    if (withLength) {\r\n                        promises.push(allItemsQ.length());\r\n                    }\r\n                    else if (!withInlineCount) {\r\n                        promises.push(allItemsQ.toArray());\r\n                    }\r\n\r\n                    $data.Trace.log(promises);\r\n                    jQuery.when.apply(this, promises).then(function (items, total) {\r\n                        //var result = items.map(function (item) { return item instanceof $data.Entity ? new model(item.initData) : item; });\r\n                        var result = items.map(function (item) {\r\n                            var d = (item instanceof $data.Entity) ? item.initData : item;\r\n                            var kendoItem = item.asKendoObservable();\r\n                            return kendoItem;\r\n                        });\r\n                        var r = {\r\n                            data: result,\r\n                            total: withInlineCount ? items.totalCount : (withLength ? total : total.length)\r\n                        }\r\n                        $data.Trace.log(r);\r\n                        options.success(r);\r\n                    }).fail(function () {\r\n                        console.log(\"error in create\");\r\n                        options.error({}, arguments);\r\n                    });\r\n                });\r\n            },\r\n            create: function (options, model) {\r\n                var query = self;\r\n                query.entityContext.onReady().then(function () {\r\n                    if (model.length > 1) {\r\n                        var modelItems = [];\r\n                        model.forEach(function (modelItem) {\r\n                            modelItems.push(modelItem.innerInstance());\r\n                        });\r\n                        ctx.addMany(modelItems);\r\n                        ctx.saveChanges().then(function () {\r\n                            var data = [];\r\n                            modelItems.forEach(function (modelItem) {\r\n                                data.push(modelItem.initData);\r\n                            });\r\n                            options.success(/*{ data: data }*/);\r\n                        }).fail(function () {\r\n                            console.log(\"error in create\");\r\n                            options.error({}, arguments);\r\n                            ctx.stateManager.reset();\r\n                        });\r\n                    }\r\n                    else {\r\n                        model[0]\r\n\t\t\t\t\t\t.innerInstance()\r\n\t\t\t\t\t\t.save(ctx.storeToken)\r\n\t\t\t\t\t\t.then(function () {\r\n\t\t\t\t\t\t    options.success(/*{ data: model[0].innerInstance().initData }*/);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.fail(function () {\r\n\t\t\t\t\t\t    console.log(\"error in create\");\r\n\t\t\t\t\t\t    options.error({}, arguments);\r\n\t\t\t\t\t\t});\r\n                    }\r\n                });\r\n            },\r\n            update: function (options, model) {\r\n                var query = self;\r\n                query.entityContext.onReady().then(function () {\r\n                    if (model.length > 1) {\r\n                        var items = model.map(function (item) {\r\n                            return item.innerInstance()\r\n                        });\r\n                        items.forEach(function (item) {\r\n                            ctx.attach(item, $data.kendo.attachMode);\r\n                        });\r\n                        ctx.saveChanges().then(function () {\r\n                            options.success();\r\n                        }).fail(function () {\r\n                            ctx.stateManager.reset();\r\n                            //alert(\"error in batch update\");\r\n                            options.error({}, arguments);\r\n                        });\r\n                    }\r\n                    else {\r\n                        model[0].innerInstance().save(undefined, undefined, $data.kendo.attachMode).then(function (item) {\r\n                            options.success();\r\n                        }).fail(function () {\r\n                            //alert(\"error in update\")\r\n                            options.error({}, arguments);\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n\r\n            destroy: function (options, model) {\r\n                var query = self;\r\n                query.entityContext.onReady().then(function () {\r\n                    if (model.length > 1) {\r\n                        model.forEach(function (item) {\r\n                            ctx.remove(item.innerInstance());\r\n                        });\r\n                        ctx.saveChanges().then(function () {\r\n                            options.success({ data: options.data });\r\n                        }).fail(function () {\r\n                            ctx.stateManager.reset();\r\n                            //alert(\"error in save:\" + arguments[0]);\r\n                            options.error({}, \"error\", options.data);\r\n                        });\r\n                    }\r\n                    else {\r\n                        model[0].innerInstance().remove().then(function () {\r\n                            options.success({ data: options.data });\r\n                        }).fail(function () {\r\n                            ctx.stateManager.reset();\r\n                            //alert(\"error in save:\" + arguments[0]);\r\n                            options.error({}, \"error\", options.data);\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            setup: function () {\r\n                $data.Trace.log(\"setup\");\r\n                $data.Trace.log(arguments);\r\n            }\r\n        });\r\n        return TransportClass;\r\n    });\r\n\r\n    var jayDataSource = kendo.data.DataSource.extend({\r\n        init: function () {\r\n            kendo.data.DataSource.fn.init.apply(this, arguments);\r\n        },\r\n        createItem: function (initData) {\r\n            var type = this.options.schema.model;\r\n            return new type(initData);\r\n        },\r\n        _promise: function (data, models, type) {\r\n            var that = this,\r\n\t\t\textend = $.extend,\r\n\t\t\ttransport = that.transport;\r\n\r\n            return $.Deferred(function (deferred) {\r\n                transport[type].call(transport, extend({\r\n                    success: function (response) {\r\n                        deferred.resolve({\r\n                            response: response,\r\n                            models: models,\r\n                            type: type\r\n                        });\r\n                    },\r\n                    error: function (response, status, error) {\r\n                        deferred.reject(response);\r\n                        that.error(response, status, error);\r\n                    }\r\n                }, data), models\r\n\t\t\t\t);\r\n            }).promise();\r\n        }\r\n    });\r\n\r\n    $data.kendo = $data.kendo || {};\r\n\r\n    $data.kendo.defaultPageSize = 25;\r\n\r\n    $data.Queryable.addMember(\"asKendoDataSource\", function (ds, modelOptions) {\r\n        var self = this;\r\n\r\n        modelOptions = modelOptions || {};\r\n        var model = self.asKendoModel(modelOptions);\r\n\r\n        ds = ds || {};\r\n        //unless user explicitly opts out server side logic\r\n        //we just force it.\r\n        ds.serverPaging = ds.serverPaging === undefined ? true : ds.serverPaging;\r\n        ds.serverFiltering = ds.serverFiltering === undefined ? true : ds.serverFiltering;\r\n        ds.serverSorting = ds.serverSorting === undefined ? true : ds.serverSorting;\r\n        ds.pageSize = ds.pageSize === undefined ? $data.kendo.defaultPageSize : ds.pageSize;\r\n\r\n        var TransportClass = self.asKendoRemoteTransportClass(model);\r\n        ds.transport = new TransportClass();\r\n\r\n        ds.schema = {\r\n            model: model,\r\n            data: \"data\",\r\n            total: \"total\"\r\n        };\r\n        return new jayDataSource(ds);\r\n    });\r\n\r\n    kendo.data.binders.submit = kendo.data.Binder.extend({\r\n        init: function (element, bindings, options) {\r\n            kendo.data.Binder.fn.init.call(this, element, bindings, options);\r\n            $(element).bind(\"submit\", function () {\r\n                var obj = bindings.submit.source;\r\n                var fn = obj[bindings.submit.path];\r\n                if (typeof fn === 'function') {\r\n                    fn.apply(obj, arguments);\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        refresh: function () {\r\n        }\r\n    });\r\n})($data, jQuery);\r\n\r\nexport default $data\r\n"],"sourceRoot":"/source/"}