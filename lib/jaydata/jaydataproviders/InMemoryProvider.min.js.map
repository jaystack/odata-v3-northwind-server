{"version":3,"sources":["node_modules/browser-pack/_prelude.js","InMemoryProvider.js","src/Types/StorageProviders/InMemory/InMemoryCompiler.js","src/Types/StorageProviders/InMemory/InMemoryConverter.js","src/Types/StorageProviders/InMemory/InMemoryFunctionCompiler.js","src/Types/StorageProviders/InMemory/InMemoryProvider.js","src/Types/StorageProviders/InMemory/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","_core","_core2","$C","Expressions","EntityExpressionVisitor","constructor","provider","compile","query","queryFragments","urlText","Visit","expression","compiled","name","indexOf","VisitOrderExpression","context","source","data","lambda","funcCompiler","Container","createInMemoryFunctionCompiler","selector","sort","Function","ASC","nodeType","push","VisitIncludeExpression","$include","value","VisitPagingExpression","toLowerCase","amount","VisitProjectionExpression","defaultFunctionCompiler","VisitFilterExpression","VisitSomeExpression","VisitEveryExpression","VisitCountExpression","VisitServiceOperationExpression","$serviceOperation","cfg","serviceName","params","type","jaydata/core","2","InMemoryConverter","fromDb","$data.Byte","proxyConverter","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.Integer","$data.Int32","$data.Number","$data.Date","$data.DateTimeOffset","$data.Time","$data.String","$data.Boolean","$data.Blob","$data.Object","undefined","Object","$data.Array","Array","$data.Guid","guid","parseGuid","toString","$data.GeographyPoint","GeographyPoint","$data.GeographyLineString","GeographyLineString","$data.GeographyPolygon","GeographyPolygon","$data.GeographyMultiPoint","GeographyMultiPoint","$data.GeographyMultiLineString","GeographyMultiLineString","$data.GeographyMultiPolygon","GeographyMultiPolygon","$data.GeographyCollection","GeographyCollection","$data.GeometryPoint","GeometryPoint","$data.GeometryLineString","GeometryLineString","$data.GeometryPolygon","GeometryPolygon","$data.GeometryMultiPoint","GeometryMultiPoint","$data.GeometryMultiLineString","GeometryMultiLineString","$data.GeometryMultiPolygon","GeometryMultiPolygon","$data.GeometryCollection","GeometryCollection","toDb","escape","date","toISOString","text","replace","bool","blob","Blob","JSON","stringify","3","VisitParametricQueryExpression","VisitUnaryExpression","resolution","mapTo","operand","VisitSimpleBinaryExpression","reverse","isArray","right","forEach","item","left","rightValue","VisitConstantExpression","resolveType","typeName","resolveName","converter","fieldConverter","VisitMemberInfoExpression","memberName","VisitComplexTypeExpression","VisitEntityExpression","VisitEntitySetExpression","VisitObjectLiteralExpression","members","member","VisitObjectFieldExpression","fieldName","VisitEntityFieldOperationExpression","Guard","requireType","operation","MemberInfoExpression","opDef","memberDefinition","propertyFunction","opName","paramCounter","parameters","args","map","index","arg","4","StorageProviderBase","ctx","providerConfiguration","typeSystem","extend","persistentData","localStoreName","databaseName","__instaceId","createGuid","dataSource","initializeStore","callBack","PromiseHandlerBase","createCallbackSettings","setKeys","_entitySetReferences","collectionName","localStorageData","__global","localStorage","dbCreation","storageProviders","DbCreationType","DropAllExistingTables","that","storeData","getItem","isNullOrUndefined","parse","key","createNew","tempSource","inmemory_sequence","_storageModel","storageModel","TableName","keys","LogicalType","memberDefinitions","getKeyProperties","computedKeys","filter","computed","raise","Exception","isIntegerPk","resolvedType","supportedAutoincrementKeys","console","log","entity","keyValue","success","executeQuery","sql","_compile","error","sourceName","getEntitySetFromElementType","defaultType","tableName","result","concat","$filter","$every","$map","modelBinderConfig","$order","b","aVal","bVal","$take","$skip","slice","$some","$length","rawDataList","compiler","InMemory","InMemoryCompiler","saveChanges","changedItems","entityState","EntityState","Added","_save_add_processPk","entitySet","Deleted","collection","_save_getEntity","idx","splice","Modified","changedProperties","j","field","elementType","getPublicMappedPropertyNames","setItem","dataItem","getPublicMappedProperties","memDef","inverseProperty","keyResolveType","sequenceValue","entities","isEqual","getTraceString","queryable","supportedDataTypes","Integer","String","Number","Boolean","Date","Guid","Byte","SByte","Decimal","Float","Int16","Int32","Int64","Time","DateTimeOffset","writable","supportedBinaryOperators","equal","dataType","allowedIn","FilterExpression","OrderExpression","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","in","supportedUnaryOperators","not","supportedFieldOperations","contains","startsWith","endsWith","substr","toUpperCase","trim","ltrim","rtrim","enumerable","supportedSetOperations","toArray","single","some","take","skip","orderBy","orderByDescending","first","InMemoryProvider","registerProvider","LocalStorageProvider","5","defineProperty","_InMemoryConverter","_InMemoryProvider","_InMemoryCompiler","_InMemoryFunctionCompiler","./InMemoryCompiler.js","./InMemoryConverter.js","./InMemoryFunctionCompiler.js","./InMemoryProvider.js"],"mappings":"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","file":"InMemoryProvider.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿// JayData 1.5.5 RC\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/inmemory\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.InMemory.InMemoryCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(query) {\n\n        var queryFragments = { urlText: \"\" };\n\n        this.Visit(query.expression, queryFragments);\n\n        var compiled = {};\n        for (var name in queryFragments) {\n            if (name.indexOf('$') == 0) {\n                compiled[name] = queryFragments[name];\n            }\n        }\n\n        return compiled;\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.data = \"\";\n        context.lambda = \"\";\n        var funcCompiler = _core.Container.createInMemoryFunctionCompiler(this.provider);\n        funcCompiler.compile(expression.selector, context);\n        context['$order'] = context['$order'] || [];\n        var sort = new Function(context.lambda, 'return ' + context.data + ';');\n        sort.ASC = expression.nodeType == 'OrderBy';\n        context['$order'].push(sort);\n        context.data = \"\";\n        context.lambda = \"\";\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.$include = context.$include || [];\n        if (context.$include.indexOf(expression.selector.value) < 0) context.$include.push(expression.selector.value);\n        /*if (!context['$select']) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += expression.selector.value.replace('.', '/');\r\n              this.includes = this.includes || [];\r\n            var includeFragment = expression.selector.value.split('.');\r\n            var tempData = null;\r\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\r\n            for (var i = 0; i < includeFragment.length; i++) {\r\n                if (tempData) { tempData += '.' + includeFragment[i]; } else { tempData = includeFragment[i]; }\r\n                var association = storageModel.Associations[includeFragment[i]];\r\n                if (association) {\r\n                    if (!this.includes.some(function (include) { return include.name == tempData }, this)) {\r\n                        this.includes.push({ name: tempData, type: association.ToType });\r\n                    }\r\n                }\r\n                else {\r\n                    Guard.raise(new Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\r\n                }\r\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\r\n            }\r\n        }*/\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context['$' + expression.nodeType.toLowerCase()] = expression.amount.value;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.defaultFunctionCompiler(expression, context, '$map');\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        this.defaultFunctionCompiler(expression, context, '$filter');\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression, context) {\n        this.defaultFunctionCompiler(expression, context, '$some');\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression, context) {\n        this.defaultFunctionCompiler(expression, context, '$every');\n    },\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context['$length'] = true;\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        context.$serviceOperation = { name: expression.cfg.serviceName, params: expression.params };\n    },\n    defaultFunctionCompiler: function defaultFunctionCompiler(expression, context, type) {\n        this.Visit(expression.source, context);\n        context.data = \"\";\n        context.lambda = \"\";\n        var funcCompiler = _core.Container.createInMemoryFunctionCompiler(this.provider);\n        funcCompiler.compile(expression.selector, context);\n        context[type] = new Function(context.lambda, 'return ' + context.data + ';');\n        context.data = \"\";\n        context.lambda = \"\";\n    }\n\n}, {});\n\n},{\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.InMemoryConverter = {\n    fromDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': _core2.default.Container.proxyConverter,\n        '$data.DateTimeOffset': _core2.default.Container.proxyConverter,\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': _core2.default.Container.proxyConverter,\n        '$data.Object': function $dataObject(o) {\n            if (o === undefined) {\n                return new _core2.default.Object();\n            }return o;\n        },\n        '$data.Array': function $dataArray(o) {\n            if (o === undefined) {\n                return new _core2.default.Array();\n            }return o;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? _core2.default.parseGuid(guid).toString() : guid;\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyPoint(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyLineString(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyPolygon(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPoint(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiLineString(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return new _core2.default.GeographyCollection(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryPoint(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryLineString(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryPolygon(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPoint(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiLineString(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return new _core2.default.GeometryCollection(g);\n            }return g;\n        }\n    },\n    toDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': _core2.default.Container.proxyConverter,\n        '$data.DateTimeOffset': _core2.default.Container.proxyConverter,\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': _core2.default.Container.proxyConverter,\n        '$data.Object': _core2.default.Container.proxyConverter,\n        '$data.Array': _core2.default.Container.proxyConverter,\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? guid.toString() : guid;\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return g;\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return g;\n            }return g;\n        }\n    },\n    escape: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(date) {\n            return date ? \"new Date(Date.parse('\" + date.toISOString() + \"'))\" : date;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(date) {\n            return date ? \"new Date(Date.parse('\" + date.toISOString() + \"'))\" : date;\n        },\n        '$data.Time': function $dataTime(date) {\n            return date ? \"'\" + date + \"'\" : date;\n        },\n        '$data.String': function $dataString(text) {\n            return \"'\" + text.replace(/'/g, \"''\") + \"'\";\n        },\n        '$data.Boolean': function $dataBoolean(bool) {\n            return bool ? 'true' : 'false';\n        },\n        '$data.Blob': function $dataBlob(blob) {\n            return \"'\" + _core2.default.Blob.toString(blob) + \"'\";\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? \"'\" + guid.toString() + \"'\" : guid;\n        }\n    }\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.InMemory.InMemoryFunctionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n        context.data += expression.resolution.mapTo;\n        context.data += \"(\";\n        this.Visit(expression.operand, context);\n        context.data += \")\";\n    },\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        var self = this;\n        if (expression.resolution.reverse) {\n            context.data += \"(\";\n\n            if (expression.resolution.name === 'in' && Array.isArray(expression.right.value)) {\n                context.data += \"[\";\n                expression.right.value.forEach(function (item, i) {\n                    if (i > 0) context.data += \",\";\n                    self.Visit(item, context);\n                });\n                context.data += \"]\";\n            } else {\n                var right = this.Visit(expression.right, context);\n            }\n            context.data += expression.resolution.mapTo;\n            var left = this.Visit(expression.left, context);\n            if (expression.resolution.rightValue) context.data += expression.resolution.rightValue;\n            context.data += \")\";\n        } else {\n            context.data += \"(\";\n            var left = this.Visit(expression.left, context);\n            context.data += expression.resolution.mapTo;\n            var right = this.Visit(expression.right, context);\n            context.data += \")\";\n        }\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var type = _core.Container.resolveType(expression.type);\n        var typeName = _core.Container.resolveName(type);\n        var converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(expression.value) : expression.value;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += \".\";\n        context.data += expression.memberName;\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        context.data += expression.selector.lambda;\n        context.lambda = expression.selector.lambda;\n        this.Visit(expression.source, context);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression() {},\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        context.data += '{ ';\n\n        for (var i = 0; i < expression.members.length; i++) {\n            var member = expression.members[i];\n\n            if (i > 0) context.data += ', ';\n\n            this.Visit(member, context);\n        }\n\n        context.data += ' }';\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        context.data += expression.fieldName + ': ';\n        this.Visit(expression.expression, context);\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        if (opDef.propertyFunction) {\n            this.Visit(expression.source, context);\n            context.data += '.';\n        }\n\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        var paramCounter = 0;\n        var params = opDef.parameters || [];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (arg) {\n                if (index > 0) {\n                    context.data += \",\";\n                };\n                this.Visit(arg, context);\n            }\n        }, this);\n        context.data += opDef.rightValue || \"\";\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.InMemory.InMemoryProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, ctx) {\n        this.context = ctx;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            source: null,\n            persistentData: false,\n            //obsolate\n            localStoreName: 'JayData_InMemory_Provider',\n            databaseName: 'JayData_InMemory_Provider',\n            __instaceId: _core2.default.createGuid().toString()\n        }, cfg);\n\n        this.dataSource = this.providerConfiguration.source;\n        delete this.providerConfiguration.source;\n\n        if (this.providerConfiguration.databaseName === 'JayData_InMemory_Provider') this.providerConfiguration.databaseName = this.providerConfiguration.localStoreName;\n    },\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n\n        var setKeys = [];\n        for (var i in this.context._entitySetReferences) {\n            setKeys.push(this.context._entitySetReferences[i].collectionName);\n        }\n        var localStorageData = null;\n        if (this.providerConfiguration.persistentData && _core2.default.__global.localStorage && this.providerConfiguration.dbCreation !== _core2.default.storageProviders.DbCreationType.DropAllExistingTables) {\n            var localStoreName = this.providerConfiguration.databaseName || \"JayData_InMemory_Provider\";\n            var that = this;\n            var storeData = _core2.default.__global.localStorage.getItem(localStoreName);\n\n            if (!_core.Guard.isNullOrUndefined(storeData)) {\n                localStorageData = JSON.parse(storeData, function (key, value) {\n                    if (setKeys.indexOf(key) > -1 && value.map) {\n                        return value.map(function (item) {\n                            return new that.context[key].createNew(item);\n                        });\n                    }\n                    return value;\n                });\n            }\n        }\n\n        var tempSource = localStorageData || this.dataSource || {};\n\n        //check data and crate sequence table if needed\n        this.dataSource = { 'inmemory_sequence': {} };\n        for (var index = 0; index < this.context._storageModel.length; index++) {\n            var storageModel = this.context._storageModel[index];\n            //Create store for EntitySet\n            this.dataSource[storageModel.TableName] = [];\n            //Check primary key\n            var keys = storageModel.LogicalType.memberDefinitions.getKeyProperties();\n            var computedKeys = keys.filter(function (key) {\n                return key.computed;\n            });\n            if (computedKeys.length > 1) {\n                _core.Guard.raise(new _core.Exception('More than one computed field not supported in ' + storageModel.TableName + ' entity set.'));\n            }\n            var isIntegerPk = false;\n            if (computedKeys.length === 1) {\n                var resolvedType = _core.Container.resolveName(computedKeys[0].type);\n                if (this.supportedAutoincrementKeys[resolvedType] === true) {\n                    //if(resolvedType === $data.Integer){\n                    this.dataSource['inmemory_sequence'][storageModel.TableName] = 0;\n                    isIntegerPk = true;\n                } else if (typeof this.supportedAutoincrementKeys[resolvedType] === 'function') {\n                    //}else if (resolvedType === $data.Guid){\n\n                } else {\n                        console.log(\"WARRNING! '\" + resolvedType + \"' not supported as computed Key!\");\n                        //Guard.raise(new Exception('Not supported key field type. Computed pk field type are $data.Integer or $data.Guid!', 'ComputedKeyFieldError'));\n                    }\n            }\n            //validate init data\n            if (tempSource[storageModel.TableName]) {\n                for (var i = 0; i < tempSource[storageModel.TableName].length; i++) {\n                    var entity = tempSource[storageModel.TableName][i];\n                    if (!(entity instanceof storageModel.LogicalType)) {\n                        if (localStorageData) {\n                            entity = new storageModel.LogicalType(entity);\n                        } else {\n                            _core.Guard.raise(new _core.Exception('Invalid element in source: ' + storageModel.TableName));\n                        }\n                    }\n\n                    if (isIntegerPk) {\n                        var keyValue = entity[computedKeys[0].name];\n                        if (keyValue > this.dataSource['inmemory_sequence'][storageModel.TableName]) {\n                            this.dataSource['inmemory_sequence'][storageModel.TableName] = keyValue;\n                        }\n                    }\n                    this.dataSource[storageModel.TableName].push(entity);\n                }\n            }\n        }\n        callBack.success(this.context);\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n\n        var sql;\n        try {\n            sql = this._compile(query);\n        } catch (e) {\n            callBack.error(e);\n            return;\n        }\n        var sourceName = query.context.getEntitySetFromElementType(query.defaultType).tableName;\n        var result = [].concat(this.dataSource[sourceName] || []);\n        if (sql.$filter && !sql.$every) result = result.filter(sql.$filter);\n\n        if (sql.$map && Object.keys(query.modelBinderConfig).length === 0) result = result.map(sql.$map);\n\n        if (sql.$order && sql.$order.length > 0) {\n            result.sort(function (a, b) {\n                var result;\n                for (var i = 0, l = sql.$order.length; i < l; i++) {\n                    result = 0;\n                    var aVal = sql.$order[i](a);\n                    var bVal = sql.$order[i](b);\n\n                    if (sql.$order[i].ASC) result = aVal === bVal ? 0 : aVal > bVal || bVal === null ? 1 : -1;else result = aVal === bVal ? 0 : aVal < bVal || aVal === null ? 1 : -1;\n\n                    if (result !== 0) break;\n                }\n                return result;\n            });\n        }\n\n        if (sql.$take !== undefined && sql.$skip !== undefined) {\n            result = result.slice(sql.$skip, sql.$skip + sql.$take);\n        } else if (sql.$take !== undefined && result.length > sql.$take) {\n            result = result.slice(0, sql.$take);\n        } else if (sql.$skip) {\n            result = result.slice(sql.$skip, result.length);\n        }\n\n        if (sql.$some) result = [result.length > 0];\n\n        //        if (sql.$every && sql.$filter)\n        //            result = [result.every(sql.$filter)];\n\n        if (sql.$length) result = [result.length];\n\n        query.rawDataList = result;\n        callBack.success(query);\n    },\n    _compile: function _compile(query, params) {\n        var compiler = new _core2.default.storageProviders.InMemory.InMemoryCompiler(this);\n        var compiled = compiler.compile(query);\n        return compiled;\n    },\n    saveChanges: function saveChanges(callBack, changedItems) {\n        for (var i = 0; i < changedItems.length; i++) {\n            var item = changedItems[i];\n            switch (item.data.entityState) {\n                case _core2.default.EntityState.Added:\n                    this._save_add_processPk(item);\n                    this.dataSource[item.entitySet.tableName].push(item.data);\n                    break;\n                case _core2.default.EntityState.Deleted:\n                    var collection = this.dataSource[item.entitySet.tableName];\n                    var entity = this._save_getEntity(item, collection);\n                    var idx = collection.indexOf(entity);\n                    collection.splice(idx, 1);\n                    break;\n                case _core2.default.EntityState.Modified:\n                    if (item.data.changedProperties && item.data.changedProperties.length > 0) {\n                        var collection = this.dataSource[item.entitySet.tableName];\n                        var entity = this._save_getEntity(item, collection);\n                        for (var j = 0; j < item.data.changedProperties.length; j++) {\n                            var field = item.data.changedProperties[j];\n                            if (!field.key && item.entitySet.elementType.memberDefinitions.getPublicMappedPropertyNames().indexOf(field.name) > -1) {\n                                entity[field.name] = item.data[field.name];\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (this.providerConfiguration.persistentData && _core2.default.__global.localStorage) {\n            var localStoreName = this.providerConfiguration.databaseName || \"JayData_InMemory_Provider\";\n\n            var that = this;\n            var setKeys = [];\n            for (var i in this.context._entitySetReferences) {\n                setKeys.push(this.context._entitySetReferences[i].collectionName);\n            }\n            var localStorageData = _core2.default.__global.localStorage.setItem(localStoreName, JSON.stringify(this.dataSource, function (key, value) {\n                if (setKeys.indexOf(key) > -1 && Array.isArray(value)) {\n                    var data = [];\n                    for (var i = 0; i < value.length; i++) {\n                        var dataItem = {};\n                        that.context[key].elementType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                            if (!memDef.inverseProperty) {\n                                var typeName = _core.Container.resolveName(memDef.type);\n                                var converter = that.fieldConverter.fromDb[typeName];\n                                dataItem[memDef.name] = converter ? converter(value[i][memDef.name]) : value[i][memDef.name];\n                            }\n                        });\n                        data.push(dataItem);\n                    }\n                    return data;\n                }\n                return value;\n            }));\n        }\n        callBack.success();\n    },\n    _save_add_processPk: function _save_add_processPk(item) {\n        var keys = item.entitySet.elementType.memberDefinitions.getKeyProperties();\n        if (keys.length === 1 && keys[0].computed) {\n            var key = keys[0];\n            var keyResolveType = _core.Container.resolveName(key.type);\n            //if(keyResolveType === $data.Guid){\n            if (typeof this.supportedAutoincrementKeys[keyResolveType] === 'function') {\n                item.data[key.name] = this.supportedAutoincrementKeys[keyResolveType]();\n            } else if (this.supportedAutoincrementKeys[keyResolveType] === true) {\n                var sequenceValue = this.dataSource['inmemory_sequence'][item.entitySet.tableName];\n                item.data[key.name] = sequenceValue + 1;\n                this.dataSource['inmemory_sequence'][item.entitySet.tableName] = sequenceValue + 1;\n                //}else{\n                //    Guard.raise(new Exception(\"Not supported data type!\"))\n            }\n        } else {\n                for (var j = 0; j < keys.length; j++) {\n                    if (item.data[keys[j].name] === null || item.data[keys[j].name] === undefined) {\n                        _core.Guard.raise(new _core.Exception('Key field must set value! Key field name without value: ' + keys[j].name));\n                    }\n                }\n            }\n    },\n    _save_getEntity: function _save_getEntity(item, collection) {\n        var keys = item.entitySet.elementType.memberDefinitions.getKeyProperties();\n        var entities = collection.filter(function (entity) {\n            var isEqual = true;\n            for (var i = 0; i < keys.length; i++) {\n                isEqual = isEqual && entity[keys[i].name] === item.data[keys[i].name];\n            }\n            return isEqual;\n        });\n        if (entities > 1) {\n            _core.Guard.raise(new _core.Exception(\"Inconsistent storage!\"));\n        }\n        return entities[0];\n    },\n    getTraceString: function getTraceString(queryable) {\n        var compiled = this._compile(queryable);\n        return compiled;\n    },\n    supportedDataTypes: {\n        value: [_core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Boolean, _core2.default.Date, _core2.default.Object, _core2.default.Guid, _core2.default.GeographyPoint, _core2.default.GeographyLineString, _core2.default.GeographyPolygon, _core2.default.GeographyMultiPoint, _core2.default.GeographyMultiLineString, _core2.default.GeographyMultiPolygon, _core2.default.GeographyCollection, _core2.default.GeometryPoint, _core2.default.GeometryLineString, _core2.default.GeometryPolygon, _core2.default.GeometryMultiPoint, _core2.default.GeometryMultiLineString, _core2.default.GeometryMultiPolygon, _core2.default.GeometryCollection, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.DateTimeOffset],\n        writable: false\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: ' == ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqual: { mapTo: ' != ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            equalTyped: { mapTo: ' === ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqualTyped: { mapTo: ' !== ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThan: { mapTo: ' > ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThanOrEqual: { mapTo: ' >= ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            lessThan: { mapTo: ' < ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            lessThenOrEqual: { mapTo: ' <= ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            or: { mapTo: ' || ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            and: { mapTo: ' && ', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            \"in\": { mapTo: \".indexOf(\", allowedIn: [_core2.default.Expressions.FilterExpression], rightValue: ') > -1', reverse: true }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: '!' }\n        }\n    },\n\n    supportedFieldOperations: {\n        value: {\n            contains: {\n                mapTo: \"$data.StringFunctions.contains(\",\n                rightValue: \")\",\n                dataType: \"boolean\",\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            startsWith: {\n                mapTo: \"$data.StringFunctions.startsWith(\",\n                rightValue: \")\",\n                dataType: \"boolean\",\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            endsWith: {\n                mapTo: \"$data.StringFunctions.endsWith(\",\n                rightValue: \")\",\n                dataType: \"boolean\",\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n            length: {\n                dataType: \"number\",\n                propertyFunction: true\n            },\n            substr: {\n                mapTo: \"substr(\",\n                rightValue: \")\",\n                dataType: \"string\",\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }],\n                propertyFunction: true\n            },\n            toLowerCase: {\n                dataType: \"string\", mapTo: \"toLowerCase()\",\n                propertyFunction: true\n            },\n            toUpperCase: {\n                dataType: \"string\", mapTo: \"toUpperCase()\",\n                propertyFunction: true\n            },\n            'trim': {\n                dataType: _core2.default.String,\n                mapTo: 'trim()',\n                propertyFunction: true\n            },\n            'ltrim': {\n                dataType: _core2.default.String,\n                mapTo: 'trimLeft()',\n                propertyFunction: true\n            },\n            'rtrim': {\n                dataType: _core2.default.String,\n                mapTo: 'trimRight()',\n                propertyFunction: true\n            }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            some: {},\n            //every: {},\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n    fieldConverter: { value: _core2.default.InMemoryConverter },\n    supportedAutoincrementKeys: {\n        value: {\n            '$data.Integer': true,\n            '$data.Int32': true,\n            '$data.Guid': function $dataGuid() {\n                return _core2.default.createGuid();\n            }\n        }\n    }\n}, null);\n(0, _core.$C)('$data.storageProviders.InMemory.LocalStorageProvider', _core2.default.storageProviders.InMemory.InMemoryProvider, null, {\n    constructor: function constructor(cfg, ctx) {\n        this.providerConfiguration.persistentData = true;\n    }\n}, null);\n_core2.default.StorageProviderBase.registerProvider(\"InMemory\", _core2.default.storageProviders.InMemory.InMemoryProvider);\n_core2.default.StorageProviderBase.registerProvider(\"LocalStore\", _core2.default.storageProviders.InMemory.LocalStorageProvider);\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _InMemoryConverter = _dereq_('./InMemoryConverter.js');\n\nvar _InMemoryConverter2 = _interopRequireDefault(_InMemoryConverter);\n\nvar _InMemoryProvider = _dereq_('./InMemoryProvider.js');\n\nvar _InMemoryProvider2 = _interopRequireDefault(_InMemoryProvider);\n\nvar _InMemoryCompiler = _dereq_('./InMemoryCompiler.js');\n\nvar _InMemoryCompiler2 = _interopRequireDefault(_InMemoryCompiler);\n\nvar _InMemoryFunctionCompiler = _dereq_('./InMemoryFunctionCompiler.js');\n\nvar _InMemoryFunctionCompiler2 = _interopRequireDefault(_InMemoryFunctionCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n},{\"./InMemoryCompiler.js\":1,\"./InMemoryConverter.js\":2,\"./InMemoryFunctionCompiler.js\":3,\"./InMemoryProvider.js\":4,\"jaydata/core\":\"jaydata/core\"}]},{},[5])(5)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.InMemory.InMemoryCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (query) {\r\n\r\n        var queryFragments = { urlText: \"\" };\r\n\r\n        this.Visit(query.expression, queryFragments);\r\n\r\n        var compiled = {};\r\n        for (var name in queryFragments) {\r\n            if (name.indexOf('$') == 0) {\r\n                compiled[name] = queryFragments[name];\r\n            }\r\n        }\r\n\r\n        return compiled;\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.data = \"\";\r\n        context.lambda = \"\";\r\n        var funcCompiler = Container.createInMemoryFunctionCompiler(this.provider);\r\n        funcCompiler.compile(expression.selector, context);\r\n        context['$order'] = context['$order'] || [];\r\n        var sort = new Function(context.lambda, 'return ' + context.data + ';');\r\n        sort.ASC = expression.nodeType == 'OrderBy';\r\n        context['$order'].push(sort);\r\n        context.data = \"\";\r\n        context.lambda = \"\";\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.$include = context.$include || [];\r\n        if (context.$include.indexOf(expression.selector.value) < 0) context.$include.push(expression.selector.value);\r\n        /*if (!context['$select']) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += expression.selector.value.replace('.', '/');\r\n\r\n            this.includes = this.includes || [];\r\n            var includeFragment = expression.selector.value.split('.');\r\n            var tempData = null;\r\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\r\n            for (var i = 0; i < includeFragment.length; i++) {\r\n                if (tempData) { tempData += '.' + includeFragment[i]; } else { tempData = includeFragment[i]; }\r\n                var association = storageModel.Associations[includeFragment[i]];\r\n                if (association) {\r\n                    if (!this.includes.some(function (include) { return include.name == tempData }, this)) {\r\n                        this.includes.push({ name: tempData, type: association.ToType });\r\n                    }\r\n                }\r\n                else {\r\n                    Guard.raise(new Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\r\n                }\r\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\r\n            }\r\n        }*/\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context['$' + expression.nodeType.toLowerCase()] = expression.amount.value;\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.defaultFunctionCompiler(expression, context, '$map');\r\n    },\r\n    VisitFilterExpression: function (expression, context) {\r\n        this.defaultFunctionCompiler(expression, context, '$filter');\r\n    },\r\n    VisitSomeExpression: function (expression, context) {\r\n        this.defaultFunctionCompiler(expression, context, '$some');\r\n    },\r\n    VisitEveryExpression: function (expression, context) {\r\n        this.defaultFunctionCompiler(expression, context, '$every');\r\n    },\r\n    VisitCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context['$length'] = true;\r\n    },\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        context.$serviceOperation = { name: expression.cfg.serviceName, params: expression.params };\r\n    },\r\n    defaultFunctionCompiler: function (expression, context, type) {\r\n        this.Visit(expression.source, context);\r\n        context.data = \"\";\r\n        context.lambda = \"\";\r\n        var funcCompiler = Container.createInMemoryFunctionCompiler(this.provider);\r\n        funcCompiler.compile(expression.selector, context);\r\n        context[type] = new Function(context.lambda, 'return ' + context.data + ';');\r\n        context.data = \"\";\r\n        context.lambda = \"\";\r\n    }\r\n\r\n}, {});\r\n\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.InMemoryConverter = {\r\n    fromDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': $data.Container.proxyConverter,\r\n        '$data.DateTimeOffset': $data.Container.proxyConverter,\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': $data.Container.proxyConverter,\r\n        '$data.Object': function (o) { if (o === undefined) { return new $data.Object(); } return o; },\r\n        '$data.Array': function (o) { if (o === undefined) { return new $data.Array(); } return o; },\r\n        '$data.Guid': function (guid) { return guid ? $data.parseGuid(guid).toString() : guid; },\r\n        '$data.GeographyPoint': function (g) { if (g) { return new $data.GeographyPoint(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return new $data.GeographyLineString(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return new $data.GeographyPolygon(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return new $data.GeographyMultiPoint(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return new $data.GeographyMultiLineString(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return new $data.GeographyMultiPolygon(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return new $data.GeographyCollection(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return new $data.GeometryPoint(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return new $data.GeometryLineString(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return new $data.GeometryPolygon(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return new $data.GeometryMultiPoint(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return new $data.GeometryMultiLineString(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return new $data.GeometryMultiPolygon(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return new $data.GeometryCollection(g); } return g; }\r\n    },\r\n    toDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': $data.Container.proxyConverter,\r\n        '$data.DateTimeOffset': $data.Container.proxyConverter,\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': $data.Container.proxyConverter,\r\n        '$data.Object': $data.Container.proxyConverter,\r\n        '$data.Array': $data.Container.proxyConverter,\r\n        '$data.Guid': function (guid) { return guid ? guid.toString() : guid; },\r\n        '$data.GeographyPoint': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return g; } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return g; } return g; }\r\n    },\r\n    escape: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (date) { return date ? \"new Date(Date.parse('\" + date.toISOString() + \"'))\" : date; },\r\n        '$data.DateTimeOffset': function (date) { return date ? \"new Date(Date.parse('\" + date.toISOString() + \"'))\" : date; },\r\n        '$data.Time': function (date) { return date ? \"'\" + date + \"'\" : date; },\r\n        '$data.String': function (text) { return \"'\" + text.replace(/'/g, \"''\") + \"'\"; },\r\n        '$data.Boolean': function (bool) { return bool ? 'true' : 'false'; },\r\n        '$data.Blob': function (blob) { return \"'\" + $data.Blob.toString(blob) + \"'\"; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.Guid': function (guid) { return guid ? \"'\" + guid.toString() + \"'\" : guid; }\r\n    }\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.InMemory.InMemoryFunctionCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n    VisitUnaryExpression: function (expression, context) {\r\n        context.data += expression.resolution.mapTo;\r\n        context.data += \"(\";\r\n        this.Visit(expression.operand, context);\r\n        context.data += \")\";\r\n    },\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        var self = this;\r\n        if (expression.resolution.reverse) {\r\n            context.data += \"(\";\r\n\r\n            if (expression.resolution.name === 'in' && Array.isArray(expression.right.value)) {\r\n                context.data += \"[\";\r\n                expression.right.value.forEach(function (item, i) {\r\n                    if (i > 0) context.data += \",\";\r\n                    self.Visit(item, context);\r\n                });\r\n                context.data += \"]\";\r\n            } else {\r\n                var right = this.Visit(expression.right, context);\r\n            }\r\n            context.data += expression.resolution.mapTo;\r\n            var left = this.Visit(expression.left, context);\r\n            if (expression.resolution.rightValue)\r\n                context.data += expression.resolution.rightValue;\r\n            context.data += \")\";\r\n        } else {\r\n            context.data += \"(\";\r\n            var left = this.Visit(expression.left, context);\r\n            context.data += expression.resolution.mapTo;\r\n            var right = this.Visit(expression.right, context);\r\n            context.data += \")\";\r\n        }\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        var type = Container.resolveType(expression.type);\r\n        var typeName = Container.resolveName(type);\r\n        var converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(expression.value) : expression.value;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += \".\";\r\n        context.data += expression.memberName;\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        context.data += expression.selector.lambda;\r\n        context.lambda = expression.selector.lambda;\r\n        this.Visit(expression.source, context);\r\n    },\r\n    VisitEntitySetExpression: function () { },\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        context.data += '{ ';\r\n\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            var member = expression.members[i];\r\n\r\n            if (i > 0)\r\n                context.data += ', ';\r\n\r\n            this.Visit(member, context);\r\n        }\r\n\r\n        context.data += ' }';\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        context.data += expression.fieldName + ': ';\r\n        this.Visit(expression.expression, context);\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        if (opDef.propertyFunction) {\r\n            this.Visit(expression.source, context);\r\n            context.data += '.';\r\n        }\r\n\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (arg) {\r\n                if (index > 0) {\r\n                    context.data += \",\";\r\n                };\r\n                this.Visit(arg, context);\r\n            }\r\n        }, this);\r\n        context.data += opDef.rightValue || \"\";\r\n    }\r\n});\r\n\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.InMemory.InMemoryProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, ctx) {\r\n        this.context = ctx;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            source: null,\r\n            persistentData: false,\r\n            //obsolate\r\n            localStoreName: 'JayData_InMemory_Provider',\r\n            databaseName: 'JayData_InMemory_Provider',\r\n            __instaceId: $data.createGuid().toString()\r\n        }, cfg);\r\n\r\n        this.dataSource = this.providerConfiguration.source;\r\n        delete this.providerConfiguration.source;\r\n\r\n        if (this.providerConfiguration.databaseName === 'JayData_InMemory_Provider')\r\n            this.providerConfiguration.databaseName = this.providerConfiguration.localStoreName;\r\n    },\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n\r\n        var setKeys = [];\r\n        for(var i in this.context._entitySetReferences){\r\n            setKeys.push(this.context._entitySetReferences[i].collectionName);\r\n        }\r\n        var localStorageData = null;\r\n        if (this.providerConfiguration.persistentData && $data.__global.localStorage && this.providerConfiguration.dbCreation !== $data.storageProviders.DbCreationType.DropAllExistingTables) {\r\n            var localStoreName = this.providerConfiguration.databaseName || \"JayData_InMemory_Provider\";\r\n            var that = this;\r\n            var storeData = $data.__global.localStorage.getItem(localStoreName);\r\n\r\n            if (!Guard.isNullOrUndefined(storeData)) {\r\n                localStorageData = JSON.parse(storeData,\r\n                    function (key, value) {\r\n                        if (setKeys.indexOf(key) > -1 && value.map) {\r\n                            return value.map(function (item) { return new that.context[key].createNew(item); });\r\n                        }\r\n                        return value;\r\n                    });\r\n            }\r\n        }\r\n\r\n        var tempSource = localStorageData || this.dataSource || {};\r\n\r\n        //check data and crate sequence table if needed\r\n        this.dataSource = { 'inmemory_sequence': {} };\r\n        for(var index = 0;index<this.context._storageModel.length;index++){\r\n            var storageModel = this.context._storageModel[index];\r\n            //Create store for EntitySet\r\n            this.dataSource[storageModel.TableName] = [];\r\n            //Check primary key\r\n            var keys = storageModel.LogicalType.memberDefinitions.getKeyProperties();\r\n            var computedKeys = keys.filter(function(key){return key.computed});\r\n            if(computedKeys.length>1){\r\n                Guard.raise(new Exception('More than one computed field not supported in ' + storageModel.TableName + ' entity set.'));\r\n            }\r\n            var isIntegerPk = false;\r\n            if(computedKeys.length === 1){\r\n                var resolvedType = Container.resolveName(computedKeys[0].type);\r\n                if (this.supportedAutoincrementKeys[resolvedType] === true){\r\n                    //if(resolvedType === $data.Integer){\r\n                    this.dataSource['inmemory_sequence'][storageModel.TableName] = 0;\r\n                    isIntegerPk = true;\r\n                }else if (typeof this.supportedAutoincrementKeys[resolvedType] === 'function'){\r\n                //}else if (resolvedType === $data.Guid){\r\n\r\n                } else {\r\n                    console.log(\"WARRNING! '\" + resolvedType + \"' not supported as computed Key!\");\r\n                    //Guard.raise(new Exception('Not supported key field type. Computed pk field type are $data.Integer or $data.Guid!', 'ComputedKeyFieldError'));\r\n                }\r\n            }\r\n            //validate init data\r\n            if (tempSource[storageModel.TableName]) {\r\n                for (var i = 0; i < tempSource[storageModel.TableName].length; i++) {\r\n                    var entity = tempSource[storageModel.TableName][i];\r\n                    if (!(entity instanceof storageModel.LogicalType)) {\r\n                        if (localStorageData) {\r\n                            entity = new storageModel.LogicalType(entity);\r\n                        } else {\r\n                            Guard.raise(new Exception('Invalid element in source: ' + storageModel.TableName));\r\n                        }\r\n                    }\r\n\r\n                    if(isIntegerPk){\r\n                        var keyValue = entity[computedKeys[0].name]\r\n                        if (keyValue > this.dataSource['inmemory_sequence'][storageModel.TableName]) {\r\n                            this.dataSource['inmemory_sequence'][storageModel.TableName] = keyValue;\r\n                        }\r\n                    }\r\n                    this.dataSource[storageModel.TableName].push(entity);\r\n                }\r\n            }\r\n        }\r\n        callBack.success(this.context);\r\n    },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n\r\n        var sql;\r\n        try {\r\n            sql = this._compile(query);\r\n        } catch (e) {\r\n            callBack.error(e);\r\n            return;\r\n        }\r\n        var sourceName = query.context.getEntitySetFromElementType(query.defaultType).tableName;\r\n        var result = [].concat(this.dataSource[sourceName] || []);\r\n        if (sql.$filter && !sql.$every)\r\n            result = result.filter(sql.$filter);\r\n\r\n        if (sql.$map && Object.keys(query.modelBinderConfig).length === 0)\r\n            result = result.map(sql.$map);\r\n        \r\n        if (sql.$order && sql.$order.length > 0) {\r\n            result.sort(function (a, b) {\r\n                var result;\r\n                for (var i = 0, l = sql.$order.length; i < l; i++) {\r\n                    result = 0;\r\n                    var aVal = sql.$order[i](a);\r\n                    var bVal = sql.$order[i](b);\r\n\r\n                    if(sql.$order[i].ASC)\r\n                        result = aVal === bVal ? 0 : (aVal > bVal || bVal === null ? 1 : -1);\r\n                    else\r\n                        result = aVal === bVal ? 0 : (aVal < bVal || aVal === null ? 1 : -1);\r\n\r\n                    if (result !== 0) break;\r\n\r\n                }\r\n                return result;\r\n            });\r\n        }\r\n\r\n        if (sql.$take !== undefined && sql.$skip !== undefined) {\r\n            result = result.slice(sql.$skip, sql.$skip + sql.$take);\r\n        } else if (sql.$take !== undefined && result.length > sql.$take) {\r\n            result = result.slice(0, sql.$take);\r\n        } else if (sql.$skip) {\r\n            result = result.slice(sql.$skip, result.length);\r\n        }\r\n\r\n        if (sql.$some)\r\n            result = [result.length > 0];\r\n\r\n        //        if (sql.$every && sql.$filter)\r\n        //            result = [result.every(sql.$filter)];\r\n\r\n        if (sql.$length)\r\n            result = [result.length];\r\n\r\n        query.rawDataList = result;\r\n        callBack.success(query);\r\n    },\r\n    _compile: function (query, params) {\r\n        var compiler = new $data.storageProviders.InMemory.InMemoryCompiler(this);\r\n        var compiled = compiler.compile(query);\r\n        return compiled;\r\n    },\r\n    saveChanges: function (callBack, changedItems) {\r\n        for (var i = 0; i < changedItems.length; i++) {\r\n            var item = changedItems[i];\r\n            switch (item.data.entityState) {\r\n                case $data.EntityState.Added:\r\n                    this._save_add_processPk(item);\r\n                    this.dataSource[item.entitySet.tableName].push(item.data);\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    var collection = this.dataSource[item.entitySet.tableName];\r\n                    var entity = this._save_getEntity(item, collection);\r\n                    var idx = collection.indexOf(entity);\r\n                    collection.splice(idx, 1);\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    if(item.data.changedProperties && item.data.changedProperties.length>0){\r\n                        var collection = this.dataSource[item.entitySet.tableName];\r\n                        var entity = this._save_getEntity(item, collection);\r\n                        for(var j=0;j<item.data.changedProperties.length;j++){\r\n                            var field = item.data.changedProperties[j];\r\n                            if(!field.key && item.entitySet.elementType.memberDefinitions.getPublicMappedPropertyNames().indexOf(field.name)>-1){\r\n                                entity[field.name] = item.data[field.name];\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        if(this.providerConfiguration.persistentData && $data.__global.localStorage){\r\n            var localStoreName = this.providerConfiguration.databaseName || \"JayData_InMemory_Provider\";\r\n\r\n            var that = this;\r\n            var setKeys = [];\r\n            for (var i in this.context._entitySetReferences) {\r\n                setKeys.push(this.context._entitySetReferences[i].collectionName);\r\n            }\r\n            var localStorageData = $data.__global.localStorage.setItem(localStoreName, JSON.stringify(this.dataSource, function (key, value) {\r\n                if (setKeys.indexOf(key) > -1 && Array.isArray(value)) {\r\n                    var data = [];\r\n                    for (var i = 0; i < value.length; i++) {\r\n                        var dataItem = {};\r\n                        that.context[key].elementType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                            if (!memDef.inverseProperty) {\r\n                                var typeName = Container.resolveName(memDef.type);\r\n                                var converter = that.fieldConverter.fromDb[typeName];\r\n                                dataItem[memDef.name] = converter ? converter(value[i][memDef.name]) : value[i][memDef.name];\r\n                            }\r\n                        });\r\n                        data.push(dataItem);\r\n                    }\r\n                    return data;\r\n                }\r\n                return value;\r\n            }));\r\n        }\r\n        callBack.success();\r\n    },\r\n    _save_add_processPk:function(item){\r\n        var keys = item.entitySet.elementType.memberDefinitions.getKeyProperties();\r\n        if(keys.length === 1 && keys[0].computed){\r\n            var key = keys[0];\r\n            var keyResolveType = Container.resolveName(key.type);\r\n            //if(keyResolveType === $data.Guid){\r\n            if (typeof this.supportedAutoincrementKeys[keyResolveType] === 'function') {\r\n                item.data[key.name] = this.supportedAutoincrementKeys[keyResolveType]();\r\n            } else if (this.supportedAutoincrementKeys[keyResolveType] === true) {\r\n                var sequenceValue = this.dataSource['inmemory_sequence'][item.entitySet.tableName];\r\n                item.data[key.name] = sequenceValue+1;\r\n                this.dataSource['inmemory_sequence'][item.entitySet.tableName] = sequenceValue + 1;\r\n            //}else{\r\n            //    Guard.raise(new Exception(\"Not supported data type!\"))\r\n            }\r\n        }\r\n        else{\r\n            for(var j=0;j<keys.length;j++){\r\n                if(item.data[keys[j].name] === null || item.data[keys[j].name] === undefined){\r\n                    Guard.raise(new Exception('Key field must set value! Key field name without value: '+keys[j].name));\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _save_getEntity:function(item, collection){\r\n        var keys = item.entitySet.elementType.memberDefinitions.getKeyProperties();\r\n        var entities = collection.filter(function(entity){\r\n            var isEqual = true;\r\n            for(var i = 0;i<keys.length;i++){\r\n                isEqual = isEqual && entity[keys[i].name] === item.data[keys[i].name];\r\n            }\r\n            return isEqual;\r\n        });\r\n        if(entities>1){\r\n            Guard.raise(new Exception(\"Inconsistent storage!\"));\r\n        }\r\n        return entities[0];\r\n    },\r\n    getTraceString: function (queryable) {\r\n        var compiled = this._compile(queryable);\r\n        return compiled;\r\n    },\r\n    supportedDataTypes: {\r\n        value: [$data.Integer, $data.String, $data.Number, $data.Blob, $data.Boolean, $data.Date, $data.Object, $data.Guid, $data.GeographyPoint,\r\n            $data.GeographyLineString, $data.GeographyPolygon, $data.GeographyMultiPoint, $data.GeographyMultiLineString, $data.GeographyMultiPolygon, $data.GeographyCollection,\r\n            $data.GeometryPoint, $data.GeometryLineString, $data.GeometryPolygon, $data.GeometryMultiPoint, $data.GeometryMultiLineString, $data.GeometryMultiPolygon, $data.GeometryCollection,\r\n            $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.DateTimeOffset],\r\n        writable: false\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: ' == ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqual: { mapTo: ' != ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            equalTyped: { mapTo: ' === ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqualTyped: { mapTo: ' !== ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThan: { mapTo: ' > ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThanOrEqual: { mapTo: ' >= ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            lessThan: { mapTo: ' < ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            lessThenOrEqual: { mapTo: ' <= ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            or: { mapTo: ' || ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            and: { mapTo: ' && ', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            \"in\": { mapTo: \".indexOf(\", allowedIn: [$data.Expressions.FilterExpression], rightValue: ') > -1', reverse: true }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: '!' }\r\n        }\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            contains: {\r\n                mapTo: \"$data.StringFunctions.contains(\",\r\n                rightValue: \")\",\r\n                dataType: \"boolean\",\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            startsWith: {\r\n                mapTo: \"$data.StringFunctions.startsWith(\",\r\n                rightValue: \")\",\r\n                dataType: \"boolean\",\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            endsWith: {\r\n                mapTo: \"$data.StringFunctions.endsWith(\",\r\n                rightValue: \")\",\r\n                dataType: \"boolean\",\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n            length: {\r\n                dataType: \"number\",\r\n                propertyFunction: true\r\n            },\r\n            substr: {\r\n                mapTo: \"substr(\",\r\n                rightValue: \")\",\r\n                dataType: \"string\",\r\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }],\r\n                propertyFunction: true\r\n            },\r\n            toLowerCase: {\r\n                dataType: \"string\", mapTo: \"toLowerCase()\",\r\n                propertyFunction: true\r\n            },\r\n            toUpperCase: {\r\n                dataType: \"string\", mapTo: \"toUpperCase()\",\r\n                propertyFunction: true\r\n            },\r\n            'trim': {\r\n                dataType: $data.String,\r\n                mapTo: 'trim()',\r\n                propertyFunction: true\r\n            },\r\n            'ltrim': {\r\n                dataType: $data.String,\r\n                mapTo: 'trimLeft()',\r\n                propertyFunction: true\r\n            },\r\n            'rtrim': {\r\n                dataType: $data.String,\r\n                mapTo: 'trimRight()',\r\n                propertyFunction: true\r\n            }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    \r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            some: {},\r\n            //every: {},\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    fieldConverter: { value: $data.InMemoryConverter },\r\n    supportedAutoincrementKeys: {\r\n        value: {\r\n            '$data.Integer': true,\r\n            '$data.Int32': true,\r\n            '$data.Guid': function () { return $data.createGuid(); }\r\n        }\r\n    }\r\n}, null);\r\n$C('$data.storageProviders.InMemory.LocalStorageProvider', $data.storageProviders.InMemory.InMemoryProvider, null,{\r\n    constructor:function(cfg, ctx){\r\n        this.providerConfiguration.persistentData = true;\r\n    }\r\n}, null);\r\n$data.StorageProviderBase.registerProvider(\"InMemory\", $data.storageProviders.InMemory.InMemoryProvider);\r\n$data.StorageProviderBase.registerProvider(\"LocalStore\", $data.storageProviders.InMemory.LocalStorageProvider);\r\n","import $data from 'jaydata/core';\r\n\r\nimport InMemoryConverter from './InMemoryConverter.js';\r\nimport InMemoryProvider from './InMemoryProvider.js';\r\nimport InMemoryCompiler from './InMemoryCompiler.js';\r\nimport InMemoryFunctionCompiler from './InMemoryFunctionCompiler.js';\r\n\r\nexport default $data;\r\n"],"sourceRoot":"/source/"}