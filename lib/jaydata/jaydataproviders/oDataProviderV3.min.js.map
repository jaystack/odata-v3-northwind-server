{"version":3,"sources":["oDataProviderV3.js","src/Types/StorageProviders/oData3/index.js","src/Types/StorageProviders/oData3/oDataCompiler.js","src/Types/StorageProviders/oData3/oDataConverter.js","src/Types/StorageProviders/oData3/oDataOrderCompiler.js","src/Types/StorageProviders/oData3/oDataPagingCompiler.js","src/Types/StorageProviders/oData3/oDataProjectionCompiler.js","src/Types/StorageProviders/oData3/oDataProvider.js","src/Types/StorageProviders/oData3/oDataWhereCompiler.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_core","_core2","_oDataConverter","_oDataProvider","_oDataCompiler","_oDataWhereCompiler","_oDataOrderCompiler","_oDataPagingCompiler","_oDataProjectionCompiler","./oDataCompiler.js","./oDataConverter.js","./oDataOrderCompiler.js","./oDataPagingCompiler.js","./oDataProjectionCompiler.js","./oDataProvider.js","./oDataWhereCompiler.js","jaydata/core","2","$C","Expressions","EntityExpressionVisitor","constructor","context","provider","includes","mainEntitySet","compile","query","storageProvider","defaultType","getEntitySetFromElementType","queryFragments","urlText","Visit","expression","modelBinderConfig","modelBinder","Container","createModelBinderConfigCompiler","queryText","addAmp","name","postData","result","withInlineCount","method","isBatchExecuteQuery","_isBatchExecuteQuery","subQueries","_subQueries","params","_getComplitedData","VisitOrderExpression","source","orderCompiler","createoDataOrderCompiler","VisitPagingExpression","pagingCompiler","createoDataPagingCompiler","VisitIncludeExpression","selector","replace","includeFragment","split","tempData","storageModel","entityContext","_storageModel","getStorageModel","createNew","association","Associations","some","include","push","type","ToType","Guard","raise","Exception","VisitFindExpression","param","typeName","resolveName","converter","fieldConverter","toDb","escape","VisitProjectionExpression","projectionCompiler","createoDataProjectionCompiler","VisitFilterExpression","filterCompiler","createoDataWhereCompiler","data","VisitInlineCountExpression","providerConfiguration","maxDataServiceVersion","VisitEntitySetExpression","instance","tableName","VisitServiceOperationExpression","boundItem","entitySet","Entity","getEntityKeysValue","cfg","serviceName","VisitBatchDeleteExpression","VisitConstantExpression","fullName","undefined","VisitCountExpression","VisitBatchExecuteQueryExpression","__batchRequests","members","queryable","compiler","storageProviders","oDataV3","oDataCompiler","compiled","requestUri","headers","3","_defineProperty","key","enumerable","configurable","writable","_xmlEscape","oDataConverterV3","fromDb","$data.Byte","proxyConverter","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.ObjectID","$data.Integer","$data.Int32","$data.Number","$data.Date","dbData","Date","substring","parseInt","substr","indexOf","match","$data.DateTimeOffset","$data.Time","$data.String","$data.Boolean","$data.Blob","v","convertTo","atob","$data.Object","JSON","parse","$data.Array","Array","$data.GeographyPoint","GeographyPoint","$data.GeographyLineString","GeographyLineString","$data.GeographyPolygon","GeographyPolygon","$data.GeographyMultiPoint","GeographyMultiPoint","$data.GeographyMultiLineString","GeographyMultiLineString","$data.GeographyMultiPolygon","GeographyMultiPolygon","$data.GeographyCollection","GeographyCollection","$data.GeometryPoint","GeometryPoint","$data.GeometryLineString","GeometryLineString","$data.GeometryPolygon","GeometryPolygon","$data.GeometryMultiPoint","GeometryMultiPoint","$data.GeometryMultiLineString","GeometryMultiLineString","$data.GeometryMultiPolygon","GeometryMultiPolygon","$data.GeometryCollection","GeometryCollection","$data.Guid","guid","toString","$data.Entity","toISOString","Blob","toBase64","stringify","date","text","bool","b","toHexString","GeographyBase","stringifyToUrl","GeometryBase","unescape","c","config","resolveType","converters","toLowerCase","lastIndexOf","test","slice","parseGuid","elementType","isAssignableTo","isArray","oDataConverter","DateTimeOffset","Time","createFromHexString","parseFromString","xmlEscape","simple","4","oDataWhereCompiler","orderContext","nodeType","ExpressionType","OrderByDescending","VisitParametricQueryExpression","VisitEntityFieldExpression","VisitComplexTypeExpression","AssociationInfoExpression","VisitAssociationInfoExpression","associationInfo","FromPropertyName","VisitEntityExpression","VisitMemberInfoExpression","memberName","VisitEntityFieldOperationExpression","requireType","operation","MemberInfoExpression","opDef","memberDefinition","opName","mapTo","paramCounter","parameters","args","map","item","index","forEach","arg","VisitEntityFunctionOperationExpression","ConstantExpression","VisitContextFunctionOperationExpression","5","pagingContext","amount","Skip","Take","6","hasObjectLiteral","ObjectLiteralPath","modelBinderMapping","mapping","EntityExpression","EntitySetExpression","ComplexTypeExpression","m","pop","join","VisitObjectLiteralExpression","tempObjectLiteralPath","member","VisitObjectFieldExpression","fieldName","7","_datajsPatch","_typeof","Symbol","iterator","OData","jsonHandler","datajs","version","Trace","log","oldread","defaultHandler","read","p","contentType","dataServiceVersion","apply","arguments","oldwrite","write","StorageProviderBase","ctx","SqlCommands","typeSystem","extend","dbCreation","DbCreationType","DropTableIfChanged","oDataServiceHost","serviceUrl","setDataServiceVersionToMax","user","password","withCredentials","UpdateMethod","odatajs","oData","fixkDataServiceVersions","_buildDbType_generateConvertToFunction","buildDbType_generateConvertToFunction","_buildDbType_modifyInstanceDefinition","buildDbType_modifyInstanceDefinition","initializeStore","callBack","createCallbackSetting","DropAllExistingTables","that","requestData","d","success","error","appendBasicAuth","prepareRequest","request","logicalEntity","convertedItems","dbInstance","PhysicalType","entityState","memberDefinitions","getPublicMappedProperties","property","initData","FromMultiplicity","ToMultiplicity","refValue","rv","EntityState","Modified","sMod","getType","tblName","TableName","pk","__metadata","uri","contentId","ComplexTypes","cmpType","executeQuery","sql","_compile","countProperty","textStatus","jqXHR","body","processSuccess","rawDataList","cnt","Integer","__count","Number","valueOf","__batchResponses","resp","parseError","batchHandler","MaxDataServiceVersion","DataServiceVersion","enableJSONP","enableJsonpCallback","useJsonLight","saveChanges","changedItems","independentBlocks","buildIndependentBlocks","saveInternal","index2","disableBatch","defaults","_saveRestMany","_saveBatch","_saveRest","convertedItem","Unchanged","Added","save_getInitData","save_addConcurrencyHeader","Deleted","response","statusCode","ETag","Etag","etag","filter","memDef","concurrencyMode","ConcurrencyMode","Fixed","reload_fromResponse","batchRequests","Content-Id","__changeRequests","__changeResponses","errors","propType","computed","inverseProperty","aeType","arrayProperty","ap","aitem","isNullOrUndefined","etypeName","econverter","isComplex","isDeep","physicalData","serializableObject","asArray","memdef","kind","MemberTypes","complexProperty","navProperty","notMapped","changedProperties","def","getTraceString","supportedDataTypes","String","Boolean","Guid","Byte","SByte","Decimal","Float","Int16","Int32","Int64","supportedBinaryOperators","equal","dataType","allowedIn","FilterExpression","OrderExpression","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","add","divide","multiply","subtract","modulo","in","supportedUnaryOperators","not","supportedFieldOperations","contains","startsWith","endsWith","allowedType","ProjectionExpression","fixedDataType","strLength","baseIndex","optional","toUpperCase","trim","concat","day","hour","minute","month","second","year","round","floor","ceiling","distance","intersects","supportedSetOperations","toArray","single","invokable","frameType","SomeExpression","every","EveryExpression","take","skip","orderBy","orderByDescending","first","batchDelete","find","supportedContextOperation","batchExecuteQuery","resolveTypeOperations","entityType","getMemberDefinition","IsSideEffecting","returnType","resolveSetOperations","esDef","ContextType","ItemName","actions","MemberDefinition","translateDefinition","prototype","resolveContextOperations","entity","keyValue","memDefs","getKeyProperties","field","getFieldUrl","keyPart","servicehost","message","errorObj","Authorization","__encodeBase64","val","chr1","chr2","enc1","enc2","enc3","b64array","input","base64","chr3","enc4","charCodeAt","isNaN","charAt","registerProvider","oDataProvider","8","lambdaPrefix","VisitUnaryExpression","resolution","operand","VisitSimpleBinaryExpression","paramValue","right","orResolution","eqResolution","idValue","idCheck","createSimpleBinaryExpression","left","Equal","Or","temp","VisitQueryParameterExpression","lambda","VisitFrameOperationExpression","Queryable","frameExpression","preparator","createQueryExpressionCreator","prep_expression","frameContext"],"mappings":"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","file":"oDataProviderV3.min.js","sourcesContent":["﻿// JayData 1.5.9 \r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/odata3\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _oDataConverter = _dereq_('./oDataConverter.js');\n\nvar _oDataConverter2 = _interopRequireDefault(_oDataConverter);\n\nvar _oDataProvider = _dereq_('./oDataProvider.js');\n\nvar _oDataProvider2 = _interopRequireDefault(_oDataProvider);\n\nvar _oDataCompiler = _dereq_('./oDataCompiler.js');\n\nvar _oDataCompiler2 = _interopRequireDefault(_oDataCompiler);\n\nvar _oDataWhereCompiler = _dereq_('./oDataWhereCompiler.js');\n\nvar _oDataWhereCompiler2 = _interopRequireDefault(_oDataWhereCompiler);\n\nvar _oDataOrderCompiler = _dereq_('./oDataOrderCompiler.js');\n\nvar _oDataOrderCompiler2 = _interopRequireDefault(_oDataOrderCompiler);\n\nvar _oDataPagingCompiler = _dereq_('./oDataPagingCompiler.js');\n\nvar _oDataPagingCompiler2 = _interopRequireDefault(_oDataPagingCompiler);\n\nvar _oDataProjectionCompiler = _dereq_('./oDataProjectionCompiler.js');\n\nvar _oDataProjectionCompiler2 = _interopRequireDefault(_oDataProjectionCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n},{\"./oDataCompiler.js\":2,\"./oDataConverter.js\":3,\"./oDataOrderCompiler.js\":4,\"./oDataPagingCompiler.js\":5,\"./oDataProjectionCompiler.js\":6,\"./oDataProvider.js\":7,\"./oDataWhereCompiler.js\":8,\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.context = {};\n        this.provider = {};\n        //this.logicalType = null;\n        this.includes = null;\n        this.mainEntitySet = null;\n    },\n    compile: function compile(query) {\n\n        this.provider = query.context.storageProvider;\n        this.context = query.context;\n\n        if (query.defaultType) {\n            this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\n        }\n\n        var queryFragments = { urlText: \"\" };\n\n        this.Visit(query.expression, queryFragments);\n\n        query.modelBinderConfig = {};\n        var modelBinder = _core.Container.createModelBinderConfigCompiler(query, this.includes, true);\n        modelBinder.Visit(query.expression);\n\n        var queryText = queryFragments.urlText;\n        var addAmp = false;\n        for (var name in queryFragments) {\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && name != \"postData\" && name != \"_isBatchExecuteQuery\" && name != \"_subQueries\" && queryFragments[name] != \"\") {\n\n                if (addAmp) {\n                    queryText += \"&\";\n                } else {\n                    queryText += \"?\";\n                }\n                addAmp = true;\n                if (name != \"$urlParams\") {\n                    queryText += name + '=' + queryFragments[name];\n                } else {\n                    queryText += queryFragments[name];\n                }\n            }\n        }\n        query.queryText = queryText;\n        query.postData = queryFragments.postData;\n        var result = {\n            queryText: queryText,\n            withInlineCount: '$inlinecount' in queryFragments || '$count' in queryFragments,\n            method: queryFragments.method || 'GET',\n            postData: queryFragments.postData,\n            isBatchExecuteQuery: queryFragments._isBatchExecuteQuery,\n            subQueries: queryFragments._subQueries,\n            params: []\n        };\n\n        query._getComplitedData = function () {\n            return result;\n        };\n\n        return result;\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var orderCompiler = _core.Container.createoDataOrderCompiler(this.provider);\n        orderCompiler.compile(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var pagingCompiler = _core.Container.createoDataPagingCompiler(this.provider);\n        pagingCompiler.compile(expression, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!context['$select']) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\n\n            this.includes = this.includes || [];\n            var includeFragment = expression.selector.value.split('.');\n            var tempData = null;\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\n            for (var i = 0; i < includeFragment.length; i++) {\n                if (tempData) {\n                    tempData += '.' + includeFragment[i];\n                } else {\n                    tempData = includeFragment[i];\n                }\n                var association = storageModel.Associations[includeFragment[i]];\n                if (association) {\n                    if (!this.includes.some(function (include) {\n                        return include.name == tempData;\n                    }, this)) {\n                        this.includes.push({ name: tempData, type: association.ToType });\n                    }\n                } else {\n                    _core.Guard.raise(new _core.Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\n                }\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\n            }\n        }\n    },\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '(';\n        if (expression.params.length === 1) {\n            var param = expression.params[0];\n            var typeName = _core.Container.resolveName(param.type);\n\n            var converter = this.provider.fieldConverter.toDb[typeName];\n            var value = converter ? converter(param.value) : param.value;\n\n            converter = this.provider.fieldConverter.escape[typeName];\n            value = converter ? converter(param.value) : param.value;\n            context.urlText += value;\n        } else {\n            for (var i = 0; i < expression.params.length; i++) {\n                var param = expression.params[i];\n                var typeName = _core.Container.resolveName(param.type);\n\n                var converter = this.provider.fieldConverter.toDb[typeName];\n                var value = converter ? converter(param.value) : param.value;\n\n                converter = this.provider.fieldConverter.escape[typeName];\n                value = converter ? converter(param.value) : param.value;\n\n                if (i > 0) context.urlText += ',';\n                context.urlText += param.name + '=' + value;\n            }\n        }\n        context.urlText += ')';\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var projectionCompiler = _core.Container.createoDataProjectionCompiler(this.context);\n        projectionCompiler.compile(expression, context);\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\n\n        this.Visit(expression.source, context);\n\n        var filterCompiler = _core.Container.createoDataWhereCompiler(this.provider);\n        context.data = \"\";\n        filterCompiler.compile(expression.selector, context);\n        context[\"$filter\"] = context.data;\n        context.data = \"\";\n    },\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (this.provider.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n            context[\"$count\"] = expression.selector.value === 'allpages';\n        } else {\n            context[\"$inlinecount\"] = expression.selector.value;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        context.urlText += \"/\" + expression.instance.tableName;\n        //this.logicalType = expression.instance.elementType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.boundItem) {\n            context.urlText += \"/\" + expression.boundItem.entitySet.tableName;\n            if (expression.boundItem.data instanceof _core2.default.Entity) {\n                context.urlText += '(' + this.provider.getEntityKeysValue(expression.boundItem) + ')';\n            }\n        }\n        context.urlText += \"/\" + expression.cfg.serviceName;\n        context.method = context.method || expression.cfg.method;\n\n        //this.logicalType = expression.returnType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$batchDelete';\n        context.method = 'DELETE';\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n        if (expression.value instanceof _core2.default.Entity) typeName = _core2.default.Entity.fullName;\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        if (context.method === 'GET' || !context.method) {\n            converter = this.provider.fieldConverter.escape[typeName];\n            value = converter ? converter(value) : value;\n\n            if (value !== undefined) {\n                if (context['$urlParams']) {\n                    context['$urlParams'] += '&';\n                } else {\n                    context['$urlParams'] = '';\n                }\n                context['$urlParams'] += expression.name + '=' + value;\n            }\n        } else {\n            context.postData = context.postData || {};\n            context.postData[expression.name] = value;\n        }\n    },\n    //    VisitConstantExpression: function (expression, context) {\n    //        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\n    //\n    //\n    //        var valueType = Container.getTypeName(expression.value);\n    //\n    //\n    //\n    //        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\n    //    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$count';\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        context.urlText += '/$batch';\n        context.method = 'POST';\n        context.postData = { __batchRequests: [] };\n        context._isBatchExecuteQuery = true;\n        context._subQueries = expression.members;\n\n        for (var i = 0; i < expression.members.length; i++) {\n            var queryable = expression.members[i];\n            var compiler = new _core2.default.storageProviders.oDataV3.oDataCompiler();\n            var compiled = compiler.compile(queryable);\n            context.postData.__batchRequests.push({\n                requestUri: compiled.queryText,\n                method: compiled.method,\n                data: compiled.data,\n                headers: compiled.headers\n            });\n        }\n    }\n}, {});\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar _xmlEscape;\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n_core2.default.oDataConverterV3 = {\n    fromDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.ObjectID': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter, //function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            if (typeof v == 'string') {\n                try {\n                    return _core2.default.Container.convertTo(atob(v), '$data.Blob');\n                } catch (e) {\n                    return v;\n                }\n            } else return v;\n        },\n        '$data.Object': function $dataObject(o) {\n            if (o === undefined) {\n                return new _core2.default.Object();\n            } else if (typeof o === 'string') {\n                return JSON.parse(o);\n            }return o;\n        },\n        '$data.Array': function $dataArray(o) {\n            if (o === undefined) {\n                return new _core2.default.Array();\n            } else if (o instanceof _core2.default.Array) {\n                return o;\n            }return JSON.parse(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyPoint(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyLineString(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyPolygon(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPoint(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiLineString(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return new _core2.default.GeographyCollection(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryPoint(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryLineString(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryPolygon(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPoint(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiLineString(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return new _core2.default.GeometryCollection(g);\n            }return g;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? guid.toString() : guid;\n        }\n    },\n    toDb: {\n        '$data.Entity': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.ObjectID': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(e) {\n            return e ? e.toISOString().replace('Z', '') : e;\n        },\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v ? v.toISOString() : v;\n        },\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            return v ? _core2.default.Blob.toBase64(v) : v;\n        },\n        '$data.Object': _core2.default.Container.proxyConverter,\n        '$data.Array': _core2.default.Container.proxyConverter,\n        '$data.GeographyPoint': _core2.default.Container.proxyConverter,\n        '$data.GeographyLineString': _core2.default.Container.proxyConverter,\n        '$data.GeographyPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiPoint': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiLineString': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeographyCollection': _core2.default.Container.proxyConverter,\n        '$data.GeometryPoint': _core2.default.Container.proxyConverter,\n        '$data.GeometryLineString': _core2.default.Container.proxyConverter,\n        '$data.GeometryPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiPoint': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiLineString': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeometryCollection': _core2.default.Container.proxyConverter,\n        '$data.Guid': _core2.default.Container.proxyConverter\n    },\n    escape: {\n        '$data.Entity': function $dataEntity(e) {\n            return JSON.stringify(e);\n        },\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter, // double: 13.5D\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': function $dataDecimal(v) {\n            return v ? v + 'm' : v;\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v ? v + 'f' : v;\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v ? v + 'L' : v;\n        },\n        '$data.Time': function $dataTime(v) {\n            return v ? \"time'\" + v + \"'\" : v;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(date) {\n            return date ? \"datetimeoffset'\" + date + \"'\" : date;\n        },\n        '$data.Date': function $dataDate(date) {\n            return date ? \"datetime'\" + date + \"'\" : date;\n        },\n        '$data.String': function $dataString(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.ObjectID': function $dataObjectID(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.Boolean': function $dataBoolean(bool) {\n            return typeof bool === 'boolean' ? bool.toString() : bool;\n        },\n        '$data.Blob': function $dataBlob(b) {\n            return b ? \"X'\" + _core2.default.Blob.toHexString(_core2.default.Container.convertTo(atob(b), _core2.default.Blob)) + \"'\" : b;\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? \"guid'\" + guid.toString() + \"'\" : guid;\n        }\n    },\n    unescape: {\n        '$data.Entity': function $dataEntity(v, c) {\n            var config = c || {};\n            var value = JSON.parse(v);\n            if (value && config.type) {\n                var type = _core.Container.resolveType(config.type);\n                /*Todo converter*/\n                return new type(value, { converters: undefined });\n            }\n            return value;\n        },\n        '$data.Number': function $dataNumber(v) {\n            return JSON.parse(v);\n        },\n        '$data.Integer': function $dataInteger(v) {\n            return JSON.parse(v);\n        },\n        '$data.Int32': function $dataInt32(v) {\n            return JSON.parse(v);\n        },\n        '$data.Byte': function $dataByte(v) {\n            return JSON.parse(v);\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return JSON.parse(v);\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('m') === v.length - 1) {\n                return v.substr(0, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Float': function $dataFloat(v) {\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('f') === v.length - 1) {\n                return v.substr(0, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return JSON.parse(v);\n        },\n        '$data.Int64': function $dataInt64(v) {\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('l') === v.length - 1) {\n                return v.substr(0, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Boolean': function $dataBoolean(v) {\n            return JSON.parse(v);\n        },\n        '$data.Date': function $dataDate(v) {\n            if (typeof v === 'string' && /^datetime'/.test(v)) {\n                return v.slice(9, v.length - 1);\n            }\n            return v;\n        },\n        '$data.String': function $dataString(v) {\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\n                return v.slice(1, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.ObjectID': function $dataObjectID(v) {\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\n                return v.slice(1, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Guid': function $dataGuid(v) {\n            if (/^guid'\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'$/.test(v)) {\n                var data = v.slice(5, v.length - 1);\n                return _core2.default.parseGuid(data).toString();\n            }\n            return v;\n        },\n        '$data.Array': function $dataArray(v, c) {\n            var config = c || {};\n\n            var value = JSON.parse(v) || [];\n            if (value && config.elementType) {\n                var type = _core.Container.resolveType(config.elementType);\n                var typeName = _core.Container.resolveName(type);\n                if (type && type.isAssignableTo && type.isAssignableTo(_core2.default.Entity)) {\n                    typeName = _core2.default.Entity.fullName;\n                }\n\n                if (Array.isArray(value)) {\n                    var converter = _core2.default.oDataConverter.unescape[typeName];\n                    for (var i = 0; i < value.length; i++) {\n                        value[i] = converter ? converter(value[i]) : value[i];\n                    }\n                }\n                return value;\n            }\n            return value;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            if (typeof v === 'string' && /^datetimeoffset'/.test(v)) {\n                return _core2.default.Container.convertTo(v.slice(15, v.length - 1), _core2.default.DateTimeOffset);\n            }\n            return v;\n        },\n        '$data.Time': function $dataTime(v) {\n            if (typeof v === 'string' && /^time'/.test(v)) {\n                return _core2.default.Container.convertTo(v.slice(5, v.length - 1), _core2.default.Time);\n            }\n            return v;\n        },\n        '$data.Blob': function $dataBlob(v) {\n            if (typeof v === 'string') {\n                if (/^X'/.test(v)) {\n                    return _core2.default.Blob.createFromHexString(v.slice(2, v.length - 1));\n                } else if (/^binary'/.test(v)) {\n                    return _core2.default.Blob.createFromHexString(v.slice(7, v.length - 1));\n                }\n            }\n            return v;\n        },\n        '$data.Object': function $dataObject(v) {\n            return JSON.parse(v);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(v) {\n            if (/^geography'POINT\\(/i.test(v)) {\n                var data = v.slice(10, v.length - 1);\n                return _core2.default.GeographyBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(v) {\n            if (/^geography'POLYGON\\(/i.test(v)) {\n                var data = v.slice(10, v.length - 1);\n                return _core2.default.GeographyBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(v) {\n            if (/^geometry'POINT\\(/i.test(v)) {\n                var data = v.slice(9, v.length - 1);\n                return _core2.default.GeometryBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(v) {\n            if (/^geometry'POLYGON\\(/i.test(v)) {\n                var data = v.slice(9, v.length - 1);\n                return _core2.default.GeometryBase.parseFromString(data);\n            }\n            return v;\n        }\n    },\n    xmlEscape: (_xmlEscape = {\n        '$data.Byte': function $dataByte(v) {\n            return v.toString();\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return v.toString();\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            return v.toString();\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v.toString();\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return v.toString();\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v.toString();\n        },\n        '$data.Integer': function $dataInteger(v) {\n            return v.toString();\n        },\n        '$data.Int32': function $dataInt32(v) {\n            return v.toString();\n        },\n        '$data.Boolean': function $dataBoolean(v) {\n            return v.toString();\n        },\n        '$data.Blob': function $dataBlob(v) {\n            return _core2.default.Blob.toBase64(v);\n        },\n        '$data.Date': function $dataDate(v) {\n            return v.toISOString().replace('Z', '');\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v.toISOString();\n        },\n        '$data.Time': function $dataTime(v) {\n            return v.toString();\n        },\n        '$data.Number': function $dataNumber(v) {\n            return v.toString();\n        }\n    }, _defineProperty(_xmlEscape, '$data.Integer', function $dataInteger(v) {\n        return v.toString();\n    }), _defineProperty(_xmlEscape, '$data.Int32', function $dataInt32(v) {\n        return v.toString();\n    }), _defineProperty(_xmlEscape, '$data.String', function $dataString(v) {\n        return v.toString();\n    }), _defineProperty(_xmlEscape, '$data.ObjectID', function $dataObjectID(v) {\n        return v.toString();\n    }), _defineProperty(_xmlEscape, '$data.Object', function $dataObject(v) {\n        return JSON.stringify(v);\n    }), _defineProperty(_xmlEscape, '$data.Guid', function $dataGuid(v) {\n        return v.toString();\n    }), _xmlEscape),\n    /*,\r\n    '$data.GeographyPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n    '$data.GeometryPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); },\r\n    '$data.GeographyLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n    '$data.GeometryLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); }*/\n    simple: { //$value, $count\n        '$data.Byte': function $dataByte(v) {\n            return v.toString();\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return v.toString();\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            return v.toString();\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v.toString();\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return v.toString();\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v.toString();\n        },\n        '$data.ObjectID': function $dataObjectID(o) {\n            return o.toString();\n        },\n        '$data.Integer': function $dataInteger(o) {\n            return o.toString();\n        },\n        '$data.Int32': function $dataInt32(o) {\n            return o.toString();\n        },\n        '$data.Number': function $dataNumber(o) {\n            return o.toString();\n        },\n        '$data.Date': function $dataDate(o) {\n            return o instanceof _core2.default.Date ? o.toISOString().replace('Z', '') : o.toString();\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v ? v.toISOString() : v;\n        },\n        '$data.Time': function $dataTime(o) {\n            return o.toString();\n        },\n        '$data.String': function $dataString(o) {\n            return o.toString();\n        },\n        '$data.Boolean': function $dataBoolean(o) {\n            return o.toString();\n        },\n        '$data.Blob': function $dataBlob(o) {\n            return o;\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Guid': function $dataGuid(o) {\n            return o.toString();\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(o) {\n            return JSON.stringify(o);\n        }\n    }\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataOrderCompiler', _core2.default.storageProviders.oDataV3.oDataWhereCompiler, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var orderContext = { data: \"\" };\n        this.Visit(expression.selector, orderContext);\n        if (context['$orderby']) {\n            context['$orderby'] += ',';\n        } else {\n            context['$orderby'] = '';\n        }\n        context['$orderby'] += orderContext.data + (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n        context.data += \"/\";\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.source, context);\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName + '/';\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (index > 0) {\n                context.data += \",\";\n            };\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitEntityFunctionOperationExpression: function VisitEntityFunctionOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        this.Visit(expression.source, context);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.method.params || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        var i = 0;\n        args.forEach(function (arg, index) {\n            if (arg === undefined || arg instanceof _core2.default.Expressions.ConstantExpression && typeof arg.value === 'undefined') return;\n\n            if (i > 0) {\n                context.data += \",\";\n            };\n            i++;\n            context.data += params[index].name + '=';\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitContextFunctionOperationExpression: function VisitContextFunctionOperationExpression(expression, context) {\n        return this.VisitEntityFunctionOperationExpression(expression, context);\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataPagingCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var pagingContext = { data: \"\" };\n        this.Visit(expression.amount, pagingContext);\n        switch (expression.nodeType) {\n            case _core2.default.Expressions.ExpressionType.Skip:\n                context['$skip'] = pagingContext.data;break;\n            case _core2.default.Expressions.ExpressionType.Take:\n                context['$top'] = pagingContext.data;break;\n            default:\n                _core.Guard.raise(\"Not supported nodeType\");break;\n        }\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n        var converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(expression.value) : expression.value;\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataProjectionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = entityContext;\n        this.hasObjectLiteral = false;\n        this.ObjectLiteralPath = \"\";\n        this.modelBinderMapping = [];\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        context.data = \"\";\n        this.mapping = \"\";\n\n        this.Visit(expression.selector, context);\n        if (context['$select']) {\n            context['$select'] += ',';\n        } else {\n            context['$select'] = '';\n        }\n        context[\"$select\"] += context.data;\n        context.data = \"\";\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        }if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\n        this.hasObjectLiteral = true;\n        expression.members.forEach(function (member, index) {\n            this.Visit(member, context);\n            if (index < expression.members.length - 1) {\n                context.data += ',';\n            }\n            this.mapping = '';\n        }, this);\n        this.ObjectLiteralPath = tempObjectLiteralPath;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n\n        if (this.ObjectLiteralPath) {\n            this.ObjectLiteralPath += '.' + expression.fieldName;\n        } else {\n            this.ObjectLiteralPath = expression.fieldName;\n        }\n        this.Visit(expression.expression, context);\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        this.Visit(expression.source, context);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        if (expression.source instanceof _core2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, context);\n        }\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.associationInfo.FromPropertyName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.memberName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.memberName;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\n        //context.data += expression.value;\n        context.data = context.data.slice(0, context.data.length - 1);\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _datajsPatch;\n_datajsPatch = function datajsPatch(OData) {\n    // just datajs-1.1.0\n    if (OData && OData.jsonHandler && 'useJsonLight' in OData.jsonHandler && (typeof datajs === 'undefined' ? 'undefined' : _typeof(datajs)) === 'object' && !datajs.version) {\n        _core2.default.Trace.log('!!!!!!! - patch datajs 1.1.0');\n        var oldread = OData.defaultHandler.read;\n        OData.defaultHandler.read = function (p, context) {\n            delete context.contentType;\n            delete context.dataServiceVersion;\n\n            oldread.apply(this, arguments);\n        };\n        var oldwrite = OData.defaultHandler.write;\n        OData.defaultHandler.write = function (p, context) {\n            delete context.contentType;\n            delete context.dataServiceVersion;\n\n            oldwrite.apply(this, arguments);\n        };\n    }\n    _datajsPatch = function datajsPatch() {};\n};\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, ctx) {\n        this.SqlCommands = [];\n        this.context = ctx;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            dbCreation: _core2.default.storageProviders.DbCreationType.DropTableIfChanged,\n            oDataServiceHost: \"/odata.svc\",\n            serviceUrl: \"\",\n            maxDataServiceVersion: '2.0',\n            dataServiceVersion: undefined,\n            setDataServiceVersionToMax: true,\n            user: null,\n            password: null,\n            withCredentials: false,\n            //enableJSONP: undefined,\n            //useJsonLight: undefined\n            //disableBatch: undefined\n            UpdateMethod: 'PATCH'\n        }, cfg);\n\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n            if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\n                _core.Guard.raise(new _core.Exception('odatajs is required', 'Not Found!'));\n            } else {\n                this.oData = odatajs.oData;\n            }\n        } else {\n            if (typeof OData === 'undefined') {\n                _core.Guard.raise(new _core.Exception('datajs is required', 'Not Found!'));\n            } else {\n                this.oData = OData;\n                _datajsPatch(this.oData);\n            }\n        }\n\n        this.fixkDataServiceVersions(cfg);\n\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\n        }\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\n        }\n    },\n    fixkDataServiceVersions: function fixkDataServiceVersions(cfg) {\n        if (this.providerConfiguration.dataServiceVersion > this.providerConfiguration.maxDataServiceVersion) {\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n\n        if (this.providerConfiguration.setDataServiceVersionToMax === true) {\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n\n        if (cfg && !cfg.UpdateMethod && this.providerConfiguration.dataServiceVersion < '3.0' || !this.providerConfiguration.dataServiceVersion) {\n            this.providerConfiguration.UpdateMethod = 'MERGE';\n        }\n    },\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.typeSystem.createCallbackSetting(callBack);\n        switch (this.providerConfiguration.dbCreation) {\n            case _core2.default.storageProviders.DbCreationType.DropAllExistingTables:\n                var that = this;\n                if (this.providerConfiguration.serviceUrl) {\n\n                    var requestData = [{\n                        requestUri: that.providerConfiguration.serviceUrl + \"/Delete\",\n                        method: 'POST'\n                    }, function (d) {\n                        //console.log(\"RESET oData database\");\n                        callBack.success(that.context);\n                    }, function (error) {\n                        callBack.success(that.context);\n                    }];\n\n                    this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n                    //if (this.providerConfiguration.user) {\n                    //    requestData[0].user = this.providerConfiguration.user;\n                    //    requestData[0].password = this.providerConfiguration.password || \"\";\n                    //}\n\n                    this.context.prepareRequest.call(this, requestData);\n                    this.oData.request.apply(this, requestData);\n                } else {\n                    callBack.success(that.context);\n                }\n                break;\n            default:\n                callBack.success(this.context);\n                break;\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel, context) {\n        return function (logicalEntity, convertedItems) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                dbInstance.initData[property.name] = logicalEntity[property.name];\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\" || association.FromMultiplicity == '$$unbound') {\n                        var refValue = logicalEntity[association.FromPropertyName];\n                        if ( /*refValue !== null &&*/refValue !== undefined) {\n                            if (refValue instanceof _core2.default.Array) {\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\n                                refValue.forEach(function (rv) {\n                                    if (rv.entityState == _core2.default.EntityState.Modified || convertedItems.indexOf(rv) < 0) {\n                                        var sMod = context._storageModel.getStorageModel(rv.getType());\n                                        var tblName = sMod.TableName;\n                                        var pk = '(' + context.storageProvider.getEntityKeysValue({ data: rv, entitySet: context.getEntitySetFromElementType(rv.getType()) }) + ')';\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: tblName + pk } });\n                                    } else {\n                                        var contentId = convertedItems.indexOf(rv);\n                                        if (contentId < 0) {\n                                            _core.Guard.raise(\"Dependency graph error\");\n                                        }\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\n                                    }\n                                }, this);\n                            } else if (refValue === null) {\n                                dbInstance.initData[association.FromPropertyName] = null;\n                            } else {\n                                if (refValue.entityState == _core2.default.EntityState.Modified || convertedItems.indexOf(refValue) < 0) {\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType());\n                                    var tblName = sMod.TableName;\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\n                                } else {\n                                    var contentId = convertedItems.indexOf(refValue);\n                                    if (contentId < 0) {\n                                        _core.Guard.raise(\"Dependency graph error\");\n                                    }\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\n                                }\n                            }\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition() {\n        return;\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.typeSystem.createCallbackSetting(callBack);\n\n        var sql = {};\n        try {\n            sql = this._compile(query);\n        } catch (e) {\n            callBack.error(e);\n            return;\n        }\n        var schema = this.context;\n\n        var that = this;\n        var countProperty = \"__count\";\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n            countProperty = \"@odata.count\";\n        }\n\n        var requestData = [{\n            requestUri: this.providerConfiguration.oDataServiceHost + sql.queryText,\n            method: sql.method,\n            data: sql.postData,\n            headers: {}\n        }, function (data, textStatus, jqXHR) {\n\n            if (!data && textStatus.body && !sql.isBatchExecuteQuery) data = JSON.parse(textStatus.body);\n            if (callBack.success) {\n                var processSuccess = function processSuccess(query, data, sql) {\n                    query.rawDataList = typeof data === 'string' ? [{ cnt: _core.Container.convertTo(data, _core2.default.Integer) }] : data;\n                    if (sql.withInlineCount && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && (typeof data[countProperty] !== 'undefined' || 'd' in data && typeof data.d[countProperty] !== 'undefined')) {\n                        query.__count = new Number(typeof data[countProperty] !== 'undefined' ? data[countProperty] : data.d[countProperty]).valueOf();\n                    }\n                };\n\n                if (sql.isBatchExecuteQuery) {\n                    query.rawDataList = sql.subQueries;\n                    for (var i = 0; i < data.__batchResponses.length; i++) {\n                        var resp = data.__batchResponses[i];\n\n                        if (!resp.data) {\n                            if (resp.body) {\n                                resp.data = JSON.parse(resp.body);\n                            } else {\n                                callBack.error(that.parseError(resp, arguments));\n                                return;\n                            }\n                        }\n\n                        processSuccess(sql.subQueries[i], resp.data, sql.subQueries[i]._getComplitedData());\n                    }\n                } else {\n                    processSuccess(query, data, sql);\n                }\n\n                callBack.success(query);\n            }\n        }, function (error) {\n            callBack.error(that.parseError(error, arguments));\n        }, sql.isBatchExecuteQuery ? this.oData.batchHandler : undefined];\n\n        if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n            requestData[0].headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n\n        if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n            requestData[0].headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\n        }\n\n        if (typeof this.providerConfiguration.enableJSONP !== 'undefined') {\n            requestData[0].enableJsonpCallback = this.providerConfiguration.enableJSONP;\n        }\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\n        }\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        //$data.ajax(requestData);\n        //OData.request(requestData, requestData.success, requestData.error);\n        this.oData.request.apply(this, requestData);\n    },\n    _compile: function _compile(queryable, params) {\n        var compiler = new _core2.default.storageProviders.oDataV3.oDataCompiler();\n        var compiled = compiler.compile(queryable);\n        return compiled;\n    },\n    saveChanges: function saveChanges(callBack, changedItems) {\n        if (changedItems.length > 0) {\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\n            this.saveInternal(independentBlocks, 0, callBack);\n        } else {\n            callBack.success(0);\n        }\n    },\n    saveInternal: function saveInternal(independentBlocks, index2, callBack) {\n        if ((this.providerConfiguration.disableBatch === true || _typeof(_core2.default.defaults) === 'object' && _core2.default.defaults.disableBatch === true) && typeof this._saveRestMany === 'function') {\n            this._saveRestMany(independentBlocks, index2, callBack);\n        } else {\n            if (independentBlocks.length > 1 || independentBlocks.length == 1 && independentBlocks[0].length > 1) {\n                this._saveBatch(independentBlocks, index2, callBack);\n            } else {\n                this._saveRest(independentBlocks, index2, callBack);\n            }\n        }\n    },\n    _saveRest: function _saveRest(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        var request;\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                request = {\n                    requestUri: this.providerConfiguration.oDataServiceHost + '/',\n                    headers: {}\n                };\n                if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n                }\n                if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n                    request.headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\n                }\n                if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n                    request.useJsonLight = this.providerConfiguration.useJsonLight;\n                }\n\n                //request.headers = { \"Content-Id\": convertedItem.length };\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.method = \"POST\";\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.method = this.providerConfiguration.UpdateMethod;\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.method = \"DELETE\";\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n                //batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        var requestData = [request, function (data, response) {\n            if (response.statusCode >= 200 && response.statusCode < 300) {\n                var item = convertedItem[0];\n                if (response.statusCode == 204) {\n                    if (response.headers.ETag || response.headers.Etag || response.headers.etag) {\n                        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                            return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n                        });\n                        if (property && property[0]) {\n                            item[property[0].name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\n                        }\n                    }\n                } else {\n                    that.reload_fromResponse(item, data, response);\n                }\n\n                if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(that.parseError(response));\n            }\n        }, function (e) {\n            callBack.error(that.parseError(e));\n        }];\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        this.oData.request.apply(this, requestData);\n    },\n    _saveBatch: function _saveBatch(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                var request = {};\n                request.headers = {\n                    \"Content-Id\": convertedItem.length\n                };\n                if (this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n                }\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.method = \"POST\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.method = this.providerConfiguration.UpdateMethod;\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.method = \"DELETE\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n\n                if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n                }\n                if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\n                    request.headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\n                }\n                batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        var requestData = [{\n            requestUri: this.providerConfiguration.oDataServiceHost + \"/$batch\",\n            method: \"POST\",\n            data: {\n                __batchRequests: [{ __changeRequests: batchRequests }]\n            },\n            headers: {}\n        }, function (data, response) {\n            if (response.statusCode == 202) {\n                var result = data.__batchResponses[0].__changeResponses;\n                var errors = [];\n\n                for (var i = 0; i < result.length; i++) {\n                    if (result[i].statusCode >= 200 && result[i].statusCode < 300) {\n                        var item = convertedItem[i];\n                        if (result[i].statusCode == 204) {\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                                    return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n                                });\n                                if (property && property[0]) {\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\n                                }\n                            }\n                            continue;\n                        }\n\n                        that.reload_fromResponse(item, result[i].data, result[i]);\n                    } else {\n                        errors.push(that.parseError(result[i]));\n                    }\n                }\n                if (errors.length > 0) {\n                    if (errors.length === 1) {\n                        callBack.error(errors[0]);\n                    } else {\n                        callBack.error(new _core.Exception('See inner exceptions', 'Batch failed', errors));\n                    }\n                } else if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(that.parseError(response));\n            }\n        }, function (e) {\n            callBack.error(that.parseError(e));\n        }, this.oData.batchHandler];\n\n        if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\n            requestData[0].headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n        if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\n            requestData[0].headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\n        }\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\n        }\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        this.oData.request.apply(this, requestData);\n    },\n    reload_fromResponse: function reload_fromResponse(item, data, response) {\n        var that = this;\n        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            var propType = _core.Container.resolveType(memDef.type);\n            if (memDef.computed || memDef.key || !memDef.inverseProperty) {\n                if (memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed) {\n                    //unescape?\n                    item[memDef.name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\n                } else if (memDef.isAssignableTo) {\n                    if (data[memDef.name]) {\n                        item[memDef.name] = new propType(data[memDef.name], { converters: that.fieldConverter.fromDb });\n                    } else {\n                        item[memDef.name] = data[memDef.name];\n                    }\n                } else if (propType === _core2.default.Array && memDef.elementType) {\n                    var aeType = _core.Container.resolveType(memDef.elementType);\n                    if (data[memDef.name] && Array.isArray(data[memDef.name])) {\n                        var arrayProperty = [];\n                        for (var ap = 0; ap < data[memDef.name].length; ap++) {\n                            var aitem = data[memDef.name][ap];\n                            if (aeType.isAssignableTo && !Object.isNullOrUndefined(aitem)) {\n                                arrayProperty.push(new aeType(aitem, { converters: that.fieldConverter.fromDb }));\n                            } else {\n                                var etypeName = _core.Container.resolveName(aeType);\n                                var econverter = that.fieldConverter.fromDb[etypeName];\n\n                                arrayProperty.push(econverter ? econverter(aitem) : aitem);\n                            }\n                        }\n                        item[memDef.name] = arrayProperty;\n                    } else if (!data[memDef.name]) {\n                        item[memDef.name] = data[memDef.name];\n                    }\n                } else {\n                    var typeName = _core.Container.resolveName(memDef.type);\n                    var converter = that.fieldConverter.fromDb[typeName];\n\n                    item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\n                }\n            }\n        }, this);\n    },\n\n    //save_getInitData: function (item, convertedItems) {\n    //    var self = this;\n    //    item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\n    //    var serializableObject = {}\n    //    item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\n    //        if (memdef.kind == $data.MemberTypes.navProperty || memdef.kind == $data.MemberTypes.complexProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\n    //            if (typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))) {\n    //                var typeName = Container.resolveName(memdef.type);\n    //                var converter = self.fieldConverter.toDb[typeName];\n    //                serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\n    //            }\n    //        }\n    //    }, this);\n    //    return serializableObject;\n    //},\n    save_getInitData: function save_getInitData(item, convertedItems, isComplex, isDeep) {\n        var self = this;\n        if (!isComplex) {\n            item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\n        } else {\n            item.physicalData = item.data;\n        }\n        var serializableObject = {};\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\n            if (memdef.kind == _core2.default.MemberTypes.complexProperty && item.physicalData[memdef.name]) {\n                serializableObject[memdef.name] = self.save_getInitData({ data: item.physicalData[memdef.name] }, convertedItems, true, true);\n            } else if (memdef.kind == _core2.default.MemberTypes.navProperty || memdef.kind == _core2.default.MemberTypes.property && !memdef.notMapped) {\n                if (isDeep || typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === _core2.default.EntityState.Added || item.data.changedProperties && item.data.changedProperties.some(function (def) {\n                    return def.name === memdef.name;\n                }))) {\n\n                    if (memdef.kind == _core2.default.MemberTypes.navProperty && item.physicalData[memdef.name] && this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n                        serializableObject[memdef.name + \"@odata.bind\"] = item.physicalData[memdef.name].__metadata.uri;\n                    } else {\n                        var typeName = _core.Container.resolveName(memdef.type);\n                        var converter = self.fieldConverter.toDb[typeName];\n                        serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\n                    }\n                }\n            }\n        }, this);\n        return serializableObject;\n    },\n    save_addConcurrencyHeader: function save_addConcurrencyHeader(item, headers) {\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n            return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n        });\n        if (property && property[0]) {\n            headers['If-Match'] = item.data[property[0].name];\n            //item.data[property[0].name] = \"\";\n        }\n    },\n    getTraceString: function getTraceString(queryable) {\n        var sqlText = this._compile(queryable);\n        return queryable;\n    },\n    supportedDataTypes: {\n        value: [_core2.default.Array, _core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Boolean, _core2.default.Date, _core2.default.Object, _core2.default.GeographyPoint, _core2.default.Guid, _core2.default.GeographyLineString, _core2.default.GeographyPolygon, _core2.default.GeographyMultiPoint, _core2.default.GeographyMultiLineString, _core2.default.GeographyMultiPolygon, _core2.default.GeographyCollection, _core2.default.GeometryPoint, _core2.default.GeometryLineString, _core2.default.GeometryPolygon, _core2.default.GeometryMultiPoint, _core2.default.GeometryMultiLineString, _core2.default.GeometryMultiPolygon, _core2.default.GeometryCollection, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.DateTimeOffset],\n        writable: false\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            divide: { mapTo: 'div', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            multiply: { mapTo: 'mul', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            subtract: { mapTo: 'sub', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            modulo: { mapTo: 'mod', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            \"in\": { mapTo: \"in\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        }\n    },\n\n    supportedFieldOperations: {\n        value: {\n            /* string functions */\n\n            contains: {\n                mapTo: \"substringof\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\n            },\n\n            startsWith: {\n                mapTo: \"startswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            endsWith: {\n                mapTo: \"endswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            length: [{\n                allowedType: 'string',\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            }, {\n                allowedType: 'GeographyLineString',\n                mapTo: \"geo.length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: ['GeographyLineString'] }],\n                fixedDataType: 'decimal'\n            }, {\n                allowedType: 'GeometryLineString',\n                mapTo: \"geo.length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryLineString' }],\n                fixedDataType: 'decimal'\n            }],\n\n            strLength: {\n                mapTo: \"length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            indexOf: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                mapTo: \"indexof\",\n                baseIndex: 1,\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\n            },\n\n            replace: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\n            },\n\n            substr: {\n                mapTo: \"substring\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\n            },\n\n            toLowerCase: {\n                mapTo: \"tolower\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            toUpperCase: {\n                mapTo: \"toupper\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n\n            },\n\n            trim: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            concat: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            /* data functions */\n\n            day: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            hour: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            minute: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            month: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            second: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            year: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n\n            /* number functions */\n            round: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            floor: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            ceiling: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n\n            /* geo functions */\n            distance: [{\n                allowedType: 'GeographyPoint',\n                mapTo: \"geo.distance\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"to\", dataType: 'GeographyPoint' }],\n                fixedDataType: 'decimal'\n            }, {\n                allowedType: 'GeometryPoint',\n                mapTo: \"geo.distance\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"to\", dataType: 'GeometryPoint' }],\n                fixedDataType: 'decimal'\n            }],\n\n            intersects: [{\n                allowedType: 'GeographyPoint',\n                mapTo: \"geo.intersects\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"in\", dataType: 'GeographyPolygon' }]\n\n            }, {\n                allowedType: 'GeometryPoint',\n                mapTo: \"geo.intersects\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"in\", dataType: 'GeometryPolygon' }]\n\n            }]\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            some: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'any',\n                frameType: _core2.default.Expressions.SomeExpression\n            },\n            every: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'all',\n                frameType: _core2.default.Expressions.EveryExpression\n            },\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {},\n            include: {},\n            batchDelete: {},\n            withInlineCount: {},\n            find: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedContextOperation: {\n        value: {\n            batchExecuteQuery: true\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    fieldConverter: { value: _core2.default.oDataConverterV3 },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        var memDef = expression.entityType.getMemberDefinition(operation);\n        if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n            _core.Guard.raise(new _core.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n        }\n\n        return memDef;\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        if (expression) {\n            var esDef = expression.storageModel.ContextType.getMemberDefinition(expression.storageModel.ItemName);\n            if (esDef && esDef.actions && esDef.actions[operation]) {\n                var memDef = _core2.default.MemberDefinition.translateDefinition(esDef.actions[operation], operation, this.getType());\n                if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n\n                    _core.Guard.raise(new _core.Exception(\"Collection '\" + expression.storageModel.ItemName + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n                }\n\n                return memDef;\n            }\n        }\n        return _core2.default.StorageProviderBase.prototype.resolveSetOperations.apply(this, arguments);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        var memDef = this.context.getType().getMemberDefinition(operation);\n        if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n            _core.Guard.raise(new _core.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n        }\n        return memDef;\n    },\n\n    getEntityKeysValue: function getEntityKeysValue(entity) {\n        var result = [];\n        var keyValue = undefined;\n        var memDefs = entity.data.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0, l = memDefs.length; i < l; i++) {\n            var field = memDefs[i];\n            if (field.key) {\n                keyValue = entity.data[field.name];\n                var typeName = _core.Container.resolveName(field.type);\n\n                var converter = this.fieldConverter.toDb[typeName];\n                keyValue = converter ? converter(keyValue) : keyValue;\n\n                converter = this.fieldConverter.escape[typeName];\n                keyValue = converter ? converter(keyValue) : keyValue;\n\n                result.push(field.name + \"=\" + keyValue);\n            }\n        }\n        if (result.length > 1) {\n            return result.join(\",\");\n        }\n        return keyValue;\n    },\n    getFieldUrl: function getFieldUrl(entity, fieldName, entitySet) {\n        var keyPart = this.getEntityKeysValue({ data: entity });\n        var servicehost = this.providerConfiguration.oDataServiceHost;\n        if (servicehost.lastIndexOf('/') === servicehost.length) servicehost = servicehost.substring(0, servicehost.length - 1);\n\n        return servicehost + '/' + entitySet.tableName + '(' + keyPart + ')/' + fieldName + '/$value';\n    }, /*\r\n       getServiceMetadata: function () {\r\n         $data.ajax(this._setAjaxAuthHeader({\r\n             url: this.providerConfiguration.oDataServiceHost + \"/$metadata\",\r\n             dataType: \"xml\",\r\n             success: function (d) {\r\n                 console.log(\"OK\");\r\n                 console.dir(d);\r\n                 console.log(typeof d);\r\n                 window[\"s\"] = d;\r\n                 window[\"k\"] = this.nsResolver;\r\n                 //s.evaluate(\"edmx:Edmx/edmx:DataServices/Schema\", s, $data.storageProviders.oData.oDataProvider.prototype.nsResolver, XPathResult.ANY_TYPE, null).iterateNext()\r\n               },\r\n             error: function (error) {\r\n                 console.log(\"error:\");\r\n                 console.dir(error);\r\n             }\r\n         }));\r\n       },\r\n       nsResolver: function (sPrefix) {\r\n         switch (sPrefix) {\r\n             case \"edmx\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/06/edmx\";\r\n                 break;\r\n             case \"m\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\";\r\n                 break;\r\n             case \"d\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/08/dataservices\";\r\n                 break;\r\n             default:\r\n                 return \"http://schemas.microsoft.com/ado/2008/09/edm\";\r\n                 break;\r\n         }\r\n       }\r\n       */\n    parseError: function parseError(error, data) {\n\n        var message = (error.response || error || {}).body || '';\n        try {\n            if (message.indexOf('{') === 0) {\n                var errorObj = JSON.parse(message);\n                errorObj = errorObj['odata.error'] || errorObj.error || errorObj;\n                if (errorObj.message) {\n                    message = errorObj.message.value || errorObj.message;\n                }\n            }\n        } catch (e) {}\n\n        return new _core.Exception(message, error.message, data || error);\n    },\n    appendBasicAuth: function appendBasicAuth(request, user, password, withCredentials) {\n        request.headers = request.headers || {};\n        if (!request.headers.Authorization && user && password) {\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\n        }\n        if (withCredentials) {\n            request.withCredentials = withCredentials;\n        }\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        var input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\n_core2.default.StorageProviderBase.registerProvider(\"oDataV3\", _core2.default.storageProviders.oDataV3.oDataProvider);\n\n},{\"jaydata/core\":\"jaydata/core\"}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oDataV3.oDataWhereCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider, lambdaPrefix) {\n        this.provider = provider;\n        this.lambdaPrefix = lambdaPrefix;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n        context.data += expression.resolution.mapTo;\n        context.data += \"(\";\n        this.Visit(expression.operand, context);\n        context.data += \")\";\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        context.data += \"(\";\n        //TODO refactor!!!\n        if (expression.nodeType == \"in\") {\n            _core.Guard.requireType(\"expression.right\", expression.type, _core2.default.Expressions.ConstantExpression);\n            var paramValue = expression.right.value;\n            if (!paramValue instanceof Array) {\n                _core.Guard.raise(new _core.Exception(\"Right to the 'in' operator must be an array value\"));\n            }\n            var result = null;\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\n\n            paramValue.forEach(function (item) {\n                var idValue = item;\n                var idCheck = _core.Container.createSimpleBinaryExpression(expression.left, idValue, _core2.default.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\n                if (result) {\n                    result = _core.Container.createSimpleBinaryExpression(result, idCheck, _core2.default.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\n                } else {\n                    result = idCheck;\n                };\n            });\n            var temp = context.data;\n            context.data = '';\n            this.Visit(result, context);\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\n        } else {\n            this.Visit(expression.left, context);\n            context.data += \" \";\n            context.data += expression.resolution.mapTo;\n            context.data += \" \";\n            this.Visit(expression.right, context);\n        };\n        context.data += \")\";\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.source instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            context.data += \"/\";\n        }\n        this.Visit(expression.selector, context);\n    },\n\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName;\n    },\n\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    },\n\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (index > 0) {\n                context.data += \",\";\n            };\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitEntityFunctionOperationExpression: function VisitEntityFunctionOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        this.Visit(expression.source, context);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.method.params || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n        var i = 0;\n        args.forEach(function (arg, index) {\n            if (arg === undefined || arg instanceof _core2.default.Expressions.ConstantExpression && typeof arg.value === 'undefined') return;\n\n            if (i > 0) {\n                context.data += \",\";\n            };\n            i++;\n            context.data += params[index].name + '=';\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitContextFunctionOperationExpression: function VisitContextFunctionOperationExpression(expression, context) {\n        return this.VisitEntityFunctionOperationExpression(expression, context);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        if (this.lambdaPrefix && expression.selector.lambda) {\n            context.lambda = expression.selector.lambda;\n            context.data += expression.selector.lambda + '/';\n        }\n\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\n        //    this.Visit(expression.selector, context);\n        //}\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n            context.data += \"/\";\n        }\n    },\n\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            if (arg && arg.value instanceof _core2.default.Queryable) {\n                var frameExpression = new opDef.frameType(arg.value.expression);\n                var preparator = _core.Container.createQueryExpressionCreator(arg.value.entityContext);\n                var prep_expression = preparator.Visit(frameExpression);\n\n                var compiler = new _core2.default.storageProviders.oDataV3.oDataWhereCompiler(this.provider, true);\n                var frameContext = { data: \"\" };\n                var compiled = compiler.compile(prep_expression, frameContext);\n\n                context.data += frameContext.lambda + ': ' + frameContext.data;\n            };\n        }\n        context.data += \")\";\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}]},{},[1])(1)\n});\n\n","import $data from 'jaydata/core';\r\nimport converter from './oDataConverter.js';\r\nimport provider from './oDataProvider.js';\r\nimport compiler from './oDataCompiler.js';\r\nimport order from './oDataWhereCompiler.js';\r\nimport paging from './oDataOrderCompiler.js';\r\nimport projection from './oDataPagingCompiler.js';\r\nimport where from './oDataProjectionCompiler.js';\r\n\r\nexport default $data;\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oDataV3.oDataCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function () {\r\n        this.context = {};\r\n        this.provider = {};\r\n        //this.logicalType = null;\r\n        this.includes = null;\r\n        this.mainEntitySet = null;\r\n    },\r\n    compile: function (query) {\r\n\r\n        this.provider = query.context.storageProvider;\r\n        this.context = query.context;\r\n\r\n        if (query.defaultType) {\r\n            this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\r\n        }\r\n\r\n        var queryFragments = { urlText: \"\" };\r\n        \r\n        this.Visit(query.expression, queryFragments);\r\n\r\n        query.modelBinderConfig = {};\r\n        var modelBinder = Container.createModelBinderConfigCompiler(query, this.includes, true);\r\n        modelBinder.Visit(query.expression);\r\n\r\n\r\n        var queryText = queryFragments.urlText;\r\n        var addAmp = false;\r\n        for (var name in queryFragments) {\r\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && name != \"postData\" &&\r\n                name != \"_isBatchExecuteQuery\" && name != \"_subQueries\" && queryFragments[name] != \"\") {\r\n\r\n                if (addAmp) { queryText += \"&\"; } else { queryText += \"?\"; }\r\n                addAmp = true;\r\n                if(name != \"$urlParams\"){\r\n                    queryText += name + '=' + queryFragments[name];\r\n                }else{\r\n                    queryText += queryFragments[name];\r\n                }\r\n            }\r\n        }\r\n        query.queryText = queryText;\r\n        query.postData = queryFragments.postData;\r\n        var result =  {\r\n            queryText: queryText,\r\n            withInlineCount: '$inlinecount' in queryFragments || '$count' in queryFragments,\r\n            method: queryFragments.method || 'GET',\r\n            postData: queryFragments.postData,\r\n            isBatchExecuteQuery: queryFragments._isBatchExecuteQuery,\r\n            subQueries: queryFragments._subQueries,\r\n            params: []\r\n        };\r\n\r\n        query._getComplitedData = function () {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var orderCompiler = Container.createoDataOrderCompiler(this.provider);\r\n        orderCompiler.compile(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var pagingCompiler = Container.createoDataPagingCompiler(this.provider);\r\n        pagingCompiler.compile(expression, context);\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (!context['$select']) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\r\n\r\n            this.includes = this.includes || [];\r\n            var includeFragment = expression.selector.value.split('.');\r\n            var tempData = null;\r\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\r\n            for (var i = 0; i < includeFragment.length; i++) {\r\n                if (tempData) { tempData += '.' + includeFragment[i]; } else { tempData = includeFragment[i]; }\r\n                var association = storageModel.Associations[includeFragment[i]];\r\n                if (association) {\r\n                    if (!this.includes.some(function (include) { return include.name == tempData }, this)) {\r\n                        this.includes.push({ name: tempData, type: association.ToType });\r\n                    }\r\n                }\r\n                else {\r\n                    Guard.raise(new Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\r\n                }\r\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\r\n            }\r\n        }\r\n    },\r\n    VisitFindExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '(';\r\n        if (expression.params.length === 1) {\r\n            var param = expression.params[0];\r\n            var typeName = Container.resolveName(param.type);\r\n\r\n            var converter = this.provider.fieldConverter.toDb[typeName];\r\n            var value = converter ? converter(param.value) : param.value;\r\n\r\n            converter = this.provider.fieldConverter.escape[typeName];\r\n            value = converter ? converter(param.value) : param.value;\r\n            context.urlText += value;\r\n        } else {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                var param = expression.params[i];\r\n                var typeName = Container.resolveName(param.type);\r\n\r\n                var converter = this.provider.fieldConverter.toDb[typeName];\r\n                var value = converter ? converter(param.value) : param.value;\r\n\r\n                converter = this.provider.fieldConverter.escape[typeName];\r\n                value = converter ? converter(param.value) : param.value;\r\n\r\n                if (i > 0) context.urlText += ',';\r\n                context.urlText += param.name + '=' + value;\r\n            }\r\n        }\r\n        context.urlText += ')';\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var projectionCompiler = Container.createoDataProjectionCompiler(this.context);\r\n        projectionCompiler.compile(expression, context);\r\n    },\r\n    VisitFilterExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\r\n\r\n        this.Visit(expression.source, context);\r\n\r\n        var filterCompiler = Container.createoDataWhereCompiler(this.provider);\r\n        context.data = \"\";\r\n        filterCompiler.compile(expression.selector, context);\r\n        context[\"$filter\"] = context.data;\r\n        context.data = \"\";\r\n\r\n    },\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (this.provider.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n            context[\"$count\"] = expression.selector.value === 'allpages';\r\n        } else {\r\n            context[\"$inlinecount\"] = expression.selector.value;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        context.urlText += \"/\" + expression.instance.tableName;\r\n        //this.logicalType = expression.instance.elementType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.boundItem) {\r\n            context.urlText += \"/\" + expression.boundItem.entitySet.tableName;\r\n            if (expression.boundItem.data instanceof $data.Entity) {\r\n                context.urlText += '(' + this.provider.getEntityKeysValue(expression.boundItem) + ')';\r\n            }\r\n        }\r\n        context.urlText += \"/\" + expression.cfg.serviceName;\r\n        context.method = context.method || expression.cfg.method;\r\n\r\n        //this.logicalType = expression.returnType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$batchDelete';\r\n        context.method = 'DELETE';\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n        if (expression.value instanceof $data.Entity)\r\n            typeName = $data.Entity.fullName;\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n        \r\n\r\n        if (context.method === 'GET' || !context.method) {\r\n            converter = this.provider.fieldConverter.escape[typeName];\r\n            value = converter ? converter(value) : value;\r\n\r\n            if (value !== undefined) {\r\n                if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n                context['$urlParams'] += expression.name + '=' + value;\r\n            }\r\n        } else {\r\n            context.postData = context.postData || {};\r\n            context.postData[expression.name] = value;\r\n        }\r\n    },\r\n//    VisitConstantExpression: function (expression, context) {\r\n//        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n//\r\n//\r\n//        var valueType = Container.getTypeName(expression.value);\r\n//\r\n//\r\n//\r\n//        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\r\n//    },\r\n\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$count';       \r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        context.urlText += '/$batch'\r\n        context.method = 'POST';\r\n        context.postData = { __batchRequests: [] };\r\n        context._isBatchExecuteQuery = true;\r\n        context._subQueries = expression.members;\r\n\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            var queryable = expression.members[i];\r\n            var compiler = new $data.storageProviders.oDataV3.oDataCompiler();\r\n            var compiled = compiler.compile(queryable);\r\n            context.postData.__batchRequests.push({\r\n                requestUri: compiled.queryText,\r\n                method: compiled.method,\r\n                data: compiled.data,\r\n                headers: compiled.headers\r\n            });\r\n        }\r\n    }\r\n}, {});","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.oDataConverterV3 = {\r\n    fromDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.ObjectID': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,//function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.DateTimeOffset': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) {\r\n            if (typeof v == 'string'){\r\n                try { return $data.Container.convertTo(atob(v), '$data.Blob'); }\r\n                catch (e) { return v; }\r\n            }else return v;\r\n        },\r\n        '$data.Object': function (o) { if (o === undefined) { return new $data.Object(); } else if (typeof o === 'string') { return JSON.parse(o); } return o; },\r\n        '$data.Array': function (o) { if (o === undefined) { return new $data.Array(); } else if (o instanceof $data.Array) { return o; } return JSON.parse(o); },\r\n        '$data.GeographyPoint': function (g) { if (g) { return new $data.GeographyPoint(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return new $data.GeographyLineString(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return new $data.GeographyPolygon(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return new $data.GeographyMultiPoint(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return new $data.GeographyMultiLineString(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return new $data.GeographyMultiPolygon(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return new $data.GeographyCollection(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return new $data.GeometryPoint(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return new $data.GeometryLineString(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return new $data.GeometryPolygon(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return new $data.GeometryMultiPoint(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return new $data.GeometryMultiLineString(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return new $data.GeometryMultiPolygon(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return new $data.GeometryCollection(g); } return g; },\r\n        '$data.Guid': function (guid) { return guid ? guid.toString() : guid; }\r\n    },\r\n    toDb: {\r\n        '$data.Entity': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.ObjectID': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (e) { return e ? e.toISOString().replace('Z', '') : e; },\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.DateTimeOffset': function(v){ return v ? v.toISOString() : v; },\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) { return v ? $data.Blob.toBase64(v) : v; },\r\n        '$data.Object': $data.Container.proxyConverter,\r\n        '$data.Array': $data.Container.proxyConverter,\r\n        '$data.GeographyPoint': $data.Container.proxyConverter,\r\n        '$data.GeographyLineString': $data.Container.proxyConverter,\r\n        '$data.GeographyPolygon': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiPoint': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiLineString': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiPolygon': $data.Container.proxyConverter,\r\n        '$data.GeographyCollection': $data.Container.proxyConverter,\r\n        '$data.GeometryPoint': $data.Container.proxyConverter,\r\n        '$data.GeometryLineString': $data.Container.proxyConverter,\r\n        '$data.GeometryPolygon': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiPoint': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiLineString': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiPolygon': $data.Container.proxyConverter,\r\n        '$data.GeometryCollection': $data.Container.proxyConverter,\r\n        '$data.Guid': $data.Container.proxyConverter\r\n    },\r\n    escape: {\r\n        '$data.Entity': function (e) { return JSON.stringify(e); },\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter, // double: 13.5D\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': function (v) { return v ? v + 'm' : v; },\r\n        '$data.Float': function (v) { return v ? v + 'f' : v; },\r\n        '$data.Int64': function (v) { return v ? v + 'L' : v; },\r\n        '$data.Time': function (v) { return v ? \"time'\" + v + \"'\" : v; },\r\n        '$data.DateTimeOffset': function (date) { return date ? \"datetimeoffset'\" + date + \"'\" : date; },\r\n        '$data.Date': function (date) { return date ? \"datetime'\" + date + \"'\" : date; },\r\n        '$data.String': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.ObjectID': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.Boolean': function (bool) { return typeof bool === 'boolean' ? bool.toString() : bool; },\r\n        '$data.Blob': function (b) { return b ? \"X'\" + $data.Blob.toHexString($data.Container.convertTo(atob(b), $data.Blob)) + \"'\" : b; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyPoint': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.Guid': function (guid) { return guid ? (\"guid'\" + guid.toString() + \"'\") : guid; }\r\n    },\r\n    unescape: {\r\n        '$data.Entity': function (v, c) {\r\n            var config = c || {};\r\n            var value = JSON.parse(v);\r\n            if (value && config.type) {\r\n                var type = Container.resolveType(config.type);\r\n                /*Todo converter*/\r\n                return new type(value, { converters: undefined });\r\n            }\r\n            return value;\r\n        },\r\n        '$data.Number': function (v) { return JSON.parse(v); },\r\n        '$data.Integer': function (v) { return JSON.parse(v); },\r\n        '$data.Int32': function (v) { return JSON.parse(v); },\r\n        '$data.Byte': function (v) { return JSON.parse(v); },\r\n        '$data.SByte': function (v) { return JSON.parse(v); },\r\n        '$data.Decimal': function (v) {\r\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('m') === v.length - 1) {\r\n                return v.substr(0, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Float': function (v) {\r\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('f') === v.length - 1) {\r\n                return v.substr(0, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Int16': function (v) { return JSON.parse(v); },\r\n        '$data.Int64': function (v) {\r\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('l') === v.length - 1) {\r\n                return v.substr(0, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Boolean': function (v) { return JSON.parse(v); },\r\n        '$data.Date': function (v) {\r\n            if (typeof v === 'string' && /^datetime'/.test(v)) {\r\n                return v.slice(9, v.length - 1);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.String': function (v) {\r\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\r\n                return v.slice(1, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.ObjectID': function (v) {\r\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\r\n                return v.slice(1, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Guid': function (v) {\r\n            if (/^guid'\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'$/.test(v)) {\r\n                var data = v.slice(5, v.length - 1)\r\n                return $data.parseGuid(data).toString();\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Array': function (v, c) {\r\n            var config = c || {};\r\n\r\n            var value = JSON.parse(v) || [];\r\n            if (value && config.elementType) {\r\n                var type = Container.resolveType(config.elementType);\r\n                var typeName = Container.resolveName(type);\r\n                if (type && type.isAssignableTo && type.isAssignableTo($data.Entity)) {\r\n                    typeName = $data.Entity.fullName;\r\n                }\r\n\r\n                if (Array.isArray(value)) {\r\n                    var converter = $data.oDataConverter.unescape[typeName];\r\n                    for (var i = 0; i < value.length; i++) {\r\n                        value[i] = converter ? converter(value[i]) : value[i];\r\n                    }\r\n                }\r\n                return value;\r\n            }\r\n            return value;\r\n        },\r\n        '$data.DateTimeOffset': function (v) {\r\n            if (typeof v === 'string' && /^datetimeoffset'/.test(v)) {\r\n                return $data.Container.convertTo(v.slice(15, v.length - 1), $data.DateTimeOffset);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Time': function (v) {\r\n            if (typeof v === 'string' && /^time'/.test(v)) {\r\n                return $data.Container.convertTo(v.slice(5, v.length - 1), $data.Time);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Blob': function(v){\r\n            if (typeof v === 'string'){\r\n                if (/^X'/.test(v)){\r\n                    return $data.Blob.createFromHexString(v.slice(2, v.length - 1));\r\n                }else if (/^binary'/.test(v)){\r\n                    return $data.Blob.createFromHexString(v.slice(7, v.length - 1));\r\n                }\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Object': function (v) { return JSON.parse(v); },\r\n        '$data.GeographyPoint': function (v) {\r\n            if (/^geography'POINT\\(/i.test(v)) {\r\n                var data = v.slice(10, v.length - 1);\r\n                return $data.GeographyBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeographyPolygon': function (v) {\r\n            if (/^geography'POLYGON\\(/i.test(v)) {\r\n                var data = v.slice(10, v.length - 1);\r\n                return $data.GeographyBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeometryPoint': function (v) {\r\n            if (/^geometry'POINT\\(/i.test(v)) {\r\n                var data = v.slice(9, v.length - 1);\r\n                return $data.GeometryBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeometryPolygon': function (v) {\r\n            if (/^geometry'POLYGON\\(/i.test(v)) {\r\n                var data = v.slice(9, v.length - 1);\r\n                return $data.GeometryBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        }\r\n    },\r\n    xmlEscape: {\r\n        '$data.Byte': function (v) { return v.toString(); },\r\n        '$data.SByte': function (v) { return v.toString(); },\r\n        '$data.Decimal': function (v) { return v.toString(); },\r\n        '$data.Float': function (v) { return v.toString(); },\r\n        '$data.Int16': function (v) { return v.toString(); },\r\n        '$data.Int64': function (v) { return v.toString(); },\r\n        '$data.Integer': function (v) { return v.toString(); },\r\n        '$data.Int32': function (v) { return v.toString(); },\r\n        '$data.Boolean': function (v) { return v.toString(); },\r\n        '$data.Blob': function (v) { return $data.Blob.toBase64(v); },\r\n        '$data.Date': function (v) { return v.toISOString().replace('Z', ''); },\r\n        '$data.DateTimeOffset': function(v){ return v.toISOString(); },\r\n        '$data.Time': function (v) { return v.toString(); },\r\n        '$data.Number': function (v) { return v.toString(); },\r\n        '$data.Integer': function (v) { return v.toString(); },\r\n        '$data.Int32': function (v) { return v.toString(); },\r\n        '$data.String': function (v) { return v.toString(); },\r\n        '$data.ObjectID': function (v) { return v.toString(); },\r\n        '$data.Object': function (v) { return JSON.stringify(v); },\r\n        '$data.Guid': function (v) { return v.toString(); }/*,\r\n        '$data.GeographyPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n        '$data.GeometryPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); },\r\n        '$data.GeographyLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n        '$data.GeometryLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); }*/\r\n    },\r\n    simple: { //$value, $count\r\n        '$data.Byte': function (v) { return v.toString(); },\r\n        '$data.SByte': function (v) { return v.toString(); },\r\n        '$data.Decimal': function (v) { return v.toString(); },\r\n        '$data.Float': function (v) { return v.toString(); },\r\n        '$data.Int16': function (v) { return v.toString(); },\r\n        '$data.Int64': function (v) { return v.toString(); },\r\n        '$data.ObjectID': function (o) { return o.toString(); },\r\n        '$data.Integer': function (o) { return o.toString(); },\r\n        '$data.Int32': function (o) { return o.toString(); },\r\n        '$data.Number': function (o) { return o.toString(); },\r\n        '$data.Date': function (o) { return o instanceof $data.Date ? o.toISOString().replace('Z', '') : o.toString() },\r\n        '$data.DateTimeOffset': function(v){ return v ? v.toISOString() : v; },\r\n        '$data.Time': function (o) { return o.toString(); },\r\n        '$data.String': function (o) { return o.toString(); },\r\n        '$data.Boolean': function (o) { return o.toString(); },\r\n        '$data.Blob': function (o) { return o; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.Guid': function (o) { return o.toString(); },\r\n        '$data.GeographyPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyCollection': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryCollection': function (o) { return JSON.stringify(o); }\r\n    }\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oDataV3.oDataOrderCompiler', $data.storageProviders.oDataV3.oDataWhereCompiler, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        var orderContext = { data: \"\" };\r\n        this.Visit(expression.selector, orderContext);\r\n        if (context['$orderby']) { context['$orderby'] += ','; } else { context['$orderby'] = ''; }\r\n        context['$orderby'] += orderContext.data\r\n                           + (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n        context.data += \"/\";\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.source, context);\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName + '/';\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (index > 0) {\r\n                context.data += \",\";\r\n            };\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitEntityFunctionOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        this.Visit(expression.source, context);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.method.params || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        var i = 0;\r\n        args.forEach(function (arg, index) {\r\n            if (arg === undefined || (arg instanceof $data.Expressions.ConstantExpression && typeof arg.value === 'undefined'))\r\n                return;\r\n\r\n            if (i > 0) {\r\n                context.data += \",\";\r\n            };\r\n            i++;\r\n            context.data += params[index].name + '=';\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitContextFunctionOperationExpression: function (expression, context) {\r\n        return this.VisitEntityFunctionOperationExpression(expression, context);\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oDataV3.oDataPagingCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var pagingContext = { data: \"\" };\r\n        this.Visit(expression.amount, pagingContext);\r\n        switch (expression.nodeType) {\r\n            case $data.Expressions.ExpressionType.Skip: context['$skip'] = pagingContext.data; break;\r\n            case $data.Expressions.ExpressionType.Take: context['$top'] = pagingContext.data; break;\r\n            default: Guard.raise(\"Not supported nodeType\"); break;\r\n        }\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n        var converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(expression.value) : expression.value;\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oDataV3.oDataProjectionCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n        this.hasObjectLiteral = false;\r\n        this.ObjectLiteralPath = \"\";\r\n        this.modelBinderMapping = [];\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        context.data = \"\";\r\n        this.mapping = \"\";\r\n\r\n        this.Visit(expression.selector, context);\r\n        if (context['$select']) { context['$select'] += ','; } else { context['$select'] = ''; }\r\n        context[\"$select\"] += context.data;\r\n        context.data = \"\";\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\r\n        this.hasObjectLiteral = true;\r\n        expression.members.forEach(function (member, index) {\r\n            this.Visit(member, context);\r\n            if (index < expression.members.length - 1) { context.data += ','; }\r\n            this.mapping = '';\r\n        }, this);\r\n        this.ObjectLiteralPath = tempObjectLiteralPath;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n\r\n\r\n        if (this.ObjectLiteralPath) { this.ObjectLiteralPath += '.' + expression.fieldName; } else { this.ObjectLiteralPath = expression.fieldName; }\r\n        this.Visit(expression.expression, context);\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    \r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        this.Visit(expression.source, context);\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, context);\r\n        }\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.memberName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.memberName;\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\r\n        //context.data += expression.value;\r\n\t\tcontext.data = context.data.slice(0, context.data.length - 1);\r\n    }\r\n});","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\nvar datajsPatch;\r\ndatajsPatch = function (OData) {\r\n    // just datajs-1.1.0\r\n    if (OData && OData.jsonHandler && 'useJsonLight' in OData.jsonHandler && typeof datajs === 'object' && !datajs.version) {\r\n        $data.Trace.log('!!!!!!! - patch datajs 1.1.0');\r\n        var oldread = OData.defaultHandler.read;\r\n        OData.defaultHandler.read = function (p, context) {\r\n            delete context.contentType;\r\n            delete context.dataServiceVersion;\r\n\r\n            oldread.apply(this, arguments);\r\n        };\r\n        var oldwrite = OData.defaultHandler.write;\r\n        OData.defaultHandler.write = function (p, context) {\r\n            delete context.contentType;\r\n            delete context.dataServiceVersion;\r\n\r\n            oldwrite.apply(this, arguments);\r\n        };\r\n    }\r\n    datajsPatch = function () { };\r\n}\r\n\r\n$C('$data.storageProviders.oDataV3.oDataProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, ctx) {\r\n        this.SqlCommands = [];\r\n        this.context = ctx;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            dbCreation: $data.storageProviders.DbCreationType.DropTableIfChanged,\r\n            oDataServiceHost: \"/odata.svc\",\r\n            serviceUrl: \"\",\r\n            maxDataServiceVersion: '2.0',\r\n            dataServiceVersion: undefined,\r\n            setDataServiceVersionToMax: true,\r\n            user: null,\r\n            password: null,\r\n            withCredentials: false,\r\n            //enableJSONP: undefined,\r\n            //useJsonLight: undefined\r\n            //disableBatch: undefined\r\n            UpdateMethod: 'PATCH'\r\n        }, cfg);\r\n\r\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n            if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n                Guard.raise(new Exception('odatajs is required', 'Not Found!'));\r\n            } else {\r\n                this.oData = odatajs.oData\r\n            }\r\n        } else {\r\n            if (typeof OData === 'undefined') {\r\n                Guard.raise(new Exception('datajs is required', 'Not Found!'));\r\n            } else {\r\n                this.oData = OData;\r\n                datajsPatch(this.oData);\r\n            }\r\n        }\r\n\r\n        this.fixkDataServiceVersions(cfg);\r\n\r\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\r\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\r\n        }\r\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\r\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\r\n        }\r\n    },\r\n    fixkDataServiceVersions: function (cfg) {\r\n        if (this.providerConfiguration.dataServiceVersion > this.providerConfiguration.maxDataServiceVersion) {\r\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n\r\n        if (this.providerConfiguration.setDataServiceVersionToMax === true) {\r\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n\r\n        if ((cfg && !cfg.UpdateMethod && this.providerConfiguration.dataServiceVersion < '3.0') || !this.providerConfiguration.dataServiceVersion) {\r\n            this.providerConfiguration.UpdateMethod = 'MERGE';\r\n        }\r\n    },\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n        switch (this.providerConfiguration.dbCreation) {\r\n            case $data.storageProviders.DbCreationType.DropAllExistingTables:\r\n                var that = this;\r\n                if (this.providerConfiguration.serviceUrl) {\r\n\r\n                    var requestData = [{\r\n                        requestUri: that.providerConfiguration.serviceUrl + \"/Delete\",\r\n                        method: 'POST'\r\n                    }, function (d) {\r\n                        //console.log(\"RESET oData database\");\r\n                        callBack.success(that.context);\r\n                    }, function (error) {\r\n                        callBack.success(that.context);\r\n                    }];\r\n\r\n                    this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n                    //if (this.providerConfiguration.user) {\r\n                    //    requestData[0].user = this.providerConfiguration.user;\r\n                    //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n                    //}\r\n\r\n                    this.context.prepareRequest.call(this, requestData);\r\n                    this.oData.request.apply(this, requestData);\r\n                } else {\r\n                    callBack.success(that.context);\r\n                }\r\n                break;\r\n            default:\r\n                callBack.success(this.context);\r\n                break;\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel, context) {\r\n        return function (logicalEntity, convertedItems) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                dbInstance.initData[property.name] = logicalEntity[property.name];\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") ||\r\n                        (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") ||\r\n                        (association.FromMultiplicity == '$$unbound')) {\r\n                        var refValue = logicalEntity[association.FromPropertyName];\r\n                        if (/*refValue !== null &&*/ refValue !== undefined) {\r\n                            if (refValue instanceof $data.Array) {\r\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\r\n                                refValue.forEach(function (rv) {\r\n                                    if (rv.entityState == $data.EntityState.Modified || convertedItems.indexOf(rv) < 0) {\r\n                                        var sMod = context._storageModel.getStorageModel(rv.getType())\r\n                                        var tblName = sMod.TableName;\r\n                                        var pk = '(' + context.storageProvider.getEntityKeysValue({ data: rv, entitySet: context.getEntitySetFromElementType(rv.getType()) }) + ')';\r\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: tblName + pk } });\r\n                                    } else {\r\n                                        var contentId = convertedItems.indexOf(rv);\r\n                                        if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\r\n                                    }\r\n                                }, this);\r\n                            } else if (refValue === null) {\r\n                                dbInstance.initData[association.FromPropertyName] = null;\r\n                            } else {\r\n                                if (refValue.entityState == $data.EntityState.Modified || convertedItems.indexOf(refValue) < 0) {\r\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType())\r\n                                    var tblName = sMod.TableName;\r\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\r\n                                } else {\r\n                                    var contentId = convertedItems.indexOf(refValue);\r\n                                    if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n    buildDbType_modifyInstanceDefinition: function () { return; },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n\r\n        var sql = {};\r\n        try {\r\n            sql = this._compile(query);\r\n        } catch (e) {\r\n            callBack.error(e);\r\n            return;\r\n        }\r\n        var schema = this.context;\r\n\r\n        var that = this;\r\n        var countProperty = \"__count\";\r\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n            countProperty = \"@odata.count\";\r\n        }\r\n\r\n        var requestData = [\r\n            {\r\n                requestUri: this.providerConfiguration.oDataServiceHost + sql.queryText,\r\n                method: sql.method,\r\n                data: sql.postData,\r\n                headers: {\r\n                }\r\n            },\r\n            function (data, textStatus, jqXHR) {\r\n\r\n                if (!data && textStatus.body && !sql.isBatchExecuteQuery) data = JSON.parse(textStatus.body);\r\n                if (callBack.success) {\r\n                    var processSuccess = function (query, data, sql) {\r\n                        query.rawDataList = typeof data === 'string' ? [{ cnt: Container.convertTo(data, $data.Integer) }] : data;\r\n                        if (sql.withInlineCount && typeof data === 'object' && (typeof data[countProperty] !== 'undefined' || ('d' in data && typeof data.d[countProperty] !== 'undefined'))) {\r\n                            query.__count = new Number(typeof data[countProperty] !== 'undefined' ? data[countProperty] : data.d[countProperty]).valueOf();\r\n                        }\r\n                    }\r\n\r\n                    if (sql.isBatchExecuteQuery) {\r\n                        query.rawDataList = sql.subQueries;\r\n                        for (var i = 0; i < data.__batchResponses.length; i++) {\r\n                            var resp = data.__batchResponses[i];\r\n                            \r\n                            if (!resp.data) {\r\n                                if (resp.body) {\r\n                                    resp.data = JSON.parse(resp.body);\r\n                                } else {\r\n                                    callBack.error(that.parseError(resp, arguments));\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            processSuccess(sql.subQueries[i], resp.data, sql.subQueries[i]._getComplitedData());\r\n                        }\r\n                    } else {\r\n                        processSuccess(query, data, sql);\r\n                    }\r\n\r\n                    callBack.success(query);\r\n                }\r\n            },\r\n            function (error) {\r\n                callBack.error(that.parseError(error, arguments));\r\n            },\r\n            sql.isBatchExecuteQuery ? this.oData.batchHandler : undefined\r\n        ];\r\n\r\n        if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n            requestData[0].headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n\r\n        if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n            requestData[0].headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\r\n        }\r\n\r\n        if (typeof this.providerConfiguration.enableJSONP !== 'undefined') {\r\n            requestData[0].enableJsonpCallback = this.providerConfiguration.enableJSONP;\r\n        }\r\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\r\n        }\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        //$data.ajax(requestData);\r\n        //OData.request(requestData, requestData.success, requestData.error);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    _compile: function (queryable, params) {\r\n        var compiler = new $data.storageProviders.oDataV3.oDataCompiler();\r\n        var compiled = compiler.compile(queryable);\r\n        return compiled;\r\n    },\r\n    saveChanges: function (callBack, changedItems) {\r\n        if (changedItems.length > 0) {\r\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\r\n            this.saveInternal(independentBlocks, 0, callBack);\r\n        }\r\n        else {\r\n            callBack.success(0);\r\n        }\r\n    },\r\n    saveInternal: function (independentBlocks, index2, callBack) {\r\n        if ((this.providerConfiguration.disableBatch === true || (typeof $data.defaults === 'object' && $data.defaults.disableBatch === true))\r\n            && typeof this._saveRestMany === 'function')\r\n        {\r\n            this._saveRestMany(independentBlocks, index2, callBack);\r\n        } else {\r\n            if (independentBlocks.length > 1 || (independentBlocks.length == 1 && independentBlocks[0].length > 1)) {\r\n                this._saveBatch(independentBlocks, index2, callBack);\r\n            } else {\r\n                this._saveRest(independentBlocks, index2, callBack);\r\n            }\r\n        }\r\n    },\r\n    _saveRest: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        var request;\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                request = {\r\n                    requestUri: this.providerConfiguration.oDataServiceHost + '/',\r\n                    headers: {\r\n                    }\r\n                };\r\n                if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n                }\r\n                if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n                    request.headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\r\n                }\r\n                if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n                    request.useJsonLight = this.providerConfiguration.useJsonLight;\r\n                }\r\n\r\n                //request.headers = { \"Content-Id\": convertedItem.length };\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.method = \"POST\";\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.method = this.providerConfiguration.UpdateMethod;\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.method = \"DELETE\";\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n                //batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        var requestData = [request, function (data, response) {\r\n            if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                var item = convertedItem[0];\r\n                if (response.statusCode == 204) {\r\n                    if (response.headers.ETag || response.headers.Etag || response.headers.etag) {\r\n                        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                        if (property && property[0]) {\r\n                            item[property[0].name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\r\n                        }\r\n                    }\r\n                } else {\r\n                    that.reload_fromResponse(item, data, response);\r\n                }\r\n\r\n                if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(that.parseError(response));\r\n            }\r\n\r\n        }, function (e) {\r\n            callBack.error(that.parseError(e));\r\n        }];\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    _saveBatch: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                var request = {};\r\n                request.headers = {\r\n                    \"Content-Id\": convertedItem.length\r\n                };\r\n                if (this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\r\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n                }\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.method = \"POST\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.method = this.providerConfiguration.UpdateMethod;\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.method = \"DELETE\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n\r\n                if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n                    request.headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n                }\r\n                if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion !== \"4.0\") {\r\n                    request.headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\r\n                }\r\n                batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        var requestData = [{\r\n            requestUri: this.providerConfiguration.oDataServiceHost + \"/$batch\",\r\n            method: \"POST\",\r\n            data: {\r\n                __batchRequests: [{ __changeRequests: batchRequests }]\r\n            },\r\n            headers: {\r\n            }\r\n        }, function (data, response) {\r\n            if (response.statusCode == 202) {\r\n                var result = data.__batchResponses[0].__changeResponses;\r\n                var errors = [];\r\n\r\n                for (var i = 0; i < result.length; i++) {\r\n                    if (result[i].statusCode >= 200 && result[i].statusCode < 300) {\r\n                        var item = convertedItem[i];\r\n                        if (result[i].statusCode == 204) {\r\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\r\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                                if (property && property[0]) {\r\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\r\n                                }\r\n                            }\r\n                            continue;\r\n                        }\r\n\r\n                        that.reload_fromResponse(item, result[i].data, result[i]);\r\n                    } else {\r\n                        errors.push(that.parseError(result[i]));\r\n                    }\r\n                }\r\n                if (errors.length > 0) {\r\n                    if (errors.length === 1) {\r\n                        callBack.error(errors[0]);\r\n                    } else {\r\n                        callBack.error(new Exception('See inner exceptions', 'Batch failed', errors));\r\n                    }\r\n                } else if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(that.parseError(response));\r\n            }\r\n\r\n        }, function (e) {\r\n            callBack.error(that.parseError(e));\r\n        }, this.oData.batchHandler];\r\n\r\n        if (this.providerConfiguration.maxDataServiceVersion && this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\r\n            requestData[0].headers.MaxDataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n        if (this.providerConfiguration.dataServiceVersion && this.providerConfiguration.maxDataServiceVersion != \"4.0\") {\r\n            requestData[0].headers.DataServiceVersion = this.providerConfiguration.dataServiceVersion;\r\n        }\r\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\r\n        }\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    reload_fromResponse: function (item, data, response) {\r\n        var that = this;\r\n        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            var propType = Container.resolveType(memDef.type);\r\n            if (memDef.computed || memDef.key || !memDef.inverseProperty) {\r\n                if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                    //unescape?\r\n                    item[memDef.name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\r\n\r\n                } else if (memDef.isAssignableTo) {\r\n                    if (data[memDef.name]) {\r\n                        item[memDef.name] = new propType(data[memDef.name], { converters: that.fieldConverter.fromDb });\r\n                    } else {\r\n                        item[memDef.name] = data[memDef.name]\r\n                    }\r\n\r\n                } else if (propType === $data.Array && memDef.elementType) {\r\n                    var aeType = Container.resolveType(memDef.elementType);\r\n                    if (data[memDef.name] && Array.isArray(data[memDef.name])) {\r\n                        var arrayProperty = [];\r\n                        for (var ap = 0; ap < data[memDef.name].length; ap++) {\r\n                            var aitem = data[memDef.name][ap];\r\n                            if (aeType.isAssignableTo && !Object.isNullOrUndefined(aitem)) {\r\n                                arrayProperty.push(new aeType(aitem, { converters: that.fieldConverter.fromDb }));\r\n                            } else {\r\n                                var etypeName = Container.resolveName(aeType);\r\n                                var econverter = that.fieldConverter.fromDb[etypeName];\r\n\r\n                                arrayProperty.push(econverter ? econverter(aitem) : aitem);\r\n                            }\r\n                        }\r\n                        item[memDef.name] = arrayProperty;\r\n                    } else if (!data[memDef.name]) {\r\n                        item[memDef.name] = data[memDef.name]\r\n                    }\r\n\r\n                } else {\r\n                    var typeName = Container.resolveName(memDef.type);\r\n                    var converter = that.fieldConverter.fromDb[typeName];\r\n\r\n                    item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    //save_getInitData: function (item, convertedItems) {\r\n    //    var self = this;\r\n    //    item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\r\n    //    var serializableObject = {}\r\n    //    item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\r\n    //        if (memdef.kind == $data.MemberTypes.navProperty || memdef.kind == $data.MemberTypes.complexProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\r\n    //            if (typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))) {\r\n    //                var typeName = Container.resolveName(memdef.type);\r\n    //                var converter = self.fieldConverter.toDb[typeName];\r\n    //                serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    return serializableObject;\r\n    //},\r\n    save_getInitData: function (item, convertedItems, isComplex, isDeep) {\r\n        var self = this;\r\n        if (!isComplex) {\r\n            item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\r\n        } else {\r\n            item.physicalData = item.data;\r\n        }\r\n        var serializableObject = {}\r\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\r\n            if (memdef.kind == $data.MemberTypes.complexProperty && item.physicalData[memdef.name]) {\r\n                serializableObject[memdef.name] = self.save_getInitData({ data: item.physicalData[memdef.name] }, convertedItems, true, true);\r\n            }\r\n            else if (memdef.kind == $data.MemberTypes.navProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\r\n                if (isDeep || typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || (item.data.changedProperties && item.data.changedProperties.some(function (def) { return def.name === memdef.name; })))) {\r\n\r\n                    if (memdef.kind == $data.MemberTypes.navProperty && item.physicalData[memdef.name] && this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n                        serializableObject[memdef.name + \"@odata.bind\"] = item.physicalData[memdef.name].__metadata.uri;\r\n                    } else {\r\n                        var typeName = Container.resolveName(memdef.type);\r\n                        var converter = self.fieldConverter.toDb[typeName];\r\n                        serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\r\n                    }\r\n                }\r\n            }\r\n        }, this);\r\n        return serializableObject;\r\n    },\r\n    save_addConcurrencyHeader: function (item, headers) {\r\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n        if (property && property[0]) {\r\n            headers['If-Match'] = item.data[property[0].name];\r\n            //item.data[property[0].name] = \"\";\r\n        }\r\n    },\r\n    getTraceString: function (queryable) {\r\n        var sqlText = this._compile(queryable);\r\n        return queryable;\r\n    },\r\n    supportedDataTypes: {\r\n        value: [$data.Array, $data.Integer, $data.String, $data.Number, $data.Blob, $data.Boolean, $data.Date, $data.Object, $data.GeographyPoint, $data.Guid,\r\n            $data.GeographyLineString, $data.GeographyPolygon, $data.GeographyMultiPoint, $data.GeographyMultiLineString, $data.GeographyMultiPolygon, $data.GeographyCollection,\r\n            $data.GeometryPoint, $data.GeometryLineString, $data.GeometryPolygon, $data.GeometryMultiPoint, $data.GeometryMultiLineString, $data.GeometryMultiPolygon, $data.GeometryCollection,\r\n            $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.DateTimeOffset],\r\n        writable: false\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            divide: { mapTo: 'div', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            multiply: { mapTo: 'mul', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            subtract: { mapTo: 'sub', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            modulo: { mapTo: 'mod', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            \"in\": { mapTo: \"in\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        }\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            /* string functions */\r\n\r\n            contains: {\r\n                mapTo: \"substringof\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\r\n            },\r\n\r\n            startsWith: {\r\n                mapTo: \"startswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            endsWith: {\r\n                mapTo: \"endswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            length: [{\r\n                allowedType: 'string',\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n            {\r\n                allowedType: 'GeographyLineString',\r\n                mapTo: \"geo.length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: ['GeographyLineString'] }],\r\n                fixedDataType: 'decimal'\r\n            },\r\n            {\r\n                allowedType: 'GeometryLineString',\r\n                mapTo: \"geo.length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryLineString' }],\r\n                fixedDataType: 'decimal'\r\n            }],\r\n\r\n            strLength: {\r\n                mapTo: \"length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            indexOf: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                mapTo: \"indexof\",\r\n                baseIndex: 1,\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\r\n            },\r\n\r\n            replace: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\r\n            },\r\n\r\n            substr: {\r\n                mapTo: \"substring\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\r\n            },\r\n\r\n            toLowerCase: {\r\n                mapTo: \"tolower\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            toUpperCase: {\r\n                mapTo: \"toupper\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n\r\n            },\r\n\r\n            trim: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            concat: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            /* data functions */\r\n\r\n            day: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            hour: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            minute: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            month: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            second: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            year: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n\r\n            /* number functions */\r\n            round: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            floor: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            ceiling: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n\r\n\r\n            /* geo functions */\r\n            distance: [{\r\n                allowedType: 'GeographyPoint',\r\n                mapTo: \"geo.distance\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"to\", dataType: 'GeographyPoint' }],\r\n                fixedDataType: 'decimal'\r\n            }, {\r\n                allowedType: 'GeometryPoint',\r\n                mapTo: \"geo.distance\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"to\", dataType: 'GeometryPoint' }],\r\n                fixedDataType: 'decimal'\r\n            }],\r\n\r\n            intersects: [{\r\n                allowedType: 'GeographyPoint',\r\n                mapTo: \"geo.intersects\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"in\", dataType: 'GeographyPolygon' }]\r\n\r\n            }, {\r\n                allowedType: 'GeometryPoint',\r\n                mapTo: \"geo.intersects\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"in\", dataType: 'GeometryPolygon' }]\r\n\r\n            }]\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            some: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'any',\r\n                frameType: $data.Expressions.SomeExpression\r\n            },\r\n            every: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'all',\r\n                frameType: $data.Expressions.EveryExpression\r\n            },\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {},\r\n            include: {},\r\n            batchDelete: {},\r\n            withInlineCount: {},\r\n            find: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedContextOperation: {\r\n        value: {\r\n            batchExecuteQuery: true\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    fieldConverter: { value: $data.oDataConverterV3 },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        var memDef = expression.entityType.getMemberDefinition(operation);\r\n        if (!memDef ||\r\n            !memDef.method ||\r\n            memDef.method.IsSideEffecting !== false ||\r\n            !memDef.method.returnType ||\r\n            !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression))\r\n        {\r\n            Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n        }\r\n\r\n        return memDef;\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        if (expression) {\r\n            var esDef = expression.storageModel.ContextType.getMemberDefinition(expression.storageModel.ItemName);\r\n            if (esDef && esDef.actions && esDef.actions[operation]) {\r\n                var memDef = $data.MemberDefinition.translateDefinition(esDef.actions[operation], operation, this.getType());\r\n                if (!memDef ||\r\n                    !memDef.method ||\r\n                    memDef.method.IsSideEffecting !== false ||\r\n                    !memDef.method.returnType ||\r\n                    !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression)) {\r\n\r\n                    Guard.raise(new Exception(\"Collection '\" + expression.storageModel.ItemName + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n                }\r\n\r\n                return memDef;\r\n            }\r\n        }\r\n        return $data.StorageProviderBase.prototype.resolveSetOperations.apply(this, arguments);\r\n\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        var memDef = this.context.getType().getMemberDefinition(operation);\r\n        if (!memDef ||\r\n            !memDef.method ||\r\n            memDef.method.IsSideEffecting !== false ||\r\n            !memDef.method.returnType ||\r\n            !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression)) {\r\n            Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n        }\r\n        return memDef;\r\n    },\r\n\r\n    getEntityKeysValue: function (entity) {\r\n        var result = [];\r\n        var keyValue = undefined;\r\n        var memDefs = entity.data.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0, l = memDefs.length; i < l; i++) {\r\n            var field = memDefs[i];\r\n            if (field.key) {\r\n                keyValue = entity.data[field.name];\r\n                var typeName = Container.resolveName(field.type);\r\n\r\n                var converter = this.fieldConverter.toDb[typeName];\r\n                keyValue = converter ? converter(keyValue) : keyValue;\r\n\r\n                converter = this.fieldConverter.escape[typeName];\r\n                keyValue = converter ? converter(keyValue) : keyValue;\r\n\r\n                result.push(field.name + \"=\" + keyValue);\r\n            }\r\n        }\r\n        if (result.length > 1) {\r\n            return result.join(\",\");\r\n        }\r\n        return keyValue;\r\n    },\r\n    getFieldUrl: function (entity, fieldName, entitySet) {\r\n        var keyPart = this.getEntityKeysValue({ data: entity });\r\n        var servicehost = this.providerConfiguration.oDataServiceHost\r\n        if (servicehost.lastIndexOf('/') === servicehost.length)\r\n            servicehost = servicehost.substring(0, servicehost.length - 1);\r\n\r\n        return servicehost + '/' + entitySet.tableName + '(' + keyPart + ')/' + fieldName + '/$value';\r\n    },/*\r\n    getServiceMetadata: function () {\r\n        $data.ajax(this._setAjaxAuthHeader({\r\n            url: this.providerConfiguration.oDataServiceHost + \"/$metadata\",\r\n            dataType: \"xml\",\r\n            success: function (d) {\r\n                console.log(\"OK\");\r\n                console.dir(d);\r\n                console.log(typeof d);\r\n                window[\"s\"] = d;\r\n                window[\"k\"] = this.nsResolver;\r\n                //s.evaluate(\"edmx:Edmx/edmx:DataServices/Schema\", s, $data.storageProviders.oData.oDataProvider.prototype.nsResolver, XPathResult.ANY_TYPE, null).iterateNext()\r\n\r\n            },\r\n            error: function (error) {\r\n                console.log(\"error:\");\r\n                console.dir(error);\r\n            }\r\n        }));\r\n    },\r\n    nsResolver: function (sPrefix) {\r\n        switch (sPrefix) {\r\n            case \"edmx\":\r\n                return \"http://schemas.microsoft.com/ado/2007/06/edmx\";\r\n                break;\r\n            case \"m\":\r\n                return \"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\";\r\n                break;\r\n            case \"d\":\r\n                return \"http://schemas.microsoft.com/ado/2007/08/dataservices\";\r\n                break;\r\n            default:\r\n                return \"http://schemas.microsoft.com/ado/2008/09/edm\";\r\n                break;\r\n        }\r\n    }\r\n    */\r\n    parseError: function(error, data){\r\n\r\n        var message = (error.response || error || {}).body || '';\r\n        try {\r\n            if(message.indexOf('{') === 0){\r\n                var errorObj = JSON.parse(message);\r\n                errorObj = errorObj['odata.error'] || errorObj.error || errorObj;\r\n                if (errorObj.message) {\r\n                    message = errorObj.message.value || errorObj.message;\r\n                }\r\n            }\r\n        } catch (e) {}\r\n\r\n        return new Exception(message, error.message, data || error);\r\n    },\r\n    appendBasicAuth: function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials){\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\n$data.StorageProviderBase.registerProvider(\"oDataV3\", $data.storageProviders.oDataV3.oDataProvider);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oDataV3.oDataWhereCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider, lambdaPrefix) {\r\n        this.provider = provider;\r\n        this.lambdaPrefix = lambdaPrefix;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, context) {\r\n        context.data += expression.resolution.mapTo;\r\n        context.data += \"(\";\r\n        this.Visit(expression.operand, context);\r\n        context.data += \")\";\r\n    },\r\n\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        context.data += \"(\";\r\n        //TODO refactor!!!\r\n        if (expression.nodeType == \"in\") {\r\n            Guard.requireType(\"expression.right\", expression.type, $data.Expressions.ConstantExpression);\r\n            var paramValue = expression.right.value;\r\n            if (!paramValue instanceof Array) { Guard.raise(new Exception(\"Right to the 'in' operator must be an array value\")); }\r\n            var result = null;\r\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\r\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\r\n\r\n            paramValue.forEach(function (item) {\r\n                var idValue = item;\r\n                var idCheck = Container.createSimpleBinaryExpression(expression.left, idValue,\r\n                    $data.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\r\n                if (result) {\r\n                    result = Container.createSimpleBinaryExpression(result, idCheck,\r\n                    $data.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\r\n                } else {\r\n                    result = idCheck;\r\n                };\r\n            });\r\n            var temp = context.data;\r\n            context.data = '';\r\n            this.Visit(result, context);\r\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\r\n        } else {\r\n            this.Visit(expression.left, context);\r\n            context.data += \" \";\r\n            context.data += expression.resolution.mapTo;\r\n            context.data += \" \";\r\n            this.Visit(expression.right, context);\r\n        };\r\n        context.data += \")\";\r\n\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.source instanceof $data.Expressions.ComplexTypeExpression) {\r\n            context.data += \"/\";\r\n        }\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n    },\r\n\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    },\r\n\r\n    VisitQueryParameterExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (index > 0) {\r\n                context.data += \",\";\r\n            };\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitEntityFunctionOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        this.Visit(expression.source, context);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.method.params || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n        var i = 0;\r\n        args.forEach(function (arg, index) {\r\n            if (arg === undefined || (arg instanceof $data.Expressions.ConstantExpression && typeof arg.value === 'undefined'))\r\n                return;\r\n\r\n            if (i > 0) {\r\n                context.data += \",\";\r\n            };\r\n            i++;\r\n            context.data += params[index].name + '=';\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitContextFunctionOperationExpression: function (expression, context) {\r\n        return this.VisitEntityFunctionOperationExpression(expression, context);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        if (this.lambdaPrefix && expression.selector.lambda) {\r\n            context.lambda = expression.selector.lambda;\r\n            context.data += (expression.selector.lambda + '/');\r\n        }\r\n\r\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\r\n        //    this.Visit(expression.selector, context);\r\n        //}\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n            context.data += \"/\";\r\n        }\r\n    },\r\n\r\n    VisitFrameOperationExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            if (arg && arg.value instanceof $data.Queryable) {\r\n                var frameExpression = new opDef.frameType(arg.value.expression);\r\n                var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                var prep_expression = preparator.Visit(frameExpression);\r\n\r\n                var compiler = new $data.storageProviders.oDataV3.oDataWhereCompiler(this.provider, true);\r\n                var frameContext = { data: \"\" };\r\n                var compiled = compiler.compile(prep_expression, frameContext);\r\n\r\n                context.data += (frameContext.lambda + ': ' + frameContext.data);\r\n            };\r\n        }\r\n        context.data += \")\";\r\n    }\r\n});"],"sourceRoot":"/source/"}