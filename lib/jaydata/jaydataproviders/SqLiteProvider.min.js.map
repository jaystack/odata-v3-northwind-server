{"version":3,"sources":["node_modules/browser-pack/_prelude.js","SqLiteProvider.js","src/Types/DbClient/DbCommand.js","src/Types/DbClient/DbConnection.js","src/Types/DbClient/JayStorageClient/JayStorageCommand.js","src/Types/DbClient/JayStorageClient/JayStorageConnection.js","src/Types/DbClient/OpenDatabaseClient/OpenDbCommand.js","src/Types/DbClient/OpenDatabaseClient/OpenDbConnection.js","src/Types/DbClient/SqLiteNjClient/SqLiteNjCommand.js","src/Types/DbClient/SqLiteNjClient/SqLiteNjConnection.js","src/Types/StorageProviders/SqLite/ModelBinder/sqLite_ModelBinderCompiler.js","src/Types/StorageProviders/SqLite/SqLiteCompiler.js","src/Types/StorageProviders/SqLite/SqLiteConverter.js","src/Types/StorageProviders/SqLite/SqLiteStorageProvider.js","src/Types/StorageProviders/SqLite/SqlExpressionMonitor.js","src/Types/StorageProviders/SqLite/SqlFilterCompiler.js","src/Types/StorageProviders/SqLite/SqlOrderCompiler.js","src/Types/StorageProviders/SqLite/SqlPagingCompiler.js","src/Types/StorageProviders/SqLite/SqlProjectionCompiler.js","src/Types/StorageProviders/SqLite/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","_core","_core2","Class","connection","parameters","execute","callback","Guard","raise","jaydata/core","2","connectionParams","database","isOpen","open","close","createCommand","3","dbClient","DbCommand","constructor","con","queryStr","params","query","executeNonQuery","PromiseHandlerBase","createCallbackSettings","exec","success","error","executeQuery","errorhandler","undefined","single","Array","results","remainingCommands","decClb","forEach","q","ajax","url","storage","ssl","src","replace","key","type","headers","X-PINGOTHER","data","dataType","contentType","console","log","lastID","insertId","rows","4","DbConnection","cmd","jayStorageClient","JayStorageCommand","5","tran","isWrite","transaction","executeSql","trx","result","rowsAffected","maxItem","j","push","item","err","6","callBack","oncomplete","readTransaction","p","openDatabase","fileName","version","displayName","maxSize","apply","arguments","openDatabaseClient","OpenDbCommand","7","provider","sqlClb","stmt","prepare","indexOf","all","run","finalize","8","sqLiteModule","Database","sqLiteNJClient","SqLiteNjCommand","9","$C","Expressions","EntityExpressionVisitor","context","_query","sqlContext","_sqlBuilder","sqLite","SqlBuilder","create","sets","entityContext","VisitSingleExpression","expression","_defaultModelBinder","VisitSomeExpression","VisitFindExpression","VisitEveryExpression","VisitToArrayExpression","VisitFirstExpression","VisitForEachExpression","VisitCountExpression","builder","Container","createqueryBuilder","modelBinderConfig","selectModelBinderProperty","Integer","resetModelBinderProperty","VisitExpression","projVisitor","createFindProjectionVisitor","Visit","projectionExpression","DefaultSelection","_addPropertyToModelBinderConfig","elementType","storageModel","_storageModel","getStorageModel","memberDefinitions","getPublicMappedProperties","prop","Associations","name","ComplexTypes","currentObjectFieldName","addKeyField","_addComplexTypeProperties","complexTypes","ct","FromPropertyName","ToType","tmpPrefix","popModelBinderProperty","defaultType","needPrefix","infos","filter","IsMapped","getExpressionAlias","info","infoIndex","pathFragments","NavigationPath","split","shift","pathFragment","index","isArray","Association","associationInfo","ToMultiplicity","VisitProjectionExpression","hasProjection","selector","ObjectLiteralExpression","projectionAs","Object","VisitParametricQueryExpression","EntityExpression","VisitEntityAsProjection","unshift","EntitySetExpression","VisitEntitySetAsProjection","ComplexTypeExpression","EntityFieldExpression","VisitConstantExpression","source","entityType","VisitComplexTypeExpression","VisitEntityFieldExpression","VisitMemberInfoExpression","memberDefinition","MemberDefinition","memberName","resolveType","VisitEntitySetExpression","VisitEntityExpression","VisitAssociationInfoExpression","$selector","VisitSimpleBinaryExpression","left","right","VisitObjectLiteralExpression","members","of","VisitObjectFieldExpression","tempFieldName","fieldName","10","defineProperty","value","SqlStatementBlocks","beginGroup","endGroup","nameSeparator","valueSeparator","select","where","from","skip","take","parameter","order","as","scalarFieldName","rowIdName","count","queryBuilder","setExpression","idx","queryExpression","associations","filters","newFilters","sortedFilterPart","compile","sqlBuilder","getTextPart","VisitDefaultProjection","selectTextPart","part","addText","text","selectedFragment","concat","countPart","VisitFilterExpression","filterCompiler","SqlFilterCompiler","VisitOrderExpression","addOrders","orderCompiler","SqlOrderCompiler","VisitPagingExpression","nodeType","ExpressionType","Skip","Take","pagingCompiler","SqlPagingCompiler","projectonCompiler","SqlProjectionCompiler","es","setIndex","alias","instance","tableName","toSet","toPrefix","AliasNumber","fromSetName","substring","lastIndexOf","temp","inf","fromPrefix","ReferentialConstraint","constrain","From","To","needAlias","set","masterIndex","PhysicalType","memberDef","ExpressionNode","prototype","monitor","monitorDefinition","m","SqlExpressionMonitor","optimizedIncludeExpression","MonitorEntitySetExpression","EntityContextExpression","backupEntitySetExpression","hasCountFrameOperator","MutateIncludeExpression","origSelector","createCodeExpression","jsCodeTree","createCodeParser","createExpression","code2entity","createCodeToEntityConverter","includeSelector","queryParameters","lambdaParameters","createIncludeExpression","optimizedExpression","FromType","MutateEntitySetExpression","backupContextExpression","path","FromMultiplicity","getType","getMember","ItemName","mi","createMemberInfoExpression","createEntitySetExpression","aliasNum","isMapped","compiler","SqlCompiler","modelBinder","sqLite_ModelBinderCompiler","sqlText","11","SqLiteConverter","fromDb","$data.Enum","v","enumType","convertTo","$data.Duration","proxyConverter","$data.Day","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.Integer","$data.Int32","$data.Number","$data.Date","dbData","Date","$data.DateTimeOffset","$data.Time","$data.String","$data.Boolean","b","$data.Blob","atob","Blob","$data.Array","JSON","parse","$data.Object","$data.Guid","parseGuid","toString","$data.GeographyPoint","GeographyPoint","$data.GeographyLineString","GeographyLineString","$data.GeographyPolygon","GeographyPolygon","$data.GeographyMultiPoint","GeographyMultiPoint","$data.GeographyMultiLineString","GeographyMultiLineString","$data.GeographyMultiPolygon","GeographyMultiPolygon","$data.GeographyCollection","GeographyCollection","$data.GeometryPoint","GeometryPoint","$data.GeometryLineString","GeometryLineString","$data.GeometryPolygon","GeometryPolygon","$data.GeometryMultiPoint","GeometryMultiPoint","$data.GeometryMultiLineString","GeometryMultiLineString","$data.GeometryMultiPolygon","GeometryMultiPolygon","$data.GeometryCollection","GeometryCollection","toDb","date","valueOf","toBase64","arr","stringify","SqLiteFieldMapping","12","StorageProviderBase","cfg","SqlCommands","providerConfiguration","typeSystem","extend","databaseName","defaults","defaultDatabaseName","dbCreation","storageProviders","DbCreationType","DropTableIfChanged","providerName","RegisteredStorageProviders","_buildDbType_generateConvertToFunction","buildDbType_generateConvertToFunction","_buildDbType_modifyInstanceDefinition","buildDbType_modifyInstanceDefinition","_createSqlConnection","ctorParm","JayStorageConnection","SqLiteNjConnection","OpenDbConnection","supportedDataTypes","String","Number","Boolean","Guid","Byte","SByte","Decimal","Float","Int16","Int32","Int64","Time","DateTimeOffset","Duration","Day","writable","fieldConverter","supportedFieldOperations","allowedIn","FilterExpression","ProjectionExpression","substr","toLowerCase","mapTo","toUpperCase","contains","prefix","suffix","startsWith","endsWith","trim","ltrim","rtrim","enumerable","supportedBinaryOperators","equal","nullMap","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","add","divide","multiply","subtract","modulo","orBitwise","maptTo","andBitwsise","in","supportedUnaryOperators","not","positive","negative","supportedSetOperations","map","toArray","orderBy","orderByDescending","first","include","supportedAutoincrementKeys","createGuid","initializeStore","createSqlFromStorageModel","sqlConnection","that","existObjectInDB","tbl_name","Merge","Exception","deleteCmd","regEx","RegExp","tableDef","slice","regex","existsRegExMatches","sql","match","DropAllExistingTables","objName","_runSqlCommands","_compile","actionPack","actions","sqlConvertMetadata","converter","sqlCommand","sqlResult","rawDataList","SQLiteCompiler","compiled","hasSelect","getTraceString","cmdStr","pop","command","okFn","setContext","ctx","saveChanges","changedItems","independentBlocks","buildIndependentBlocks","saveIndependentBlocks","saveNextIndependentBlock","currentBlock","convertedItems","dbType","physicalData","saveIndependentItems","postProcessItems","items","toCmd","queries","cmdParams","param","saveEntitySet","reloadQueries","save_reloadSavedEntity","entitySet","initData","pmpCache","hasOwnProperty","pmp","memDef","computed","entityState","EntityState","Added","save_NewEntity","Deleted","save_DeleteEntity","Modified","save_UpdateEntity","Unchanged","deleteSqlString","hasCondition","addAllField","deleteParam","fieldDef","logicalFieldDef","resolveName","setSection","whereSection","createNew","whereParam","setParam","updateSqlString","insertSqlString","fieldList","fieldValue","fieldParam","isNullOrUndefined","typeName","isAssignableTo","EntitySet","rowid","keyFieldNumber","autoincrementFieldNumber","getKeyProperties","TableName","pkFragment","createSqlFragmentFromField","field","parsePk","storageModelObject","schemaCreate","fldBuilder","FieldTypeBuilder","build","prov","parseKey","fld","mapping","buildFieldNameAndType","buildRelations","buildPrimaryKey","buildNotNull","buildAutoIncrement","required","isSupported","get","__global","SqLiteStorageProvider","registerProvider","webSqlProvider","13","ExpressionMonitor","VisitIncludeExpression","newSourceExpression","newSelectorExpresion","expr","createProjectionExpression","14","_SqLiteCompiler","VisitUnaryExpression","resolution","operand","ConstantExpression","requireType","Queryable","toTraceString","VisitEntityFieldOperationExpression","operation","MemberInfoExpression","opDefinition","opName","fragment","paramDef","addParameter","VisitQueryParameterExpression","storageProvider","./SqLiteCompiler.js","15","OrderByDescending","16","amount","17","anonymFiledPrefix","currentObjectLiteralName","VisitEntityExpressionAsProjection","MappedFullEntitySet","ee","localPrefix","memberInfo","c","createConstantExpression","member","membersNumber","properties","association","tempObjectLiteralName","18","_DbCommand","_DbConnection","_OpenDbCommand","_OpenDbConnection","_JayStorageCommand","_JayStorageConnection","_SqLiteNjCommand","_SqLiteNjConnection","_SqLiteConverter","_SqLiteStorageProvider","_SqlPagingCompiler","_SqlOrderCompiler","_SqlProjectionCompiler","_SqlExpressionMonitor","_SqlFilterCompiler","_sqLite_ModelBinderCompiler","../../DbClient/DbCommand.js","../../DbClient/DbConnection.js","../../DbClient/JayStorageClient/JayStorageCommand.js","../../DbClient/JayStorageClient/JayStorageConnection.js","../../DbClient/OpenDatabaseClient/OpenDbCommand.js","../../DbClient/OpenDatabaseClient/OpenDbConnection.js","../../DbClient/SqLiteNjClient/SqLiteNjCommand.js","../../DbClient/SqLiteNjClient/SqLiteNjConnection.js","./ModelBinder/sqLite_ModelBinderCompiler.js","./SqLiteConverter.js","./SqLiteStorageProvider.js","./SqlExpressionMonitor.js","./SqlFilterCompiler.js","./SqlOrderCompiler.js","./SqlPagingCompiler.js","./SqlProjectionCompiler.js"],"mappings":"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","file":"SqLiteProvider.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿// JayData 1.5.5 RC\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/sqlite\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.DbCommand', null, null, {\n    connection: {},\n    parameters: {},\n    execute: function execute(callback) {\n        _core.Guard.raise(\"Pure class\");\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.DbConnection', null, null, {\n    connectionParams: {},\n    database: {},\n    isOpen: function isOpen() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    open: function open() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    close: function close() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    createCommand: function createCommand() {\n        _core.Guard.raise(\"Pure class\");\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.jayStorageClient.JayStorageCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback) {\n        // TODO\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    executeQuery: function executeQuery(callback) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    exec: function exec(query, parameters, callback, errorhandler) {\n        if (parameters == null || parameters == undefined) {\n            parameters = {};\n        }\n        var single = false;\n        if (!(query instanceof Array)) {\n            single = true;\n            query = [query];\n            parameters = [parameters];\n        }\n\n        var provider = this;\n        var results = [];\n        var remainingCommands = query.length;\n        var decClb = function decClb() {\n            if (--remainingCommands == 0) {\n                callback(single ? results[0] : results);\n            }\n        };\n\n        query.forEach(function (q, i) {\n            if (q) {\n                _core2.default.ajax({\n                    url: 'http' + (this.connection.connectionParams.storage.ssl ? 's' : '') + '://' + this.connection.connectionParams.storage.src.replace('http://', '').replace('https://', '') + '?db=' + this.connection.connectionParams.storage.key,\n                    type: 'POST',\n                    headers: {\n                        'X-PINGOTHER': 'pingpong'\n                    },\n                    data: { query: q, parameters: parameters[i] },\n                    dataType: 'json',\n                    contentType: 'application/json;charset=UTF-8',\n                    success: function success(data) {\n                        if (data && data.error) {\n                            console.log('JayStorage error', data.error);\n                            errorhandler(data.error);\n                            return;\n                        }\n                        if (this.lastID) {\n                            results[i] = { insertId: this.lastID, rows: (data || { rows: [] }).rows };\n                        } else results[i] = { rows: (data || { rows: [] }).rows };\n                        decClb();\n                    }\n                });\n            } else {\n                results[i] = null;\n                decClb();\n            }\n        }, this);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.jayStorageClient.JayStorageConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return true;\n        //return this.database !== null && this.database !== undefined;\n    },\n    open: function open() {\n        /*if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }*/\n    },\n    close: function close() {\n        //not supported yet (performance issue)\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.jayStorageClient.JayStorageCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.openDatabaseClient.OpenDbCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback, tran, isWrite) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\n    },\n    executeQuery: function executeQuery(callback, tran, isWrite) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\n    },\n    exec: function exec(query, parameters, callback, errorhandler, transaction, isWrite) {\n        // suspicious code\n        /*if (console) {\r\n            //console.log(query);\r\n        }*/\n        this.connection.open({\n            error: errorhandler,\n            success: function success(tran) {\n                var single = false;\n                if (!(query instanceof Array)) {\n                    single = true;\n                    query = [query];\n                    parameters = [parameters];\n                }\n\n                var results = [];\n                var remainingCommands = 0;\n\n                function decClb() {\n                    if (--remainingCommands == 0) {\n                        callback(single ? results[0] : results, transaction);\n                    }\n                }\n\n                query.forEach(function (q, i) {\n                    remainingCommands++;\n                    if (q) {\n                        tran.executeSql(query[i], parameters[i], function (trx, result) {\n                            var r = { rows: [] };\n                            try {\n                                r.insertId = result.insertId;\n                            } catch (e) {}\n                            if (typeof r.insertId !== 'number') {\n                                // If insertId is present, no rows are returned\n                                r.rowsAffected = result.rowsAffected;\n                                var maxItem = result.rows.length;\n                                for (var j = 0; j < maxItem; j++) {\n                                    r.rows.push(result.rows.item(j));\n                                }\n                            }\n                            results[i] = r;\n                            decClb(trx);\n                        }, function (trx, err) {\n                            var _q = q;\n                            var _i = i;\n\n                            if (errorhandler) errorhandler(err);\n\n                            return true;\n                        });\n                    } else {\n                        results[i] = null;\n                        decClb();\n                    }\n                });\n            }\n        }, transaction, isWrite);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.openDatabaseClient.OpenDbConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return this.database !== null && this.database !== undefined && this.transaction !== null && this.transaction !== undefined;\n    },\n    open: function open(callBack, tran, isWrite) {\n        if (isWrite === undefined) isWrite = true;\n\n        callBack.oncomplete = callBack.oncomplete || function () {};\n        if (tran) {\n            callBack.success(tran.transaction);\n        } else if (this.database) {\n            if (isWrite) {\n                this.database.transaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            } else {\n                this.database.readTransaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            }\n        } else {\n            var p = this.connectionParams;\n            var con = this;\n            this.database = openDatabase(p.fileName, p.version, p.displayName, p.maxSize);\n            if (!this.database.readTransaction) {\n                this.database.readTransaction = function () {\n                    con.database.transaction.apply(con.database, arguments);\n                };\n            }\n\n            if (isWrite) {\n                this.database.transaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            } else {\n                this.database.readTransaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            }\n        }\n    },\n    close: function close() {\n        this.transaction = undefined;\n        this.database = undefined;\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.openDatabaseClient.OpenDbCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback) {\n        // TODO\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    executeQuery: function executeQuery(callback) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    exec: function exec(query, parameters, callback, errorhandler) {\n        if (!this.connection.isOpen()) {\n            this.connection.open();\n        }\n        if (parameters == null || parameters == undefined) {\n            parameters = {};\n        }\n        var single = false;\n        if (!(query instanceof Array)) {\n            single = true;\n            query = [query];\n            parameters = [parameters];\n        }\n\n        var provider = this;\n        var results = [];\n        var remainingCommands = 0;\n        var decClb = function decClb() {\n            if (--remainingCommands == 0) {\n                provider.connection.database.exec('COMMIT');\n                callback(single ? results[0] : results);\n            }\n        };\n        provider.connection.database.exec('BEGIN');\n        query.forEach(function (q, i) {\n            remainingCommands++;\n            if (q) {\n                var sqlClb = function sqlClb(error, rows) {\n                    if (error != null) {\n                        errorhandler(error);\n                        return;\n                    }\n                    if (this.lastID) {\n                        results[i] = { insertId: this.lastID, rows: [] };\n                    } else {\n                        results[i] = { rows: rows };\n                    }\n                    decClb();\n                };\n\n                var stmt = provider.connection.database.prepare(q, parameters[i]);\n                if (q.indexOf('SELECT') == 0) {\n                    stmt.all(sqlClb);\n                } else {\n                    stmt.run(sqlClb);\n                }\n                stmt.finalize();\n            } else {\n                results[i] = null;\n                decClb();\n            }\n        }, this);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return this.database !== null && this.database !== undefined;\n    },\n    open: function open() {\n        if (this.database == null) {\n            var p = this.connectionParams;\n            this.database = new sqLiteModule.Database(p.fileName);\n        }\n    },\n    close: function close() {\n        //not supported yet (performance issue)\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.sqLiteNJClient.SqLiteNjCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.sqLite_ModelBinderCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, context) {\n        this._query = query;\n        this.sqlContext = context;\n        this._sqlBuilder = _core2.default.sqLite.SqlBuilder.create(context.sets, context.entityContext);\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _core.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _core2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _core.Container.createFindProjectionVisitor();\n        projVisitor.Visit(expression);\n\n        if (projVisitor.projectionExpression) {\n            this.Visit(projVisitor.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _core.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\n            if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n                if (prop.key) {\n                    if (this.currentObjectFieldName) {\n                        builder.addKeyField(this.currentObjectFieldName + '__' + prop.name);\n                    } else {\n                        builder.addKeyField(prop.name);\n                    }\n                }\n                if (this.currentObjectFieldName) {\n                    builder.modelBinderConfig[prop.name] = this.currentObjectFieldName + '__' + prop.name;\n                } else {\n                    builder.modelBinderConfig[prop.name] = prop.name;\n                }\n            }\n        }, this);\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n\n            builder.selectModelBinderProperty(ct.FromPropertyName);\n            builder.modelBinderConfig['$type'] = ct.ToType;\n            var tmpPrefix = this.currentObjectFieldName;\n            if (this.currentObjectFieldName) {\n                this.currentObjectFieldName += '__';\n            } else {\n                this.currentObjectFieldName = '';\n            }\n            this.currentObjectFieldName += ct.FromPropertyName;\n            //recursion\n            this._addPropertyToModelBinderConfig(ct.ToType, builder);\n            //reset model binder property\n            builder.popModelBinderProperty();\n            this.currentObjectFieldName = tmpPrefix;\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder) {\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = this._query.defaultType;\n        var storageModel = this._query.context._storageModel.getStorageModel(this._query.defaultType);\n\n        var needPrefix = this.sqlContext.infos.filter(function (i) {\n            return i.IsMapped;\n        }).length > 1;\n        if (needPrefix) {\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[0]);\n        }\n        this._addPropertyToModelBinderConfig(this._query.defaultType, builder);\n        this.sqlContext.infos.forEach(function (info, infoIndex) {\n            if (infoIndex > 0 && info.IsMapped) {\n                var pathFragments = info.NavigationPath.split('.');\n                pathFragments.shift();\n                pathFragments.forEach(function (pathFragment, index) {\n                    if (!pathFragment) {\n                        return;\n                    }\n                    if (!builder.modelBinderConfig[pathFragment]) {\n                        builder.selectModelBinderProperty(pathFragment);\n                        var isArray = false;\n                        if (info.Association.associationInfo.ToMultiplicity === '*' && pathFragments.length - 1 === index) {\n                            builder.modelBinderConfig['$type'] = _core2.default.Array;\n                            builder.selectModelBinderProperty('$item');\n                            isArray = true;\n                        }\n\n                        builder.modelBinderConfig['$type'] = this.sqlContext.sets[infoIndex].elementType;\n                        this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[infoIndex]);\n                        this._addPropertyToModelBinderConfig(this.sqlContext.sets[infoIndex].elementType, builder);\n                        if (isArray) {\n                            builder.popModelBinderProperty();\n                        }\n                    } else {\n                        builder.selectModelBinderProperty(pathFragment);\n                    }\n                }, this);\n                for (var i = 0; i < pathFragments.length; i++) {\n                    builder.popModelBinderProperty();\n                }\n            }\n        }, this);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _core2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n            builder.modelBinderConfig['$keys'].unshift('rowid$$');\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(expression.expression);\n            this.VisitEntitySetAsProjection(expression.expression, builder);\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\n        } else if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n        } else {\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\n            this.Visit(expression.expression, builder);\n            if (expression.expression instanceof _core2.default.Expressions.EntityFieldExpression) {\n                builder.modelBinderConfig['$source'] = 'd';\n            }\n        }\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.Visit(expression.source, builder);\n        builder.modelBinderConfig['$type'] = expression.entityType;\n        this._addPropertyToModelBinderConfig(expression.entityType, builder);\n    },\n    VisitEntitySetAsProjection: function VisitEntitySetAsProjection(expression, builder) {\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = expression.elementType;\n        this._addPropertyToModelBinderConfig(expression.elementType, builder);\n        builder.popModelBinderProperty();\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        return expression;\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        if (expression.memberDefinition instanceof _core2.default.MemberDefinition) {\n            builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n            if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n                this._addPropertyToModelBinderConfig(_core.Container.resolveType(expression.memberDefinition.type), builder);\n            } else {\n                builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\n            }\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _core2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            builder.modelBinderConfig.$selector += '.';\n        } else {\n            builder.modelBinderConfig['$selector'] = 'json:';\n        }\n        builder.modelBinderConfig['$selector'] += expression.associationInfo.FromPropertyName;\n    },\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, builder) {\n        this.Visit(expression.left, builder);\n        this.Visit(expression.right, builder);\n        builder.modelBinderConfig['$type'] = undefined;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _core2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        var tempFieldName = this.currentObjectFieldName;\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (this.currentObjectFieldName) {\n            this.currentObjectFieldName += '__';\n        } else {\n            this.currentObjectFieldName = '';\n        }\n        this.currentObjectFieldName += expression.fieldName;\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.VisitEntitySetAsProjection(expression.expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n\n        this.currentObjectFieldName = tempFieldName;\n\n        builder.popModelBinderProperty();\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SqlStatementBlocks = undefined;\n\nvar _core = _dereq_(\"jaydata/core\");\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SqlStatementBlocks = exports.SqlStatementBlocks = {\n    beginGroup: \"(\",\n    endGroup: \")\",\n    nameSeparator: \".\",\n    valueSeparator: \", \",\n    select: \"SELECT \",\n    where: \" WHERE \",\n    from: \" FROM \",\n    skip: \" OFFSET \",\n    take: \" LIMIT \",\n    parameter: \"?\",\n    order: \" ORDER BY \",\n    as: \" AS \",\n    scalarFieldName: 'd',\n    rowIdName: 'rowid$$',\n    count: 'select count(*) cnt from ('\n};\n(0, _core.$C)('$data.sqLite.SqlBuilder', _core2.default.queryBuilder, null, {\n    constructor: function constructor(sets, context) {\n        this.sets = sets;\n        this.entityContext = context;\n    },\n    getExpressionAlias: function getExpressionAlias(setExpression) {\n        var idx = this.sets.indexOf(setExpression);\n        if (idx == -1) {\n            idx = this.sets.push(setExpression) - 1;\n        }\n        return \"T\" + idx;\n    }\n});\n\n(0, _core.$C)('$data.sqLite.SqlCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(queryExpression, context) {\n        this.queryExpression = queryExpression;\n        this.sets = context.sets;\n        this.infos = context.infos;\n        this.entityContext = context.entityContext;\n        this.associations = [];\n        this.filters = [];\n        this.newFilters = {};\n        this.sortedFilterPart = ['projection', 'from', 'filter', 'order', 'take', 'skip'];\n    },\n    compile: function compile() {\n        var sqlBuilder = _core2.default.sqLite.SqlBuilder.create(this.sets, this.entityContext);\n        this.Visit(this.queryExpression, sqlBuilder);\n\n        if (sqlBuilder.getTextPart('projection') === undefined) {\n            this.VisitDefaultProjection(sqlBuilder);\n        }\n        sqlBuilder.selectTextPart(\"result\");\n        this.sortedFilterPart.forEach(function (part) {\n            var part = sqlBuilder.getTextPart(part);\n            if (part) {\n                sqlBuilder.addText(part.text);\n                sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(part.params);\n            }\n        }, this);\n        var countPart = sqlBuilder.getTextPart('count');\n        if (countPart !== undefined) {\n            sqlBuilder.selectedFragment.text = countPart.text + sqlBuilder.selectedFragment.text;\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\n            sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(countPart.params);\n        }\n        sqlBuilder.resetModelBinderProperty();\n        this.filters.push(sqlBuilder);\n    },\n\n    VisitToArrayExpression: function VisitToArrayExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n    },\n    VisitCountExpression: function VisitCountExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('count');\n        sqlBuilder.addText(SqlStatementBlocks.count);\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('filter');\n        sqlBuilder.addText(SqlStatementBlocks.where);\n        var filterCompiler = _core2.default.sqLite.SqlFilterCompiler.create();\n        filterCompiler.Visit(expression.selector, sqlBuilder);\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('order');\n        if (this.addOrders) {\n            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\n        } else {\n            this.addOrders = true;\n            sqlBuilder.addText(SqlStatementBlocks.order);\n        }\n        var orderCompiler = _core2.default.sqLite.SqlOrderCompiler.create();\n        orderCompiler.Visit(expression, sqlBuilder);\n\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n\n        switch (expression.nodeType) {\n            case _core2.default.Expressions.ExpressionType.Skip:\n                sqlBuilder.selectTextPart('skip');\n                sqlBuilder.addText(SqlStatementBlocks.skip);break;\n            case _core2.default.Expressions.ExpressionType.Take:\n                sqlBuilder.selectTextPart('take');\n                sqlBuilder.addText(SqlStatementBlocks.take);break;\n            default:\n                _core.Guard.raise(\"Not supported nodeType\");break;\n        }\n        var pagingCompiler = _core2.default.sqLite.SqlPagingCompiler.create();\n        pagingCompiler.Visit(expression, sqlBuilder);\n        return expression;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('projection');\n        this.hasProjection = true;\n        sqlBuilder.addText(SqlStatementBlocks.select);\n        var projectonCompiler = _core2.default.sqLite.SqlProjectionCompiler.create();\n        projectonCompiler.Visit(expression, sqlBuilder);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        sqlBuilder.selectTextPart('from');\n        sqlBuilder.addText(SqlStatementBlocks.from);\n        sqlBuilder.sets.forEach(function (es, setIndex) {\n\n            if (setIndex > 0) {\n                sqlBuilder.addText(\" \\n\\tLEFT OUTER JOIN \");\n            }\n\n            var alias = sqlBuilder.getExpressionAlias(es);\n            sqlBuilder.addText(es.instance.tableName + ' ');\n            sqlBuilder.addText(alias);\n\n            if (setIndex > 0) {\n                sqlBuilder.addText(\" ON (\");\n                var toSet = this.infos[setIndex];\n                var toPrefix = \"T\" + toSet.AliasNumber;\n                var fromSetName = toSet.NavigationPath.substring(0, toSet.NavigationPath.lastIndexOf('.'));\n                var temp = this.infos.filter(function (inf) {\n                    return inf.NavigationPath == fromSetName;\n                }, this);\n                var fromPrefix = \"T0\";\n                if (temp.length > 0) {\n                    fromPrefix = \"T\" + temp[0].AliasNumber;\n                }\n                toSet.Association.associationInfo.ReferentialConstraint.forEach(function (constrain, index) {\n                    if (index > 0) {\n                        sqlBuilder.addText(\" AND \");\n                    }\n                    sqlBuilder.addText(fromPrefix + \".\" + constrain[toSet.Association.associationInfo.From]);\n                    sqlBuilder.addText(\" = \");\n                    sqlBuilder.addText(toPrefix + \".\" + constrain[toSet.Association.associationInfo.To]);\n                }, this);\n                sqlBuilder.addText(\")\");\n            }\n        }, this);\n    },\n    VisitDefaultProjection: function VisitDefaultProjection(sqlBuilder) {\n        sqlBuilder.selectTextPart('projection');\n        var needAlias = this.infos.filter(function (i) {\n            return i.IsMapped;\n        }).length > 1;\n        if (sqlBuilder.sets.length > 1) {\n            sqlBuilder.addText(SqlStatementBlocks.select);\n            sqlBuilder.sets.forEach(function (set, masterIndex) {\n\n                if (this.infos[masterIndex].IsMapped) {\n                    var alias = sqlBuilder.getExpressionAlias(set);\n                    set.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberDef, index) {\n                        if (index > 0 || masterIndex > 0) {\n                            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\n                        }\n                        sqlBuilder.addText(alias + \".\");\n                        sqlBuilder.addText(memberDef.name);\n                        if (needAlias) {\n                            sqlBuilder.addText(SqlStatementBlocks.as);\n                            sqlBuilder.addText(alias + \"__\" + memberDef.name);\n                        }\n                    }, this);\n                }\n            }, this);\n        } else {\n            sqlBuilder.addText(\"SELECT *\");\n        }\n    }\n});\n\n_core2.default.Expressions.ExpressionNode.prototype.monitor = function (monitorDefinition, context) {\n    var m = _core2.default.sqLite.SqlExpressionMonitor.create(monitorDefinition);\n    return m.Visit(this, context);\n};\n\n(0, _core.$C)('$data.storageProviders.sqLite.SQLiteCompiler', null, null, {\n    compile: function compile(query) {\n        /// <param name=\"query\" type=\"$data.Query\" />\n        var expression = query.expression;\n        var context = { sets: [], infos: [], entityContext: query.context };\n\n        var optimizedIncludeExpression = expression.monitor({\n            MonitorEntitySetExpression: function MonitorEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\n                    this.backupEntitySetExpression = expression;\n                }\n            },\n            VisitCountExpression: function VisitCountExpression(expression, context) {\n                context.hasCountFrameOperator = true;\n                return expression;\n            },\n            MutateIncludeExpression: function MutateIncludeExpression(expression, context) {\n                var result = null;\n                if (context.hasCountFrameOperator) {\n                    result = expression.source;\n                } else {\n                    var origSelector = expression.selector.value;\n                    _core.Container.createCodeExpression(\"function(it){return it.\" + origSelector + \";}\", null);\n\n                    var jsCodeTree = _core.Container.createCodeParser(this.backupEntitySetExpression.source.instance).createExpression(\"function(it){return it.\" + origSelector + \";}\");\n                    var code2entity = _core.Container.createCodeToEntityConverter(this.backupEntitySetExpression.source.instance);\n                    var includeSelector = code2entity.Visit(jsCodeTree, { queryParameters: undefined, lambdaParameters: [this.backupEntitySetExpression] });\n\n                    result = _core.Container.createIncludeExpression(expression.source, includeSelector);\n                }\n                return result;\n            }\n        }, context);\n\n        var optimizedExpression = optimizedIncludeExpression.monitor({\n            MonitorEntitySetExpression: function MonitorEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\n                    context.sets.push(expression);\n                    context.infos.push({ AliasNumber: 0, Association: null, FromType: null, FromPropertyName: null, IsMapped: true });\n                }\n            },\n            MutateEntitySetExpression: function MutateEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression) {\n                    this.backupContextExpression = expression.source;\n                    this.path = \"\";\n                    return expression;\n                }\n                if (expression.selector.associationInfo.FromMultiplicity == \"0..1\" && expression.selector.associationInfo.FromMultiplicity == \"*\") {\n                    _core.Guard.raise(\"Not supported query on this navigation property: \" + expression.selector.associationInfo.From + \" \" + expression.selector.associationInfo.FromPropertyName);\n                }\n\n                this.path += '.' + expression.selector.associationInfo.FromPropertyName;\n                var info = context.infos.filter(function (inf) {\n                    return inf.NavigationPath == this.path;\n                }, this);\n                if (info.length > 0) {\n                    return context.sets[info[0].AliasNumber];\n                }\n                var memberDefinitions = this.backupContextExpression.instance.getType().memberDefinitions.getMember(expression.storageModel.ItemName);\n                if (!memberDefinitions) {\n                    _core.Guard.raise(\"Context schema error\");\n                }\n                var mi = _core.Container.createMemberInfoExpression(memberDefinitions);\n                var result = _core.Container.createEntitySetExpression(this.backupContextExpression, mi);\n                result.instance = this.backupContextExpression.instance[expression.storageModel.ItemName];\n                var aliasNum = context.sets.push(result);\n                context.infos.push({\n                    AliasNumber: aliasNum - 1,\n                    Association: expression.selector,\n                    NavigationPath: this.path,\n                    IsMapped: this.isMapped\n                });\n                return result;\n            }\n        }, context);\n\n        var compiler = _core2.default.sqLite.SqlCompiler.create(optimizedExpression, context);\n        compiler.compile();\n\n        var sqlBuilder = _core2.default.sqLite.SqlBuilder.create(this.sets, this.entityContext);\n\n        query.modelBinderConfig = {};\n        var modelBinder = _core2.default.sqLite.sqLite_ModelBinderCompiler.create(query, context);\n        modelBinder.Visit(optimizedExpression);\n\n        var result = {\n            sqlText: compiler.filters[0].selectedFragment.text,\n            params: compiler.filters[0].selectedFragment.params,\n            modelBinderConfig: query.modelBinderConfig\n        };\n\n        return result;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.SqLiteConverter = {\n    fromDb: {\n        '$data.Enum': function $dataEnum(v, enumType) {\n            return _core2.default.Container.convertTo(v, enumType);\n        },\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        \"$data.Integer\": _core2.default.Container.proxyConverter,\n        \"$data.Int32\": _core2.default.Container.proxyConverter,\n        \"$data.Number\": _core2.default.Container.proxyConverter,\n        \"$data.Date\": function $dataDate(dbData) {\n            return dbData != null ? new Date(dbData) : dbData;\n        },\n        \"$data.DateTimeOffset\": function $dataDateTimeOffset(dbData) {\n            return dbData != null ? new Date(dbData) : dbData;\n        },\n        \"$data.Time\": _core2.default.Container.proxyConverter,\n        \"$data.String\": _core2.default.Container.proxyConverter,\n        \"$data.Boolean\": function $dataBoolean(b) {\n            return b === 1 ? true : false;\n        },\n        \"$data.Blob\": function $dataBlob(b) {\n            return b ? _core2.default.Container.convertTo(atob(b), _core2.default.Blob) : b;\n        },\n        \"$data.Array\": function $dataArray() {\n            if (arguments.length == 0) return [];\n            return arguments[0] ? JSON.parse(arguments[0]) : undefined;\n        },\n        \"$data.Object\": function $dataObject(v) {\n            try {\n                return JSON.parse(v);\n            } catch (err) {\n                return v;\n            }\n        },\n        \"$data.Guid\": function $dataGuid(g) {\n            return g ? _core2.default.parseGuid(g).toString() : g;\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return new _core2.default.GeographyCollection(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return new _core2.default.GeometryCollection(JSON.parse(g));\n            }return g;\n        }\n    },\n    toDb: {\n        '$data.Enum': _core2.default.Container.proxyConverter,\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        \"$data.Integer\": _core2.default.Container.proxyConverter,\n        \"$data.Int32\": _core2.default.Container.proxyConverter,\n        \"$data.Number\": _core2.default.Container.proxyConverter,\n        \"$data.Date\": function $dataDate(date) {\n            return date ? date.valueOf() : null;\n        },\n        \"$data.DateTimeOffset\": function $dataDateTimeOffset(date) {\n            return date ? date.valueOf() : null;\n        },\n        \"$data.Time\": _core2.default.Container.proxyConverter,\n        \"$data.String\": _core2.default.Container.proxyConverter,\n        \"$data.Boolean\": function $dataBoolean(b) {\n            return b ? 1 : 0;\n        },\n        \"$data.Blob\": function $dataBlob(b) {\n            return b ? _core2.default.Blob.toBase64(b) : b;\n        },\n        \"$data.Array\": function $dataArray(arr) {\n            return arr ? JSON.stringify(arr) : arr;\n        },\n        \"$data.Guid\": function $dataGuid(g) {\n            return g ? g.toString() : g;\n        },\n        \"$data.Object\": function $dataObject(value) {\n            if (value === null) {\n                return null;\n            } else {\n                JSON.stringify(value);\n            }\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        }\n    }\n};\n\n_core2.default.SqLiteFieldMapping = {\n    '$data.Byte': \"INTEGER\",\n    '$data.SByte': \"INTEGER\",\n    '$data.Decimal': \"TEXT\",\n    '$data.Float': \"REAL\",\n    '$data.Int16': \"INTEGER\",\n    '$data.Int64': \"TEXT\",\n    \"$data.Integer\": \"INTEGER\",\n    \"$data.Int32\": \"INTEGER\",\n    \"$data.Number\": \"REAL\",\n    \"$data.Date\": \"REAL\",\n    \"$data.Duration\": \"TEXT\",\n    \"$data.Time\": \"TEXT\",\n    \"$data.Day\": \"TEXT\",\n    \"$data.DateTimeOffset\": \"REAL\",\n    \"$data.String\": \"TEXT\",\n    \"$data.Boolean\": \"INTEGER\",\n    \"$data.Blob\": \"BLOB\",\n    \"$data.Array\": \"TEXT\",\n    \"$data.Guid\": \"TEXT\",\n    \"$data.Object\": \"TEXT\",\n    '$data.GeographyPoint': \"TEXT\",\n    '$data.GeographyLineString': \"TEXT\",\n    '$data.GeographyPolygon': \"TEXT\",\n    '$data.GeographyMultiPoint': \"TEXT\",\n    '$data.GeographyMultiLineString': \"TEXT\",\n    '$data.GeographyMultiPolygon': \"TEXT\",\n    '$data.GeographyCollection': \"TEXT\",\n    '$data.GeometryPoint': \"TEXT\",\n    '$data.GeometryLineString': \"TEXT\",\n    '$data.GeometryPolygon': \"TEXT\",\n    '$data.GeometryMultiPoint': \"TEXT\",\n    '$data.GeometryMultiLineString': \"TEXT\",\n    '$data.GeometryMultiPolygon': \"TEXT\",\n    '$data.GeometryCollection': \"TEXT\"\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],12:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.storageProviders.sqLite.SqLiteStorageProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, context) {\n        this.SqlCommands = [];\n        this.context = context;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            databaseName: _core2.default.defaults.defaultDatabaseName,\n            version: \"\",\n            displayName: \"JayData default db\",\n            maxSize: 1024 * 1024,\n            dbCreation: _core2.default.storageProviders.DbCreationType.DropTableIfChanged\n        }, cfg);\n\n        this.providerName = '';\n        for (var i in _core2.default.RegisteredStorageProviders) {\n            if (_core2.default.RegisteredStorageProviders[i] === this.getType()) {\n                this.providerName = i;\n            }\n        }\n\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\n        }\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\n        }\n    },\n    _createSqlConnection: function _createSqlConnection() {\n        var ctorParm = {\n            fileName: this.providerConfiguration.databaseName,\n            version: \"\",\n            displayName: this.providerConfiguration.displayName,\n            maxSize: this.providerConfiguration.maxSize,\n            storage: this.providerConfiguration.storage\n        };\n\n        if (this.connection) return this.connection;\n\n        var connection = null;\n        if (this.providerConfiguration.storage) {\n            connection = new _core2.default.dbClient.jayStorageClient.JayStorageConnection(ctorParm);\n        } else if (typeof sqLiteModule !== 'undefined') {\n            connection = new _core2.default.dbClient.sqLiteNJClient.SqLiteNjConnection(ctorParm);\n        } else {\n            connection = new _core2.default.dbClient.openDatabaseClient.OpenDbConnection(ctorParm);\n        }\n\n        this.connection = connection;\n\n        return connection;\n    },\n\n    supportedDataTypes: {\n        value: [_core2.default.Array, _core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Array, _core2.default.Object, _core2.default.Boolean, _core2.default.Date, _core2.default.Guid, _core2.default.GeographyPoint, _core2.default.GeographyLineString, _core2.default.GeographyPolygon, _core2.default.GeographyMultiPoint, _core2.default.GeographyMultiLineString, _core2.default.GeographyMultiPolygon, _core2.default.GeographyCollection, _core2.default.GeometryPoint, _core2.default.GeometryLineString, _core2.default.GeometryPolygon, _core2.default.GeometryMultiPoint, _core2.default.GeometryMultiLineString, _core2.default.GeometryMultiPolygon, _core2.default.GeometryCollection, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.DateTimeOffset, _core2.default.Duration, _core2.default.Day],\n        writable: false\n    },\n    fieldConverter: { value: _core2.default.SqLiteConverter },\n\n    supportedFieldOperations: {\n        value: {\n            length: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression]\n            },\n            substr: {\n                dataType: \"string\",\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }]\n            },\n            toLowerCase: {\n                dataType: \"string\", mapTo: \"lower\"\n            },\n            toUpperCase: {\n                dataType: \"string\", mapTo: \"upper\"\n            },\n            contains: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\", suffix: \"%\" }]\n            },\n            startsWith: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"strFragment\", dataType: \"string\", suffix: \"%\" }]\n            },\n            endsWith: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\" }]\n            },\n            'trim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'trim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            },\n            'ltrim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'ltrim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            },\n            'rtrim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'rtrim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\n            notEqual: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\n            equalTyped: { mapTo: '=', dataType: \"boolean\" },\n            notEqualTyped: { mapTo: '!=', dataType: \"boolean\" },\n            greaterThan: { mapTo: '>', dataType: \"boolean\" },\n            greaterThanOrEqual: { mapTo: '>=', dataType: \"boolean\" },\n\n            lessThan: { mapTo: '<', dataType: \"boolean\" },\n            lessThenOrEqual: { mapTo: '<=', dataType: \"boolean\" },\n            or: { mapTo: 'OR', dataType: \"boolean\" },\n            and: { mapTo: 'AND', dataType: \"boolean\" },\n\n            add: { mapTo: '+', dataType: \"number\" },\n            divide: { mapTo: '/' },\n            multiply: { mapTo: '*' },\n            subtract: { mapTo: '-' },\n            modulo: { mapTo: '%' },\n\n            orBitwise: { maptTo: \"|\" },\n            andBitwsise: { mapTo: \"&\" },\n\n            \"in\": { mapTo: \"in\", dataType: \"boolean\" }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' },\n            positive: { mapTo: '+' },\n            negative: { maptTo: '-' }\n        }\n    },\n\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {},\n            include: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    supportedAutoincrementKeys: {\n        value: {\n            '$data.Integer': true,\n            '$data.Int32': true,\n            '$data.Guid': function $dataGuid() {\n                return _core2.default.createGuid();\n            }\n        }\n    },\n\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        this.context._storageModel.forEach(function (item, index) {\n            this.SqlCommands.push(this.createSqlFromStorageModel(item) + \" \");\n        }, this);\n\n        var sqlConnection = this._createSqlConnection();\n        var cmd = sqlConnection.createCommand(\"SELECT * FROM sqlite_master WHERE type = 'table'\", null);\n        var that = this;\n\n        cmd.executeQuery({\n            success: function success(result) {\n                var existObjectInDB = {};\n                for (var i = 0; i < result.rows.length; i++) {\n                    var item = result.rows[i];\n                    existObjectInDB[item.tbl_name] = item;\n                }\n                switch (that.providerConfiguration.dbCreation) {\n                    case _core2.default.storageProviders.DbCreationType.Merge:\n                        _core.Guard.raise(new _core.Exception('Not supported db creation type'));\n                        break;\n                    case _core2.default.storageProviders.DbCreationType.DropTableIfChanged:\n                        var deleteCmd = [];\n                        for (var i = 0; i < that.SqlCommands.length; i++) {\n                            if (that.SqlCommands[i] == \"\") {\n                                continue;\n                            }\n                            var regEx = new RegExp('^CREATE TABLE IF NOT EXISTS ([^ ]*) (\\\\(.*\\\\))', 'g');\n                            var data = regEx.exec(that.SqlCommands[i]);\n                            if (data) {\n                                var tableName = data[1];\n                                var tableDef = data[2];\n                                if (existObjectInDB[tableName.slice(1, tableName.length - 1)]) {\n                                    var regex = new RegExp('\\\\(.*\\\\)', 'g');\n                                    var existsRegExMatches = existObjectInDB[tableName.slice(1, tableName.length - 1)].sql.match(regex);\n\n                                    if (!existsRegExMatches || tableDef.toLowerCase() != existsRegExMatches[0].toLowerCase()) {\n                                        deleteCmd.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[tableName.slice(1, tableName.length - 1)].tbl_name + \"];\");\n                                    }\n                                }\n                            } else {\n                                //console.dir(regEx);\n                                //console.dir(that.SqlCommands[i]);\n                            }\n                        }\n                        that.SqlCommands = that.SqlCommands.concat(deleteCmd);\n                        //console.log(deleteCmd);\n                        break;\n                    case _core2.default.storageProviders.DbCreationType.DropAllExistingTables:\n                        for (var objName in existObjectInDB) {\n                            if (objName && !objName.match('^__') && !objName.match('^sqlite_')) {\n                                that.SqlCommands.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[objName].tbl_name + \"];\");\n                            }\n                        }\n                        break;\n                }\n                that._runSqlCommands(sqlConnection, { success: callBack.success, error: callBack.error });\n            },\n            error: callBack.error\n        });\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var sqlConnection = this._createSqlConnection();\n        var sql = this._compile(query);\n        query.actionPack = sql.actions;\n        query.sqlConvertMetadata = sql.converter;\n        query.modelBinderConfig = sql.modelBinderConfig;\n        var sqlCommand = sqlConnection.createCommand(sql.sqlText, sql.params);\n        var that = this;\n        sqlCommand.executeQuery({\n            success: function success(sqlResult) {\n                if (callBack.success) {\n                    query.rawDataList = sqlResult.rows;\n                    callBack.success(query);\n                }\n            },\n            error: callBack.error\n        });\n    },\n    _compile: function _compile(query, params) {\n        var compiler = new _core2.default.storageProviders.sqLite.SQLiteCompiler();\n        var compiled = compiler.compile(query);\n        //console.dir(compiled);\n        compiled.hasSelect = compiler.select != null;\n        return compiled;\n    },\n    getTraceString: function getTraceString(query) {\n        var sqlText = this._compile(query);\n        return sqlText;\n    },\n    _runSqlCommands: function _runSqlCommands(sqlConnection, callBack) {\n        if (this.SqlCommands && this.SqlCommands.length > 0) {\n            var cmdStr = this.SqlCommands.pop();\n            var command = sqlConnection.createCommand(cmdStr, null);\n            var that = this;\n            var okFn = function okFn(result) {\n                that._runSqlCommands.apply(that, [sqlConnection, callBack]);\n            };\n            command.executeQuery({ success: okFn, error: callBack.error });\n        } else {\n            callBack.success(this.context);\n        }\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n    saveChanges: function saveChanges(callback, changedItems) {\n        var sqlConnection = this._createSqlConnection();\n        var provider = this;\n        var independentBlocks = this.buildIndependentBlocks(changedItems);\n        this.saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback);\n    },\n    saveIndependentBlocks: function saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback) {\n        /// <summary>\n        /// Saves the sequentially independent items to the database.\n        /// </summary>\n        /// <param name=\"independentBlocks\">Array of independent block of items.</param>\n        /// <param name=\"sqlConnection\">sqlConnection to use</param>\n        /// <param name=\"callback\">Callback on finish</param>\n        var provider = this;\n        var t = [].concat(independentBlocks);\n        function saveNextIndependentBlock() {\n            if (t.length === 0) {\n                callback.success();\n                return;\n            }\n            var currentBlock = t.shift();\n            // Converting items to their physical equivalent (?)\n            var convertedItems = currentBlock.map(function (item) {\n                var dbType = provider.context._storageModel.getStorageModel(item.data.getType()).PhysicalType;\n                item.physicalData = dbType.convertTo(item.data);\n                return item;\n            }, this);\n            try {\n                provider.saveIndependentItems(convertedItems, sqlConnection, {\n                    success: function success() {\n                        provider.postProcessItems(convertedItems);\n                        saveNextIndependentBlock();\n                    },\n                    error: callback.error\n                });\n            } catch (e) {\n                callback.error(e);\n            }\n        }\n        saveNextIndependentBlock();\n    },\n\n    saveIndependentItems: function saveIndependentItems(items, sqlConnection, callback) {\n        var provider = this;\n        var queries = items.map(function (item) {\n            return provider.saveEntitySet(item);\n        });\n        queries = queries.filter(function (item) {\n            return item;\n        });\n        if (queries.length === 0) {\n            callback.success(items);\n            return;\n        }\n        function toCmd(sqlConnection, queries) {\n            var cmdParams = { query: [], param: [] };\n            queries.forEach(function (item, i) {\n                if (item) {\n                    if (item.query) cmdParams.query[i] = item.query;\n                    if (item.param) cmdParams.param[i] = item.param;\n                }\n            });\n            return sqlConnection.createCommand(cmdParams.query, cmdParams.param);\n        }\n        var cmd = toCmd(sqlConnection, queries);\n        cmd.executeQuery({\n            success: function success(results) {\n                var reloadQueries = results.map(function (result, i) {\n                    if (result && result.insertId) {\n                        return provider.save_reloadSavedEntity(result.insertId, items[i].entitySet.tableName, sqlConnection);\n                    } else {\n                        return null;\n                    }\n                });\n                var cmd = toCmd(sqlConnection, reloadQueries);\n                if (cmd.query.length > 0) {\n                    cmd.executeQuery(function (results) {\n                        results.forEach(function (item, i) {\n                            if (item && item.rows) {\n                                items[i].physicalData.initData = item.rows[0];\n                            }\n                        });\n                        callback.success(items);\n                    });\n                } else {\n                    callback.success(0); //TODO Zenima: fixed this!\n                }\n            },\n            error: callback.error\n        });\n    },\n    postProcessItems: function postProcessItems(changedItems) {\n        var pmpCache = {};\n        function getPublicMappedProperties(type) {\n            var key = type.name;\n            if (pmpCache.hasOwnProperty(key)) return pmpCache[key];else {\n                var pmp = type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                    return memDef.computed;\n                });\n                return pmpCache[key] = pmp;\n            }\n        }\n        changedItems.forEach(function (item) {\n            if (item.physicalData) {\n                getPublicMappedProperties(item.data.getType()).forEach(function (memDef) {\n                    item.data[memDef.name] = item.physicalData[memDef.name];\n                }, this);\n            }\n        }, this);\n    },\n\n    saveEntitySet: function saveEntitySet(item) {\n        switch (item.data.entityState) {\n            case _core2.default.EntityState.Added:\n                return this.save_NewEntity(item);break;\n            case _core2.default.EntityState.Deleted:\n                return this.save_DeleteEntity(item);break;\n            case _core2.default.EntityState.Modified:\n                return this.save_UpdateEntity(item);break;\n            case _core2.default.EntityState.Unchanged:\n                return;break;\n            default:\n                _core.Guard.raise(new _core.Exception('Not supported entity state'));\n        }\n    },\n    save_DeleteEntity: function save_DeleteEntity(item) {\n        ///DELETE FROM Posts WHERE Id=1;\n        var deleteSqlString = \"DELETE FROM [\" + item.entitySet.tableName + \"] WHERE(\";\n        var hasCondition = false;\n        var addAllField = false;\n        var deleteParam = [];\n        while (!hasCondition) {\n            item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n\n                if (hasCondition && !deleteSqlString.match(\" AND $\")) {\n                    deleteSqlString += \" AND \";\n                }\n                if (fieldDef.key || addAllField) {\n                    deleteSqlString += \"([\" + fieldDef.name + \"] == ?)\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        deleteParam.push(logicalFieldDef.converter[this.providerName].toDb(item.data[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        deleteParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.data[fieldDef.name]));\n                    }\n                    hasCondition = true;\n                }\n            }, this);\n            if (!hasCondition) {\n                addAllField = true;\n            }\n        }\n        if (deleteSqlString.match(\" AND $\")) {\n            deleteSqlString = deleteSqlString.slice(0, deleteSqlString.length - 5);\n        }\n        deleteSqlString += \");\";\n        return { query: deleteSqlString, param: deleteParam };\n    },\n    save_UpdateEntity: function save_UpdateEntity(item) {\n        var setSection = \" SET \";\n        var whereSection = \"WHERE(\";\n\n        var fieldsMaxIndex = item.entitySet.createNew.memberDefinitions.length;\n        var hasCondition = false;\n        var addAllField = false;\n        var whereParam = [];\n        var setParam = [];\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n            if (item.physicalData[fieldDef.name] !== undefined) {\n                if (hasCondition && !whereSection.match(\" AND $\")) {\n                    whereSection += \" AND \";\n                }\n                if (setSection.length > 5 && !setSection.match(',$')) {\n                    setSection += ',';\n                }\n                if (fieldDef.key) {\n                    whereSection += '([' + fieldDef.name + '] == ?)';\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        whereParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], fieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        whereParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\n                    }\n                    hasCondition = true;\n                } else {\n                    setSection += \"[\" + fieldDef.name + \"] = ?\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        setParam.push(fieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        setParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\n                    }\n                }\n            }\n        }, this);\n        if (!hasCondition) {\n            _core.Guard.raise(new _core.Exception('Not supported UPDATE function without primary key!'));\n        }\n\n        if (whereSection.match(\" AND $\")) {\n            whereSection = whereSection.slice(0, whereSection.length - 5);\n        }\n        if (setSection.match(\",$\")) {\n            setSection = setSection.slice(0, setSection.length - 1);\n        }\n        var updateSqlString = \"UPDATE [\" + item.entitySet.tableName + \"]\" + setSection + \" \" + whereSection + \");\";\n        return { query: updateSqlString, param: setParam.concat(whereParam) };\n    },\n    save_NewEntity: function save_NewEntity(item) {\n        var insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"](\";\n        var fieldList = \"\";\n        var fieldValue = \"\";\n        var fieldParam = [];\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n            if (fieldDef.key && !fieldDef.computed && _core.Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\n                _core.Guard.raise(new _core.Exception('Key is not set', 'Value exception', item));\n                return;\n            }\n            if (fieldDef.key && fieldDef.computed && _core.Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\n                var typeName = _core.Container.resolveName(fieldDef.type);\n                if (typeof this.supportedAutoincrementKeys[typeName] === 'function') {\n                    item.physicalData[fieldDef.name] = this.supportedAutoincrementKeys[typeName]();\n                }\n            }\n\n            if (fieldList.length > 0 && fieldList[fieldList.length - 1] != \",\") {\n                fieldList += \",\";fieldValue += \",\";\n            }\n            var fieldName = fieldDef.name;\n            if ( /*item.physicalData[fieldName] !== null && */item.physicalData[fieldName] !== undefined) {\n                if (fieldDef.dataType && (!fieldDef.dataType.isAssignableTo || fieldDef.dataType.isAssignableTo && !fieldDef.dataType.isAssignableTo(_core2.default.EntitySet))) {\n                    fieldValue += '?';\n                    fieldList += \"[\" + fieldName + \"]\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        fieldParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[fieldName], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        fieldParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldName]));\n                    }\n                }\n            }\n        }, this);\n        if (fieldParam.length < 1) {\n            insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"] Default values\";\n        } else {\n            if (fieldList[fieldList.length - 1] == \",\") {\n                fieldList = fieldList.slice(0, fieldList.length - 1);\n            }\n            if (fieldValue[fieldValue.length - 1] == \",\") {\n                fieldValue = fieldValue.slice(0, fieldValue.length - 1);\n            }\n            insertSqlString += fieldList + \") VALUES(\" + fieldValue + \");\";\n        }\n        return { query: insertSqlString, param: fieldParam };\n    },\n    save_reloadSavedEntity: function save_reloadSavedEntity(rowid, tableName) {\n        return { query: \"SELECT * FROM \" + tableName + \" WHERE rowid=?\", param: [rowid] };\n    },\n    createSqlFromStorageModel: function createSqlFromStorageModel(memberDef) {\n        ///<param name=\"memberDef\" type=\"$data.StorageModel\">StorageModel object wich contains physical entity definition</param>\n        if (memberDef === undefined || memberDef === null || memberDef.PhysicalType === undefined) {\n            _core.Guard.raise(\"StorageModel not contains physical entity definition\");\n        }\n\n        var keyFieldNumber = 0;\n        var autoincrementFieldNumber = 0;\n\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\n\n            if (item.key) {\n                keyFieldNumber++;\n            }\n            if (item.computed) {\n                //if (!item.key) {\n                //    Guard.raise(new Exception('Only key field can be computed field!'));\n                //}\n                autoincrementFieldNumber++;\n            }\n        }, this);\n\n        if (autoincrementFieldNumber === 1 && keyFieldNumber > 1) {\n            _core.Guard.raise(new _core.Exception('Do not use computed field with multiple primary key!'));\n        }\n        if (autoincrementFieldNumber > 1 && keyFieldNumber > 1) {\n            _core.Guard.raise(new _core.Exception('Do not use multiple computed field!'));\n        }\n\n        memberDef.PhysicalType.memberDefinitions.getKeyProperties().forEach(function (item, index) {\n            var typeName = _core.Container.resolveName(item.type);\n            if (item.computed && !(typeName in this.supportedAutoincrementKeys)) {\n                console.log(\"WARRNING! '\" + typeName + \"' not supported as computed Key!\");\n            }\n        }, this);\n\n        var sql = \"CREATE TABLE IF NOT EXISTS [\" + memberDef.TableName + \"] (\";\n        var pkFragment = ',PRIMARY KEY (';\n\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\n\n            if (index > 0 && !sql.match(', $') && !sql.match('\\\\($')) sql += ', ';\n            //var field = memberDef.createNew.memberDefinitions[fieldIndex];\n            sql += this.createSqlFragmentFromField(item, autoincrementFieldNumber === 1, memberDef);\n            if (autoincrementFieldNumber === 0 && item.key) {\n                if (pkFragment.length > 14 && !pkFragment.match(', $')) pkFragment += ', ';\n                pkFragment += \"[\" + item.name + \"]\";\n            }\n        }, this);\n\n        if (sql.match(', $')) sql = sql.substr(0, sql.length - 2);\n        if (autoincrementFieldNumber === 0 && pkFragment.length > 14) {\n            sql += pkFragment + ')';\n        }\n        sql += ');';\n        return sql;\n    },\n    createSqlFragmentFromField: function createSqlFragmentFromField(field, parsePk, storageModelObject) {\n        if ('schemaCreate' in field && field['schemaCreate']) return field.schemaCreate(field);\n\n        var fldBuilder = new this.FieldTypeBuilder(field, this, parsePk, storageModelObject);\n        return fldBuilder.build();\n    },\n    FieldTypeBuilder: function FieldTypeBuilder(field, prov, parseKey, storageModelObject) {\n        this.fieldDef = \"\";\n        this.fld = field;\n        this.provider = prov;\n        this.parsePk = parseKey;\n        this.entitySet = storageModelObject;\n        this.build = function () {\n\n            var typeName = _core.Container.resolveName(this.fld.dataType);\n            var mapping = _core2.default.SqLiteFieldMapping[typeName];\n\n            if (mapping) {\n                this.buildFieldNameAndType(mapping);\n            } else {\n                this.buildRelations();\n            }\n\n            return this.fieldDef;\n        };\n        this.buildFieldNameAndType = function (type) {\n            this.fieldDef = \"[\" + this.fld.name + \"] \" + type;\n            this.parsePk ? this.buildPrimaryKey() : this.buildNotNull();\n        };\n        this.buildPrimaryKey = function () {\n            if (this.fld.key) {\n                this.fieldDef += \" PRIMARY KEY\";\n\n                var typeName = _core.Container.resolveName(this.fld.dataType);\n                if (this.provider.supportedAutoincrementKeys[typeName] === true) {\n                    this.buildAutoIncrement();\n                }\n            } else {\n                this.buildNotNull();\n            }\n        };\n        this.buildNotNull = function () {\n            if (this.fld.required) this.fieldDef += \" NOT NULL\";\n        };\n        this.buildAutoIncrement = function () {\n            if (this.fld.computed) this.fieldDef += \" AUTOINCREMENT\";\n        };\n    }\n}, {\n    isSupported: {\n        get: function get() {\n            return \"openDatabase\" in _core2.default.__global;\n        },\n        set: function set() {}\n    }\n});\n\nif (_core2.default.storageProviders.sqLite.SqLiteStorageProvider.isSupported) {\n    _core2.default.StorageProviderBase.registerProvider(\"webSql\", _core2.default.storageProviders.sqLite.SqLiteStorageProvider);\n    _core2.default.StorageProviderBase.registerProvider(\"sqLite\", _core2.default.storageProviders.sqLite.SqLiteStorageProvider);\n    _core2.default.webSqlProvider = _core2.default.storageProviders.sqLite.SqLiteStorageProvider;\n}\n\n},{\"jaydata/core\":\"jaydata/core\"}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlExpressionMonitor', _core2.default.Expressions.ExpressionMonitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.VisitIncludeExpression = function (expression, context) {\n            var newSourceExpression = this.Visit(expression.source, context);\n            monitorDefinition.isMapped = true;\n            var newSelectorExpresion = this.Visit(expression.selector, context);\n            monitorDefinition.isMapped = false;\n\n            if (newSourceExpression !== expression.source || newSelectorExpresion !== expression.selector) {\n                return _core.Container.createIncludeExpression(newSourceExpression, newSelectorExpresion);\n            }\n            return expression;\n        };\n        this.VisitProjectionExpression = function (expression, context) {\n            var source = this.Visit(expression.source, context);\n            monitorDefinition.isMapped = true;\n            var selector = this.Visit(expression.selector, context);\n            monitorDefinition.isMapped = false;\n            if (source !== expression.source || selector !== expression.selector) {\n                var expr = _core.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n                expr.projectionAs = expression.projectionAs;\n                return expr;\n            }\n            return expression;\n        };\n    }\n\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],14:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlFilterCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        this.Visit(expression.expression, sqlBuilder);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.resolution.mapTo);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.operand, sqlBuilder);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        var self = this;\n\n        if (expression.nodeType == \"arrayIndex\") {\n            this.Visit(expression.left, sqlBuilder);\n        } else {\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n\n            //check null filter\n            if (expression.left instanceof _core2.default.Expressions.EntityFieldExpression && expression.right instanceof _core2.default.Expressions.ConstantExpression && expression.right.value === null) {\n                this.Visit(expression.left, sqlBuilder);\n                sqlBuilder.addText(expression.resolution.nullMap);\n            } else if (expression.right instanceof _core2.default.Expressions.EntityFieldExpression && expression.left instanceof _core2.default.Expressions.ConstantExpression && expression.left.value === null) {\n                this.Visit(expression.right, sqlBuilder);\n                sqlBuilder.addText(expression.resolution.nullMap);\n            } else {\n                this.Visit(expression.left, sqlBuilder);\n                sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\n\n                if (expression.nodeType == \"in\") {\n                    //TODO: refactor and generalize\n                    _core.Guard.requireType(\"expression.right\", expression.right, _core2.default.Expressions.ConstantExpression);\n                    var set = expression.right.value;\n                    if (set instanceof Array) {\n                        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n                        set.forEach(function (item, i) {\n                            if (i > 0) sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                            self.Visit(item, sqlBuilder);\n                        });\n                        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n                    } else if (set instanceof _core2.default.Queryable) {\n                        sqlBuilder.addText(\"(SELECT d FROM (\" + set.toTraceString().sqlText + \"))\");\n                        //Guard.raise(\"Not yet... but coming!\");\n                    } else {\n                            _core.Guard.raise(new _core.Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\n                        };\n                } else {\n                    this.Visit(expression.right, sqlBuilder);\n                }\n            }\n\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n        }\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\n        /// <param name=\"sqlBuilder\"></param>\n\n        //this.Visit(expression.operation);\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        var opDefinition = expression.operation.memberDefinition;\n        var opName = opDefinition.mapTo || opDefinition.name;\n\n        sqlBuilder.addText(opName);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        if (opName === \"like\") {\n            var builder = _core2.default.sqLite.SqlBuilder.create([], sqlBuilder.entityContext);\n            builder.selectTextPart(\"fragment\");\n            this.Visit(expression.parameters[0], builder);\n            var fragment = builder.getTextPart(\"fragment\");\n            fragment.params.forEach(function (p) {\n                var v = p;\n                var paramDef = opDefinition.parameters[0];\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\n                v = paramDef.suffix ? v + paramDef.suffix : v;\n                sqlBuilder.addParameter(v);\n            });\n            sqlBuilder.addText(fragment.text);\n            sqlBuilder.addText(\" , \");\n            this.Visit(expression.source, sqlBuilder);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            expression.parameters.forEach(function (p) {\n                sqlBuilder.addText(\" , \");\n                this.Visit(p, sqlBuilder);\n            }, this);\n        };\n\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        sqlBuilder.addText(expression.memberName);\n    },\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, sqlBuilder) {\n        var value = null;\n        if (expression.type == \"array\") {\n            value = expression.value[expression.index];\n        } else {\n            value = expression.value;\n        }\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        //var typeNameHintFromValue = Container.getTypeName(expression.value);\n        var value = sqlBuilder.entityContext.storageProvider.fieldConverter.toDb[_core.Container.resolveName(_core.Container.resolveType(expression.type))](expression.value);;\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n        sqlBuilder.addText(\"__\");\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],15:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlOrderCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(expression, sqlBuilder) {\n        this.Visit(expression, sqlBuilder);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, sqlBuilder) {\n        this.Visit(expression.selector, sqlBuilder);\n        if (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending) {\n            sqlBuilder.addText(\" DESC\");\n        } else {\n            sqlBuilder.addText(\" ASC\");\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        this.Visit(expression.expression, sqlBuilder);\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        sqlBuilder.addText(expression.memberName);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n        sqlBuilder.addText('__');\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlPagingCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, sqlBuilder) {\n        this.Visit(expression.amount, sqlBuilder);\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        sqlBuilder.addParameter(expression.value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlProjectionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.anonymFiledPrefix = \"\";\n        this.currentObjectLiteralName = null;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, sqlBuilder) {\n        this.Visit(expression.selector, sqlBuilder);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.anonymFiledPrefix = sqlBuilder.getExpressionAlias(expression.expression) + '__';\n            this.MappedFullEntitySet(expression.expression, sqlBuilder);\n        } else if (expression.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.Visit(expression.expression, sqlBuilder);\n        } else {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid\");\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.rowIdName);\n            sqlBuilder.addText(', ');\n            sqlBuilder.addKeyField(_SqLiteCompiler.SqlStatementBlocks.rowIdName);\n            this.Visit(expression.expression, sqlBuilder);\n            if (!(expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression)) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.scalarFieldName);\n            }\n        }\n    },\n\n    VisitEntityExpressionAsProjection: function VisitEntityExpressionAsProjection(expression, sqlBuilder) {\n        var ee = expression.expression;\n        var alias = sqlBuilder.getExpressionAlias(ee.source);\n\n        var localPrefix = this.anonymFiledPrefix + (expression.fieldName ? expression.fieldName : '');\n        localPrefix = localPrefix ? localPrefix + '__' : '';\n\n        ee.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberInfo, index) {\n            if (index > 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n\n            var fieldName = localPrefix + memberInfo.name;\n\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(memberInfo.name);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(fieldName);\n        }, this);\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\n        /// <param name=\"sqlBuilder\"></param>\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        var opDefinition = expression.operation.memberDefinition;\n        var opName = opDefinition.mapTo || opDefinition.name;\n\n        sqlBuilder.addText(opName);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        if (opName === \"like\") {\n            var builder = _core2.default.sqLite.SqlBuilder.create();\n            this.Visit(expression.parameters[0], builder);\n            builder.params.forEach(function (p) {\n                var v = p;\n                var paramDef = opDefinition.parameters[0];\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\n                v = paramDef.suffix ? v + paramDef.suffix : v;\n                sqlBuilder.addParameter(v);\n            });\n            sqlBuilder.addText(builder.sql);\n            sqlBuilder.addText(\" , \");\n            this.Visit(expression.source, sqlBuilder);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            expression.parameters.forEach(function (p) {\n                sqlBuilder.addText(\" , \");\n                this.Visit(p, sqlBuilder);\n            }, this);\n        };\n\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.resolution.mapTo);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.operand, sqlBuilder);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, sqlBuilder) {\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.left, sqlBuilder);\n        var self = this;\n        sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\n        if (expression.nodeType == \"in\") {\n            //TODO: refactor and generalize\n            _core.Guard.requireType(\"expression.right\", expression.right, _core2.default.Expressions.ConstantExpression);\n            var set = expression.right.value;\n            if (set instanceof Array) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n                set.forEach(function (item, i) {\n                    if (i > 0) sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                    var c = _core.Container.createConstantExpression(item);\n                    self.Visit(c, sqlBuilder);\n                });\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n            } else if (set instanceof _core2.default.Queryable) {\n                _core.Guard.raise(\"not yet... but coming\");\n            } else {\n                _core.Guard.raise(new _core.Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\n            };\n        } else {\n            this.Visit(expression.right, sqlBuilder);\n        }\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        var value = expression.value;\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        if (expression.source instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            var alias = sqlBuilder.getExpressionAlias(expression.source.source.source);\n            var storageModel = expression.source.source.storageModel.ComplexTypes[expression.source.selector.memberName];\n            var member = storageModel.ReferentialConstraint.filter(function (item) {\n                return item[expression.source.selector.memberName] == expression.selector.memberName;\n            })[0];\n            if (!member) {\n                _core.Guard.raise(new _core.Exception('Compiler error! ComplexType does not contain ' + expression.source.selector.memberName + ' property!'));return;\n            }\n\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(member[storageModel.From]);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            this.Visit(expression.selector, sqlBuilder);\n        }\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression.source.source);\n        var storageModel = expression.source.storageModel.ComplexTypes[expression.selector.memberName];\n        storageModel.ReferentialConstraint.forEach(function (constrain, index) {\n            if (index > 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(constrain[storageModel.From]);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(this.anonymFiledPrefix + constrain[storageModel.To]);\n        }, this);\n    },\n\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.memberName);\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, sqlBuilder) {\n        var membersNumber = expression.members.length;\n        for (var i = 0; i < membersNumber; i++) {\n            if (i != 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n            this.Visit(expression.members[i], sqlBuilder);\n        }\n    },\n    MappedFullEntitySet: function MappedFullEntitySet(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        var properties = expression.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties();\n        properties.forEach(function (prop, index) {\n            if (!prop.association) {\n                if (index > 0) {\n                    sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                }\n                sqlBuilder.addText(alias);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n                sqlBuilder.addText(prop.name);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(this.anonymFiledPrefix + prop.name);\n            }\n        }, this);\n        //ToDo: complex type\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, sqlBuilder) {\n\n        var tempObjectLiteralName = this.currentObjectLiteralName;\n        if (this.currentObjectLiteralName) {\n            this.currentObjectLiteralName += '.' + expression.fieldName;\n        } else {\n            this.currentObjectLiteralName = expression.fieldName;\n        }\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\n        } else {\n\n            var tmpPrefix = this.anonymFiledPrefix;\n            this.anonymFiledPrefix += expression.fieldName + \"__\";\n\n            if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n                this.MappedFullEntitySet(expression.expression, sqlBuilder);\n            } else {\n                this.Visit(expression.expression, sqlBuilder);\n            }\n\n            this.anonymFiledPrefix = tmpPrefix;\n\n            if (!(expression.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) && !(expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) && !(expression.expression instanceof _core2.default.Expressions.EntitySetExpression)) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(this.anonymFiledPrefix + expression.fieldName);\n            }\n        }\n        this.currentObjectLiteralName = tempObjectLiteralName;\n    }\n\n}, null);\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _DbCommand = _dereq_('../../DbClient/DbCommand.js');\n\nvar _DbCommand2 = _interopRequireDefault(_DbCommand);\n\nvar _DbConnection = _dereq_('../../DbClient/DbConnection.js');\n\nvar _DbConnection2 = _interopRequireDefault(_DbConnection);\n\nvar _OpenDbCommand = _dereq_('../../DbClient/OpenDatabaseClient/OpenDbCommand.js');\n\nvar _OpenDbCommand2 = _interopRequireDefault(_OpenDbCommand);\n\nvar _OpenDbConnection = _dereq_('../../DbClient/OpenDatabaseClient/OpenDbConnection.js');\n\nvar _OpenDbConnection2 = _interopRequireDefault(_OpenDbConnection);\n\nvar _JayStorageCommand = _dereq_('../../DbClient/JayStorageClient/JayStorageCommand.js');\n\nvar _JayStorageCommand2 = _interopRequireDefault(_JayStorageCommand);\n\nvar _JayStorageConnection = _dereq_('../../DbClient/JayStorageClient/JayStorageConnection.js');\n\nvar _JayStorageConnection2 = _interopRequireDefault(_JayStorageConnection);\n\nvar _SqLiteNjCommand = _dereq_('../../DbClient/SqLiteNjClient/SqLiteNjCommand.js');\n\nvar _SqLiteNjCommand2 = _interopRequireDefault(_SqLiteNjCommand);\n\nvar _SqLiteNjConnection = _dereq_('../../DbClient/SqLiteNjClient/SqLiteNjConnection.js');\n\nvar _SqLiteNjConnection2 = _interopRequireDefault(_SqLiteNjConnection);\n\nvar _SqLiteConverter = _dereq_('./SqLiteConverter.js');\n\nvar _SqLiteConverter2 = _interopRequireDefault(_SqLiteConverter);\n\nvar _SqLiteStorageProvider = _dereq_('./SqLiteStorageProvider.js');\n\nvar _SqLiteStorageProvider2 = _interopRequireDefault(_SqLiteStorageProvider);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nvar _SqLiteCompiler2 = _interopRequireDefault(_SqLiteCompiler);\n\nvar _SqlPagingCompiler = _dereq_('./SqlPagingCompiler.js');\n\nvar _SqlPagingCompiler2 = _interopRequireDefault(_SqlPagingCompiler);\n\nvar _SqlOrderCompiler = _dereq_('./SqlOrderCompiler.js');\n\nvar _SqlOrderCompiler2 = _interopRequireDefault(_SqlOrderCompiler);\n\nvar _SqlProjectionCompiler = _dereq_('./SqlProjectionCompiler.js');\n\nvar _SqlProjectionCompiler2 = _interopRequireDefault(_SqlProjectionCompiler);\n\nvar _SqlExpressionMonitor = _dereq_('./SqlExpressionMonitor.js');\n\nvar _SqlExpressionMonitor2 = _interopRequireDefault(_SqlExpressionMonitor);\n\nvar _SqlFilterCompiler = _dereq_('./SqlFilterCompiler.js');\n\nvar _SqlFilterCompiler2 = _interopRequireDefault(_SqlFilterCompiler);\n\nvar _sqLite_ModelBinderCompiler = _dereq_('./ModelBinder/sqLite_ModelBinderCompiler.js');\n\nvar _sqLite_ModelBinderCompiler2 = _interopRequireDefault(_sqLite_ModelBinderCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\n\n//provider\n\n\n//dbCommand\n\nmodule.exports = exports['default'];\n\n},{\"../../DbClient/DbCommand.js\":1,\"../../DbClient/DbConnection.js\":2,\"../../DbClient/JayStorageClient/JayStorageCommand.js\":3,\"../../DbClient/JayStorageClient/JayStorageConnection.js\":4,\"../../DbClient/OpenDatabaseClient/OpenDbCommand.js\":5,\"../../DbClient/OpenDatabaseClient/OpenDbConnection.js\":6,\"../../DbClient/SqLiteNjClient/SqLiteNjCommand.js\":7,\"../../DbClient/SqLiteNjClient/SqLiteNjConnection.js\":8,\"./ModelBinder/sqLite_ModelBinderCompiler.js\":9,\"./SqLiteCompiler.js\":10,\"./SqLiteConverter.js\":11,\"./SqLiteStorageProvider.js\":12,\"./SqlExpressionMonitor.js\":13,\"./SqlFilterCompiler.js\":14,\"./SqlOrderCompiler.js\":15,\"./SqlPagingCompiler.js\":16,\"./SqlProjectionCompiler.js\":17,\"jaydata/core\":\"jaydata/core\"}]},{},[18])(18)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.DbCommand', null, null,\r\n{\r\n    connection: {},\r\n    parameters: {},\r\n    execute: function (callback) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.DbConnection', null, null,\r\n{\r\n    connectionParams: {},\r\n    database: {},\r\n    isOpen: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    open: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    close: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    createCommand: function () {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.jayStorageClient.JayStorageCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback) {\r\n        // TODO\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    executeQuery: function (callback) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler) {\r\n        if (parameters == null || parameters == undefined) {\r\n            parameters = {};\r\n        }\r\n        var single = false;\r\n        if (!(query instanceof Array)) {\r\n            single = true;\r\n            query = [query];\r\n            parameters = [parameters];\r\n        }\r\n\r\n        var provider = this;\r\n        var results = [];\r\n        var remainingCommands = query.length;\r\n        var decClb = function () {\r\n            if (--remainingCommands == 0) {\r\n                callback(single ? results[0] : results);\r\n            }\r\n        };\r\n\r\n\t\tquery.forEach(function(q, i){\r\n\t\t\tif (q){\r\n\t\t\t\t$data.ajax({\r\n\t\t\t\t\turl: 'http' + (this.connection.connectionParams.storage.ssl ? 's' : '') + '://' + this.connection.connectionParams.storage.src.replace('http://', '').replace('https://', '') + '?db=' + this.connection.connectionParams.storage.key,\r\n\t\t\t\t\ttype: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'X-PINGOTHER': 'pingpong'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: { query: q, parameters: parameters[i] },\r\n\t\t\t\t\tdataType: 'json',\r\n\t\t\t\t\tcontentType: 'application/json;charset=UTF-8',\r\n\t\t\t\t\tsuccess: function(data){\r\n\t\t\t\t\t\tif (data && data.error){\r\n\t\t\t\t\t\t\tconsole.log('JayStorage error', data.error);\r\n\t\t\t\t\t\t\terrorhandler(data.error);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.lastID){\r\n\t\t\t\t\t\t\tresults[i] = { insertId: this.lastID, rows: (data || { rows: [] }).rows };\r\n\t\t\t\t\t\t}else results[i] = { rows: (data || { rows: [] }).rows };\r\n \t\t\t\t\t\tdecClb();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tresults[i] = null;\r\n\t\t\t\tdecClb();\r\n\t\t\t}\r\n\t\t}, this);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.jayStorageClient.JayStorageConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n\t\treturn true;\r\n        //return this.database !== null && this.database !== undefined;\r\n    },\r\n    open: function () {\r\n        /*if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }*/\r\n    },\r\n    close: function () {\r\n        //not supported yet (performance issue)\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.jayStorageClient.JayStorageCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.openDatabaseClient.OpenDbCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback, tran, isWrite) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\r\n    },\r\n    executeQuery: function (callback, tran, isWrite) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler, transaction, isWrite) {\r\n        // suspicious code\r\n        /*if (console) {\r\n            //console.log(query);\r\n        }*/\r\n        this.connection.open({\r\n            error: errorhandler,\r\n            success: function (tran) {\r\n                var single = false;\r\n                if (!(query instanceof Array)) {\r\n                    single = true;\r\n                    query = [query];\r\n                    parameters = [parameters];\r\n                }\r\n\r\n                var results = [];\r\n                var remainingCommands = 0;\r\n\r\n                function decClb() {\r\n                    if (--remainingCommands == 0) {\r\n                        callback(single ? results[0] : results, transaction);\r\n                    }\r\n                }\r\n\r\n                query.forEach(function (q, i) {\r\n                    remainingCommands++;\r\n                    if (q) {\r\n                        tran.executeSql(\r\n                            query[i],\r\n                            parameters[i],\r\n                            function (trx, result) {\r\n                                var r = { rows: [] };\r\n                                try {\r\n                                    r.insertId = result.insertId;\r\n                                } catch (e) {}\r\n                                if (typeof r.insertId !== 'number') {\r\n                                    // If insertId is present, no rows are returned\r\n                                    r.rowsAffected = result.rowsAffected;\r\n                                    var maxItem = result.rows.length;\r\n                                    for (var j = 0; j < maxItem; j++) {\r\n                                        r.rows.push(result.rows.item(j));\r\n                                    }\r\n                                }\r\n                                results[i] = r;\r\n                                decClb(trx);\r\n                            },\r\n                            function (trx, err) {\r\n                                var _q = q;\r\n                                var _i = i;\r\n\r\n                                if (errorhandler)\r\n                                    errorhandler(err);\r\n\r\n                                return true;\r\n                            }\r\n                        );\r\n                    } else {\r\n                        results[i] = null;\r\n                        decClb();\r\n                    }\r\n                });\r\n            }\r\n        }, transaction, isWrite);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.openDatabaseClient.OpenDbConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n        return this.database !== null && this.database !== undefined && this.transaction !== null && this.transaction !== undefined;\r\n    },\r\n    open: function (callBack, tran, isWrite) {\r\n        if (isWrite === undefined)\r\n            isWrite = true;\r\n\r\n        callBack.oncomplete = callBack.oncomplete || function () { };\r\n        if (tran) {\r\n            callBack.success(tran.transaction);\r\n        } else if (this.database) {\r\n            if (isWrite) {\r\n                this.database.transaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            } else {\r\n                this.database.readTransaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            }\r\n        } else {\r\n            var p = this.connectionParams;\r\n            var con = this;\r\n            this.database = openDatabase(p.fileName, p.version, p.displayName, p.maxSize);\r\n            if (!this.database.readTransaction) {\r\n                this.database.readTransaction = function () {\r\n                    con.database.transaction.apply(con.database, arguments);\r\n                }\r\n            }\r\n\r\n            if (isWrite) {\r\n                this.database.transaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            } else {\r\n                this.database.readTransaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            }\r\n        }\r\n    },\r\n    close: function () {\r\n        this.transaction = undefined;\r\n        this.database = undefined;\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.openDatabaseClient.OpenDbCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback) {\r\n        // TODO\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    executeQuery: function (callback) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler) {\r\n        if (!this.connection.isOpen()) {\r\n            this.connection.open();\r\n        }\r\n        if (parameters == null || parameters == undefined) {\r\n            parameters = {};\r\n        }\r\n        var single = false;\r\n        if (!(query instanceof Array)) {\r\n            single = true;\r\n            query = [query];\r\n            parameters = [parameters];\r\n        }\r\n\r\n        var provider = this;\r\n        var results = [];\r\n        var remainingCommands = 0;\r\n        var decClb = function () {\r\n            if (--remainingCommands == 0) {\r\n                provider.connection.database.exec('COMMIT');\r\n                callback(single ? results[0] : results);\r\n            }\r\n        };\r\n        provider.connection.database.exec('BEGIN');\r\n        query.forEach(function (q, i) {\r\n            remainingCommands++;\r\n            if (q) {\r\n                var sqlClb = function (error, rows) {\r\n                    if (error != null) {\r\n                        errorhandler(error);\r\n                        return;\r\n                    }\r\n                    if (this.lastID) {\r\n                        results[i] = { insertId: this.lastID, rows: [] };\r\n                    } else {\r\n                        results[i] = { rows: rows };\r\n                    }\r\n                    decClb();\r\n                };\r\n\r\n                var stmt = provider.connection.database.prepare(q, parameters[i]);\r\n                if (q.indexOf('SELECT') == 0) {\r\n                    stmt.all(sqlClb);\r\n                } else {\r\n                    stmt.run(sqlClb);\r\n                }\r\n                stmt.finalize();\r\n            } else {\r\n                results[i] = null;\r\n                decClb();\r\n            }\r\n        }, this);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n        return this.database !== null && this.database !== undefined;\r\n    },\r\n    open: function () {\r\n        if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }\r\n    },\r\n    close: function () {\r\n        //not supported yet (performance issue)\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.sqLiteNJClient.SqLiteNjCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.sqLite.sqLite_ModelBinderCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, context) {\r\n        this._query = query;\r\n        this.sqlContext = context;\r\n        this._sqlBuilder = $data.sqLite.SqlBuilder.create(context.sets, context.entityContext);\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor();\r\n        projVisitor.Visit(expression);\r\n\r\n        if (projVisitor.projectionExpression) {\r\n            this.Visit(projVisitor.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\r\n            if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n                if (prop.key) {\r\n                    if (this.currentObjectFieldName) {\r\n                        builder.addKeyField(this.currentObjectFieldName + '__' + prop.name);\r\n                    } else {\r\n                        builder.addKeyField(prop.name);\r\n                    }\r\n                }\r\n                if (this.currentObjectFieldName) {\r\n                    builder.modelBinderConfig[prop.name] = this.currentObjectFieldName + '__' + prop.name;\r\n                } else {\r\n                    builder.modelBinderConfig[prop.name] = prop.name;\r\n                }\r\n            }\r\n        }, this);\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n\r\n            builder.selectModelBinderProperty(ct.FromPropertyName);\r\n            builder.modelBinderConfig['$type'] = ct.ToType;\r\n            var tmpPrefix = this.currentObjectFieldName;\r\n            if (this.currentObjectFieldName) {\r\n                this.currentObjectFieldName += '__';\r\n            } else {\r\n                this.currentObjectFieldName = '';\r\n            }\r\n            this.currentObjectFieldName += ct.FromPropertyName;\r\n            //recursion\r\n            this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n            //reset model binder property\r\n            builder.popModelBinderProperty();\r\n            this.currentObjectFieldName = tmpPrefix;\r\n\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = this._query.defaultType;\r\n        var storageModel = this._query.context._storageModel.getStorageModel(this._query.defaultType);\r\n\r\n        var needPrefix = this.sqlContext.infos.filter(function (i) { return i.IsMapped; }).length > 1;\r\n        if (needPrefix) {\r\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[0]);\r\n        }\r\n        this._addPropertyToModelBinderConfig(this._query.defaultType, builder);\r\n        this.sqlContext.infos.forEach(function (info, infoIndex) {\r\n            if (infoIndex > 0 && info.IsMapped) {\r\n                var pathFragments = info.NavigationPath.split('.');\r\n                pathFragments.shift();\r\n                pathFragments.forEach(function (pathFragment, index) {\r\n                    if (!pathFragment) { return; }\r\n                    if (!builder.modelBinderConfig[pathFragment]) {\r\n                        builder.selectModelBinderProperty(pathFragment);\r\n                        var isArray = false;\r\n                        if (info.Association.associationInfo.ToMultiplicity === '*' && pathFragments.length - 1 === index) {\r\n                            builder.modelBinderConfig['$type'] = $data.Array;\r\n                            builder.selectModelBinderProperty('$item');\r\n                            isArray = true;\r\n                        }\r\n\r\n                        builder.modelBinderConfig['$type'] = this.sqlContext.sets[infoIndex].elementType;\r\n                        this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[infoIndex]);\r\n                        this._addPropertyToModelBinderConfig(this.sqlContext.sets[infoIndex].elementType, builder);\r\n                        if (isArray) { builder.popModelBinderProperty(); }\r\n                    } else {\r\n                        builder.selectModelBinderProperty(pathFragment);\r\n                    }\r\n                }, this);\r\n                for (var i = 0; i < pathFragments.length; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n            builder.modelBinderConfig['$keys'].unshift('rowid$$');\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(expression.expression);\r\n            this.VisitEntitySetAsProjection(expression.expression, builder);\r\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\r\n        } else if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n        } else {\r\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\r\n            this.Visit(expression.expression, builder);\r\n            if (expression.expression instanceof $data.Expressions.EntityFieldExpression) {\r\n                builder.modelBinderConfig['$source'] = 'd';\r\n            }\r\n        }\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        builder.modelBinderConfig['$type'] = expression.entityType;\r\n        this._addPropertyToModelBinderConfig(expression.entityType, builder);\r\n    },\r\n    VisitEntitySetAsProjection: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = expression.elementType;\r\n        this._addPropertyToModelBinderConfig(expression.elementType, builder);\r\n        builder.popModelBinderProperty();\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        return expression;\r\n    },\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        if (expression.memberDefinition instanceof $data.MemberDefinition) {\r\n            builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n            if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n                this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n            } else {\r\n                builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            builder.modelBinderConfig.$selector += '.';\r\n        } else {\r\n            builder.modelBinderConfig['$selector'] = 'json:';\r\n        }\r\n        builder.modelBinderConfig['$selector'] += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitSimpleBinaryExpression: function (expression, builder) {\r\n        this.Visit(expression.left, builder);\r\n        this.Visit(expression.right, builder);\r\n        builder.modelBinderConfig['$type'] = undefined;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        var tempFieldName = this.currentObjectFieldName;\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (this.currentObjectFieldName) {\r\n            this.currentObjectFieldName += '__';\r\n        } else {\r\n            this.currentObjectFieldName = '';\r\n        }\r\n        this.currentObjectFieldName += expression.fieldName;\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n        } else if(expression.expression instanceof $data.Expressions.EntitySetExpression){\r\n            this.VisitEntitySetAsProjection(expression.expression, builder);\r\n        }\r\n        else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n        this.currentObjectFieldName = tempFieldName;\r\n\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\nexport const SqlStatementBlocks = {\r\n    beginGroup: \"(\",\r\n    endGroup: \")\",\r\n    nameSeparator: \".\",\r\n    valueSeparator: \", \",\r\n    select: \"SELECT \",\r\n    where: \" WHERE \",\r\n    from: \" FROM \",\r\n    skip: \" OFFSET \",\r\n    take: \" LIMIT \",\r\n    parameter: \"?\",\r\n    order: \" ORDER BY \",\r\n    as: \" AS \",\r\n    scalarFieldName: 'd',\r\n    rowIdName: 'rowid$$',\r\n    count: 'select count(*) cnt from ('\r\n};\r\n$C('$data.sqLite.SqlBuilder', $data.queryBuilder, null, {\r\n    constructor: function (sets, context) {\r\n        this.sets = sets;\r\n        this.entityContext = context;\r\n\r\n    },\r\n    getExpressionAlias: function (setExpression) {\r\n        var idx = this.sets.indexOf(setExpression);\r\n        if (idx == -1) {\r\n            idx = this.sets.push(setExpression) - 1;\r\n        }\r\n        return \"T\" + idx;\r\n    }\r\n});\r\n\r\n$C('$data.sqLite.SqlCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (queryExpression, context) {\r\n        this.queryExpression = queryExpression;\r\n        this.sets = context.sets;\r\n        this.infos = context.infos;\r\n        this.entityContext = context.entityContext;\r\n        this.associations = [];\r\n        this.filters = [];\r\n        this.newFilters = {};\r\n        this.sortedFilterPart = ['projection', 'from', 'filter', 'order', 'take', 'skip'];\r\n    },\r\n    compile: function () {\r\n        var sqlBuilder = $data.sqLite.SqlBuilder.create(this.sets, this.entityContext);\r\n        this.Visit(this.queryExpression, sqlBuilder);\r\n\r\n        if (sqlBuilder.getTextPart('projection') === undefined) {\r\n            this.VisitDefaultProjection(sqlBuilder);\r\n        }\r\n        sqlBuilder.selectTextPart(\"result\");\r\n        this.sortedFilterPart.forEach(function (part) {\r\n            var part = sqlBuilder.getTextPart(part);\r\n            if (part) {\r\n                sqlBuilder.addText(part.text);\r\n                sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(part.params);\r\n            }\r\n        }, this);\r\n        var countPart = sqlBuilder.getTextPart('count');\r\n        if (countPart !== undefined) {\r\n            sqlBuilder.selectedFragment.text = countPart.text + sqlBuilder.selectedFragment.text;\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n            sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(countPart.params);\r\n        }\r\n        sqlBuilder.resetModelBinderProperty();\r\n        this.filters.push(sqlBuilder);\r\n    },\r\n\r\n    VisitToArrayExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n    },\r\n    VisitCountExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('count');\r\n        sqlBuilder.addText(SqlStatementBlocks.count);\r\n    },\r\n    VisitFilterExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('filter');\r\n        sqlBuilder.addText(SqlStatementBlocks.where);\r\n        var filterCompiler = $data.sqLite.SqlFilterCompiler.create();\r\n        filterCompiler.Visit(expression.selector, sqlBuilder);\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('order');\r\n        if (this.addOrders) {\r\n            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n        } else {\r\n            this.addOrders = true;\r\n            sqlBuilder.addText(SqlStatementBlocks.order);\r\n        }\r\n        var orderCompiler = $data.sqLite.SqlOrderCompiler.create();\r\n        orderCompiler.Visit(expression, sqlBuilder);\r\n\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n\r\n        switch (expression.nodeType) {\r\n            case $data.Expressions.ExpressionType.Skip:\r\n                sqlBuilder.selectTextPart('skip');\r\n                sqlBuilder.addText(SqlStatementBlocks.skip); break;\r\n            case $data.Expressions.ExpressionType.Take:\r\n                sqlBuilder.selectTextPart('take');\r\n                sqlBuilder.addText(SqlStatementBlocks.take); break;\r\n            default: Guard.raise(\"Not supported nodeType\"); break;\r\n        }\r\n        var pagingCompiler = $data.sqLite.SqlPagingCompiler.create();\r\n        pagingCompiler.Visit(expression, sqlBuilder);\r\n        return expression;\r\n    },\r\n    VisitProjectionExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('projection');\r\n        this.hasProjection = true;\r\n        sqlBuilder.addText(SqlStatementBlocks.select);\r\n        var projectonCompiler = $data.sqLite.SqlProjectionCompiler.create();\r\n        projectonCompiler.Visit(expression, sqlBuilder);\r\n    },\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.selectTextPart('from');\r\n        sqlBuilder.addText(SqlStatementBlocks.from);\r\n        sqlBuilder.sets.forEach(function (es, setIndex) {\r\n\r\n            if (setIndex > 0) {\r\n                sqlBuilder.addText(\" \\n\\tLEFT OUTER JOIN \");\r\n            }\r\n\r\n            var alias = sqlBuilder.getExpressionAlias(es);\r\n            sqlBuilder.addText(es.instance.tableName + ' ');\r\n            sqlBuilder.addText(alias);\r\n\r\n            if (setIndex > 0) {\r\n                sqlBuilder.addText(\" ON (\");\r\n                var toSet = this.infos[setIndex];\r\n                var toPrefix = \"T\" + toSet.AliasNumber;\r\n                var fromSetName = toSet.NavigationPath.substring(0, toSet.NavigationPath.lastIndexOf('.'));\r\n                var temp = this.infos.filter(function (inf) { return inf.NavigationPath == fromSetName; }, this);\r\n                var fromPrefix = \"T0\";\r\n                if (temp.length > 0) {\r\n                    fromPrefix = \"T\" + temp[0].AliasNumber;\r\n                }\r\n                toSet.Association.associationInfo.ReferentialConstraint.forEach(function (constrain, index) {\r\n                    if(index > 0){\r\n                        sqlBuilder.addText(\" AND \");\r\n                    }\r\n                    sqlBuilder.addText(fromPrefix + \".\" + constrain[toSet.Association.associationInfo.From]);\r\n                    sqlBuilder.addText(\" = \");\r\n                    sqlBuilder.addText(toPrefix + \".\" + constrain[toSet.Association.associationInfo.To]);\r\n                }, this);\r\n                sqlBuilder.addText(\")\");\r\n            }\r\n        }, this);\r\n    },\r\n    VisitDefaultProjection: function (sqlBuilder) {\r\n        sqlBuilder.selectTextPart('projection');\r\n        var needAlias = this.infos.filter(function (i) { return i.IsMapped; }).length > 1;\r\n        if (sqlBuilder.sets.length > 1) {\r\n            sqlBuilder.addText(SqlStatementBlocks.select);\r\n            sqlBuilder.sets.forEach(function (set, masterIndex) {\r\n\r\n                if (this.infos[masterIndex].IsMapped) {\r\n                    var alias = sqlBuilder.getExpressionAlias(set);\r\n                    set.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberDef, index) {\r\n                        if (index > 0 || masterIndex > 0) {\r\n                            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                        }\r\n                        sqlBuilder.addText(alias + \".\");\r\n                        sqlBuilder.addText(memberDef.name);\r\n                        if (needAlias) {\r\n                            sqlBuilder.addText(SqlStatementBlocks.as);\r\n                            sqlBuilder.addText(alias + \"__\" + memberDef.name);\r\n                        }\r\n                    }, this);\r\n                }\r\n\r\n            }, this);\r\n\r\n        }\r\n        else {\r\n            sqlBuilder.addText(\"SELECT *\");\r\n        }\r\n    }\r\n});\r\n\r\n$data.Expressions.ExpressionNode.prototype.monitor = function (monitorDefinition, context) {\r\n    var m = $data.sqLite.SqlExpressionMonitor.create(monitorDefinition);\r\n    return m.Visit(this, context);\r\n};\r\n\r\n$C('$data.storageProviders.sqLite.SQLiteCompiler', null, null, {\r\n    compile: function (query) {\r\n        /// <param name=\"query\" type=\"$data.Query\" />\r\n        var expression = query.expression;\r\n        var context = { sets: [], infos: [], entityContext: query.context };\r\n\r\n        var optimizedIncludeExpression = expression.monitor({\r\n            MonitorEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\r\n                    this.backupEntitySetExpression = expression;\r\n                }\r\n            },\r\n            VisitCountExpression: function (expression, context) {\r\n                context.hasCountFrameOperator = true;\r\n                return expression;\r\n            },\r\n            MutateIncludeExpression: function (expression, context) {\r\n                var result = null;\r\n                if (context.hasCountFrameOperator) {\r\n                    result = expression.source;\r\n                }\r\n                else {\r\n                    var origSelector = expression.selector.value;\r\n                    Container.createCodeExpression(\"function(it){return it.\" + origSelector + \";}\", null);\r\n\r\n                    var jsCodeTree = Container.createCodeParser(this.backupEntitySetExpression.source.instance).createExpression(\"function(it){return it.\" + origSelector + \";}\");\r\n                    var code2entity = Container.createCodeToEntityConverter(this.backupEntitySetExpression.source.instance);\r\n                    var includeSelector = code2entity.Visit(jsCodeTree, { queryParameters: undefined, lambdaParameters: [this.backupEntitySetExpression] });\r\n\r\n                    result = Container.createIncludeExpression(expression.source, includeSelector);\r\n                }\r\n                return result;\r\n            }\r\n        }, context);\r\n\r\n        var optimizedExpression = optimizedIncludeExpression.monitor({\r\n            MonitorEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\r\n                    context.sets.push(expression);\r\n                    context.infos.push({ AliasNumber: 0, Association: null, FromType: null, FromPropertyName: null, IsMapped: true });\r\n                }\r\n            },\r\n            MutateEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n                    this.backupContextExpression = expression.source;\r\n                    this.path = \"\";\r\n                    return expression;\r\n                }\r\n                if (expression.selector.associationInfo.FromMultiplicity == \"0..1\" && expression.selector.associationInfo.FromMultiplicity == \"*\") {\r\n                    Guard.raise(\"Not supported query on this navigation property: \" + expression.selector.associationInfo.From + \" \" + expression.selector.associationInfo.FromPropertyName);\r\n                }\r\n\r\n                this.path += '.' + expression.selector.associationInfo.FromPropertyName;\r\n                var info = context.infos.filter(function (inf) {\r\n                    return inf.NavigationPath == this.path;\r\n                }, this);\r\n                if (info.length > 0) {\r\n                    return context.sets[info[0].AliasNumber];\r\n                }\r\n                var memberDefinitions = this.backupContextExpression.instance.getType().memberDefinitions.getMember(expression.storageModel.ItemName);\r\n                if (!memberDefinitions) {\r\n                    Guard.raise(\"Context schema error\");\r\n                }\r\n                var mi = Container.createMemberInfoExpression(memberDefinitions);\r\n                var result = Container.createEntitySetExpression(this.backupContextExpression, mi);\r\n                result.instance = this.backupContextExpression.instance[expression.storageModel.ItemName];\r\n                var aliasNum = context.sets.push(result);\r\n                context.infos.push({\r\n                    AliasNumber: aliasNum - 1,\r\n                    Association: expression.selector,\r\n                    NavigationPath: this.path,\r\n                    IsMapped: this.isMapped\r\n                });\r\n                return result;\r\n            }\r\n        }, context);\r\n\r\n        var compiler = $data.sqLite.SqlCompiler.create(optimizedExpression, context);\r\n        compiler.compile();\r\n\r\n        var sqlBuilder = $data.sqLite.SqlBuilder.create(this.sets, this.entityContext);\r\n\r\n        query.modelBinderConfig = {};\r\n        var modelBinder = $data.sqLite.sqLite_ModelBinderCompiler.create(query, context);\r\n        modelBinder.Visit(optimizedExpression);\r\n\r\n        var result = {\r\n            sqlText: compiler.filters[0].selectedFragment.text,\r\n            params: compiler.filters[0].selectedFragment.params,\r\n            modelBinderConfig: query.modelBinderConfig\r\n        };\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.SqLiteConverter = {\r\n    fromDb: {\r\n        '$data.Enum': function(v, enumType) { return $data.Container.convertTo(v, enumType); },\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        \"$data.Integer\": $data.Container.proxyConverter,\r\n        \"$data.Int32\": $data.Container.proxyConverter,\r\n        \"$data.Number\": $data.Container.proxyConverter,\r\n        \"$data.Date\": function (dbData) { return dbData != null ? new Date(dbData) : dbData; },\r\n        \"$data.DateTimeOffset\": function (dbData) { return dbData != null ? new Date(dbData) : dbData; },\r\n        \"$data.Time\": $data.Container.proxyConverter,\r\n        \"$data.String\": $data.Container.proxyConverter,\r\n        \"$data.Boolean\": function (b) { return b === 1 ? true : false; },\r\n        \"$data.Blob\": function(b){ return b ? $data.Container.convertTo(atob(b), $data.Blob) : b; },\r\n        \"$data.Array\": function () {\r\n            if (arguments.length == 0) return [];\r\n            return arguments[0] ? JSON.parse(arguments[0]) : undefined;\r\n        },\r\n        \"$data.Object\": function(v){\r\n            try{ return JSON.parse(v); }catch(err){ return v; }\r\n        },\r\n        \"$data.Guid\": function (g) { return g ? $data.parseGuid(g).toString() : g; },\r\n        '$data.GeographyPoint': function (g) { if (g) { return new $data.GeographyPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return new $data.GeographyLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return new $data.GeographyPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return new $data.GeographyMultiPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return new $data.GeographyMultiLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return new $data.GeographyMultiPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return new $data.GeographyCollection(JSON.parse(g)); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return new $data.GeometryPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return new $data.GeometryLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return new $data.GeometryPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return new $data.GeometryMultiPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return new $data.GeometryMultiLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return new $data.GeometryMultiPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return new $data.GeometryCollection(JSON.parse(g)); } return g; }\r\n    },\r\n    toDb: {\r\n        '$data.Enum': $data.Container.proxyConverter,\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        \"$data.Integer\": $data.Container.proxyConverter,\r\n        \"$data.Int32\": $data.Container.proxyConverter,\r\n        \"$data.Number\": $data.Container.proxyConverter,\r\n        \"$data.Date\": function (date) { return date ? date.valueOf() : null; },\r\n        \"$data.DateTimeOffset\": function (date) { return date ? date.valueOf() : null; },\r\n        \"$data.Time\": $data.Container.proxyConverter,\r\n        \"$data.String\": $data.Container.proxyConverter,\r\n        \"$data.Boolean\": function (b) { return b ? 1 : 0; },\r\n        \"$data.Blob\": function(b){ return b ? $data.Blob.toBase64(b) : b; },\r\n        \"$data.Array\": function (arr) { return arr ? JSON.stringify(arr) : arr; },\r\n        \"$data.Guid\": function (g) { return g ? g.toString() : g; },\r\n        \"$data.Object\": function (value) { if (value === null) { return null; } else { JSON.stringify(value); } },\r\n        '$data.GeographyPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return JSON.stringify(g); } return g; }\r\n    }\r\n};\r\n\r\n$data.SqLiteFieldMapping = {\r\n    '$data.Byte': \"INTEGER\",\r\n    '$data.SByte': \"INTEGER\",\r\n    '$data.Decimal': \"TEXT\",\r\n    '$data.Float': \"REAL\",\r\n    '$data.Int16': \"INTEGER\",\r\n    '$data.Int64': \"TEXT\",\r\n    \"$data.Integer\": \"INTEGER\",\r\n    \"$data.Int32\": \"INTEGER\",\r\n    \"$data.Number\": \"REAL\",\r\n    \"$data.Date\": \"REAL\",\r\n    \"$data.Duration\": \"TEXT\",\r\n    \"$data.Time\": \"TEXT\",\r\n    \"$data.Day\": \"TEXT\",\r\n    \"$data.DateTimeOffset\": \"REAL\",\r\n    \"$data.String\": \"TEXT\",\r\n    \"$data.Boolean\": \"INTEGER\",\r\n    \"$data.Blob\": \"BLOB\",\r\n    \"$data.Array\": \"TEXT\",\r\n    \"$data.Guid\": \"TEXT\",\r\n    \"$data.Object\": \"TEXT\",\r\n    '$data.GeographyPoint': \"TEXT\",\r\n    '$data.GeographyLineString': \"TEXT\",\r\n    '$data.GeographyPolygon': \"TEXT\",\r\n    '$data.GeographyMultiPoint': \"TEXT\",\r\n    '$data.GeographyMultiLineString': \"TEXT\",\r\n    '$data.GeographyMultiPolygon': \"TEXT\",\r\n    '$data.GeographyCollection': \"TEXT\",\r\n    '$data.GeometryPoint': \"TEXT\",\r\n    '$data.GeometryLineString': \"TEXT\",\r\n    '$data.GeometryPolygon': \"TEXT\",\r\n    '$data.GeometryMultiPoint': \"TEXT\",\r\n    '$data.GeometryMultiLineString': \"TEXT\",\r\n    '$data.GeometryMultiPolygon': \"TEXT\",\r\n    '$data.GeometryCollection': \"TEXT\"\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.storageProviders.sqLite.SqLiteStorageProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, context) {\r\n        this.SqlCommands = [];\r\n        this.context = context;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            databaseName: $data.defaults.defaultDatabaseName,\r\n            version: \"\",\r\n            displayName: \"JayData default db\",\r\n            maxSize: 1024 * 1024,\r\n            dbCreation: $data.storageProviders.DbCreationType.DropTableIfChanged\r\n        }, cfg);\r\n\r\n        this.providerName = '';\r\n        for (var i in $data.RegisteredStorageProviders) {\r\n            if ($data.RegisteredStorageProviders[i] === this.getType()) {\r\n                this.providerName = i;\r\n            }\r\n        }\r\n\r\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\r\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\r\n        }\r\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\r\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\r\n        }\r\n    },\r\n    _createSqlConnection: function () {\r\n        var ctorParm = {\r\n            fileName: this.providerConfiguration.databaseName,\r\n            version: \"\",\r\n            displayName: this.providerConfiguration.displayName,\r\n            maxSize: this.providerConfiguration.maxSize,\r\n            storage: this.providerConfiguration.storage\r\n        };\r\n\r\n        if (this.connection) return this.connection;\r\n\r\n        var connection = null;\r\n        if (this.providerConfiguration.storage) {\r\n            connection = new $data.dbClient.jayStorageClient.JayStorageConnection(ctorParm);\r\n        } else if (typeof sqLiteModule !== 'undefined') {\r\n            connection = new $data.dbClient.sqLiteNJClient.SqLiteNjConnection(ctorParm);\r\n        } else {\r\n            connection = new $data.dbClient.openDatabaseClient.OpenDbConnection(ctorParm);\r\n        }\r\n\r\n        this.connection = connection;\r\n\r\n        return connection;\r\n    },\r\n    \r\n    supportedDataTypes: {\r\n        value: [$data.Array, $data.Integer, $data.String, $data.Number, $data.Blob, $data.Array, $data.Object, $data.Boolean, $data.Date, $data.Guid, $data.GeographyPoint,\r\n            $data.GeographyLineString, $data.GeographyPolygon, $data.GeographyMultiPoint, $data.GeographyMultiLineString, $data.GeographyMultiPolygon, $data.GeographyCollection,\r\n            $data.GeometryPoint, $data.GeometryLineString, $data.GeometryPolygon, $data.GeometryMultiPoint, $data.GeometryMultiLineString, $data.GeometryMultiPolygon, $data.GeometryCollection,\r\n            $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.DateTimeOffset, $data.Duration, $data.Day],\r\n        writable: false\r\n    },\r\n    fieldConverter: { value: $data.SqLiteConverter },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression]\r\n            },\r\n            substr: {\r\n                dataType: \"string\",\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }]\r\n            },\r\n            toLowerCase: {\r\n                dataType: \"string\", mapTo: \"lower\"\r\n            },\r\n            toUpperCase: {\r\n                dataType: \"string\", mapTo: \"upper\"\r\n            },\r\n            contains: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\", suffix: \"%\" }]\r\n            },\r\n            startsWith: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", suffix: \"%\" }]\r\n            },\r\n            endsWith: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\" }]\r\n            },\r\n            'trim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'trim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            },\r\n            'ltrim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'ltrim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            },\r\n            'rtrim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'rtrim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\r\n            notEqual: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\r\n            equalTyped: { mapTo: '=', dataType: \"boolean\" },\r\n            notEqualTyped: { mapTo: '!=', dataType: \"boolean\" },\r\n            greaterThan: { mapTo: '>', dataType: \"boolean\" },\r\n            greaterThanOrEqual: { mapTo: '>=', dataType: \"boolean\" },\r\n\r\n            lessThan: { mapTo: '<', dataType: \"boolean\" },\r\n            lessThenOrEqual: { mapTo: '<=', dataType: \"boolean\" },\r\n            or: { mapTo: 'OR', dataType: \"boolean\" },\r\n            and: { mapTo: 'AND', dataType: \"boolean\" },\r\n\r\n            add: { mapTo: '+', dataType: \"number\" },\r\n            divide: { mapTo: '/' },\r\n            multiply: { mapTo: '*' },\r\n            subtract: { mapTo: '-' },\r\n            modulo: { mapTo: '%' },\r\n\r\n            orBitwise: { maptTo: \"|\" },\r\n            andBitwsise: { mapTo: \"&\" },\r\n\r\n            \"in\": { mapTo: \"in\", dataType: \"boolean\" }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' },\r\n            positive: { mapTo: '+' },\r\n            negative: { maptTo: '-' }\r\n        }\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {},\r\n            include: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value:{\r\n            '$data.Integer': true,\r\n            '$data.Int32': true,\r\n            '$data.Guid': function () { return $data.createGuid(); }\r\n        }\r\n    },\r\n\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        this.context._storageModel.forEach(function (item, index) {\r\n            this.SqlCommands.push(this.createSqlFromStorageModel(item) + \" \");\r\n        }, this);\r\n\r\n        var sqlConnection = this._createSqlConnection();\r\n        var cmd = sqlConnection.createCommand(\"SELECT * FROM sqlite_master WHERE type = 'table'\", null);\r\n        var that = this;\r\n\r\n        cmd.executeQuery({\r\n            success: function (result) {\r\n                var existObjectInDB = {};\r\n                for (var i = 0; i < result.rows.length; i++) {\r\n                    var item = result.rows[i];\r\n                    existObjectInDB[item.tbl_name] = item;\r\n                }\r\n                switch (that.providerConfiguration.dbCreation) {\r\n                    case $data.storageProviders.DbCreationType.Merge:\r\n                        Guard.raise(new Exception('Not supported db creation type'));\r\n                        break;\r\n                    case $data.storageProviders.DbCreationType.DropTableIfChanged:\r\n                        var deleteCmd = [];\r\n                        for (var i = 0; i < that.SqlCommands.length; i++) {\r\n                            if (that.SqlCommands[i] == \"\") { continue; }\r\n                            var regEx = new RegExp('^CREATE TABLE IF NOT EXISTS ([^ ]*) (\\\\(.*\\\\))', 'g');\r\n                            var data = regEx.exec(that.SqlCommands[i]);\r\n                            if (data) {\r\n                                var tableName = data[1];\r\n                                var tableDef = data[2];\r\n                                if (existObjectInDB[tableName.slice(1, tableName.length - 1)]) {\r\n                                    var regex = new RegExp('\\\\(.*\\\\)', 'g');\r\n                                    var existsRegExMatches = existObjectInDB[tableName.slice(1, tableName.length - 1)].sql.match(regex);\r\n\r\n                                    if (!existsRegExMatches || tableDef.toLowerCase() != existsRegExMatches[0].toLowerCase()) {\r\n                                        deleteCmd.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[tableName.slice(1, tableName.length - 1)].tbl_name + \"];\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                //console.dir(regEx);\r\n                                //console.dir(that.SqlCommands[i]);\r\n                            }\r\n                        }\r\n                        that.SqlCommands = that.SqlCommands.concat(deleteCmd);\r\n                        //console.log(deleteCmd);\r\n                        break;\r\n                    case $data.storageProviders.DbCreationType.DropAllExistingTables:\r\n                        for (var objName in existObjectInDB) {\r\n                            if (objName && !objName.match('^__') && !objName.match('^sqlite_')) {\r\n                                that.SqlCommands.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[objName].tbl_name + \"];\");\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                that._runSqlCommands(sqlConnection, { success: callBack.success, error: callBack.error });\r\n            },\r\n            error: callBack.error\r\n        });\r\n    },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var sqlConnection = this._createSqlConnection();\r\n        var sql = this._compile(query);\r\n        query.actionPack = sql.actions;\r\n        query.sqlConvertMetadata = sql.converter;\r\n        query.modelBinderConfig = sql.modelBinderConfig;\r\n        var sqlCommand = sqlConnection.createCommand(sql.sqlText, sql.params);\r\n        var that = this;\r\n        sqlCommand.executeQuery({\r\n            success: function (sqlResult) {\r\n                if (callBack.success) {\r\n                    query.rawDataList = sqlResult.rows;\r\n                    callBack.success(query);\r\n                }\r\n            },\r\n            error: callBack.error\r\n        });\r\n    },\r\n    _compile: function (query, params) {\r\n        var compiler = new $data.storageProviders.sqLite.SQLiteCompiler();\r\n        var compiled = compiler.compile(query);\r\n        //console.dir(compiled);\r\n        compiled.hasSelect = compiler.select != null;\r\n        return compiled;\r\n    },\r\n    getTraceString: function (query) {\r\n        var sqlText = this._compile(query);\r\n        return sqlText;\r\n    },\r\n    _runSqlCommands: function (sqlConnection, callBack) {\r\n        if (this.SqlCommands && this.SqlCommands.length > 0) {\r\n            var cmdStr = this.SqlCommands.pop();\r\n            var command = sqlConnection.createCommand(cmdStr, null);\r\n            var that = this;\r\n            var okFn = function (result) { that._runSqlCommands.apply(that, [sqlConnection, callBack]); };\r\n            command.executeQuery({ success: okFn, error: callBack.error });\r\n        } else {\r\n            callBack.success(this.context);\r\n        }\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n    saveChanges: function (callback, changedItems) {\r\n        var sqlConnection = this._createSqlConnection();\r\n        var provider = this;\r\n        var independentBlocks = this.buildIndependentBlocks(changedItems);\r\n        this.saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback);\r\n    },\r\n    saveIndependentBlocks: function (changedItems, independentBlocks, sqlConnection, callback) {\r\n        /// <summary>\r\n        /// Saves the sequentially independent items to the database.\r\n        /// </summary>\r\n        /// <param name=\"independentBlocks\">Array of independent block of items.</param>\r\n        /// <param name=\"sqlConnection\">sqlConnection to use</param>\r\n        /// <param name=\"callback\">Callback on finish</param>\r\n        var provider = this;\r\n        var t = [].concat(independentBlocks);\r\n        function saveNextIndependentBlock() {\r\n            if (t.length === 0) {\r\n                callback.success();\r\n                return;\r\n            }\r\n            var currentBlock = t.shift();\r\n            // Converting items to their physical equivalent (?)\r\n            var convertedItems = currentBlock.map(function (item) {\r\n                var dbType = provider.context._storageModel.getStorageModel(item.data.getType()).PhysicalType;\r\n                item.physicalData = dbType.convertTo(item.data);\r\n                return item;\r\n            }, this);\r\n            try {\r\n                provider.saveIndependentItems(convertedItems, sqlConnection, {\r\n                    success: function () {\r\n                        provider.postProcessItems(convertedItems);\r\n                        saveNextIndependentBlock();\r\n                    },\r\n                    error: callback.error\r\n                });\r\n            } catch (e) {\r\n                callback.error(e);\r\n            }\r\n\r\n        }\r\n        saveNextIndependentBlock();\r\n    },\r\n\r\n    saveIndependentItems: function (items, sqlConnection, callback) {\r\n        var provider = this;\r\n        var queries = items.map(function (item) {\r\n            return provider.saveEntitySet(item);\r\n        });\r\n        queries = queries.filter(function (item) { return item; });\r\n        if (queries.length === 0) {\r\n            callback.success(items);\r\n            return;\r\n        }\r\n        function toCmd(sqlConnection, queries) {\r\n            var cmdParams = { query: [], param: [] };\r\n            queries.forEach(function (item, i) {\r\n                if (item) {\r\n                    if (item.query)\r\n                        cmdParams.query[i] = item.query;\r\n                    if (item.param)\r\n                        cmdParams.param[i] = item.param;\r\n                }\r\n            });\r\n            return sqlConnection.createCommand(cmdParams.query, cmdParams.param);\r\n        }\r\n        var cmd = toCmd(sqlConnection, queries);\r\n        cmd.executeQuery({\r\n            success: function (results) {\r\n                var reloadQueries = results.map(function (result, i) {\r\n                    if (result && result.insertId) {\r\n                        return provider.save_reloadSavedEntity(result.insertId, items[i].entitySet.tableName, sqlConnection);\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })\r\n                var cmd = toCmd(sqlConnection, reloadQueries);\r\n                if (cmd.query.length > 0) {\r\n                    cmd.executeQuery(function (results) {\r\n                        results.forEach(function (item, i) {\r\n                            if (item && item.rows) {\r\n                                items[i].physicalData.initData = item.rows[0];\r\n                            }\r\n                        });\r\n                        callback.success(items);\r\n                    });\r\n                } else {\r\n                    callback.success(0);//TODO Zenima: fixed this!\r\n                }\r\n            },\r\n            error: callback.error\r\n        });\r\n    },\r\n    postProcessItems: function (changedItems) {\r\n        var pmpCache = {};\r\n        function getPublicMappedProperties(type) {\r\n            var key = type.name;\r\n            if (pmpCache.hasOwnProperty(key))\r\n                return pmpCache[key];\r\n            else {\r\n                var pmp = type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                    return memDef.computed;\r\n                });\r\n                return (pmpCache[key] = pmp);\r\n            }\r\n\r\n        }\r\n        changedItems.forEach(function (item) {\r\n            if (item.physicalData) {\r\n                getPublicMappedProperties(item.data.getType()).forEach(function (memDef) {\r\n                    item.data[memDef.name] = item.physicalData[memDef.name];\r\n                }, this);\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    saveEntitySet: function (item) {\r\n        switch (item.data.entityState) {\r\n            case $data.EntityState.Added: return this.save_NewEntity(item); break;\r\n            case $data.EntityState.Deleted: return this.save_DeleteEntity(item); break;\r\n            case $data.EntityState.Modified: return this.save_UpdateEntity(item); break;\r\n            case $data.EntityState.Unchanged: return; break;\r\n            default: Guard.raise(new Exception('Not supported entity state'));\r\n        }\r\n    },\r\n    save_DeleteEntity: function (item) {\r\n        ///DELETE FROM Posts WHERE Id=1;\r\n        var deleteSqlString = \"DELETE FROM [\" + item.entitySet.tableName + \"] WHERE(\";\r\n        var hasCondition = false;\r\n        var addAllField = false;\r\n        var deleteParam = [];\r\n        while (!hasCondition) {\r\n            item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n\r\n                if (hasCondition && !deleteSqlString.match(\" AND $\")) {\r\n                    deleteSqlString += \" AND \";\r\n                }\r\n                if (fieldDef.key || addAllField) {\r\n                    deleteSqlString += \"([\" + fieldDef.name + \"] == ?)\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        deleteParam.push(logicalFieldDef.converter[this.providerName].toDb(item.data[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        deleteParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.data[fieldDef.name]));\r\n                    }\r\n                    hasCondition = true;\r\n                }\r\n\r\n            }, this);\r\n            if (!hasCondition) {\r\n                addAllField = true;\r\n            }\r\n        }\r\n        if (deleteSqlString.match(\" AND $\")) {\r\n            deleteSqlString = deleteSqlString.slice(0, deleteSqlString.length - 5);\r\n        }\r\n        deleteSqlString += \");\";\r\n        return { query: deleteSqlString, param: deleteParam };\r\n    },\r\n    save_UpdateEntity: function (item) {\r\n        var setSection = \" SET \";\r\n        var whereSection = \"WHERE(\";\r\n\r\n        var fieldsMaxIndex = item.entitySet.createNew.memberDefinitions.length;\r\n        var hasCondition = false;\r\n        var addAllField = false;\r\n        var whereParam = [];\r\n        var setParam = [];\r\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n            if (item.physicalData[fieldDef.name] !== undefined) {\r\n                if (hasCondition && !whereSection.match(\" AND $\")) {\r\n                    whereSection += \" AND \";\r\n                }\r\n                if (setSection.length > 5 && !setSection.match(',$')) {\r\n                    setSection += ',';\r\n                }\r\n                if (fieldDef.key) {\r\n                    whereSection += '([' + fieldDef.name + '] == ?)';\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        whereParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], fieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        whereParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\r\n                    }\r\n                    hasCondition = true;\r\n                }\r\n                else {\r\n                    setSection += \"[\" + fieldDef.name + \"] = ?\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        setParam.push(fieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        setParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\r\n                    }\r\n                }\r\n            }\r\n        }, this);\r\n        if (!hasCondition) {\r\n            Guard.raise(new Exception('Not supported UPDATE function without primary key!'));\r\n        }\r\n\r\n        if (whereSection.match(\" AND $\")) { whereSection = whereSection.slice(0, whereSection.length - 5); }\r\n        if (setSection.match(\",$\")) { setSection = setSection.slice(0, setSection.length - 1); }\r\n        var updateSqlString = \"UPDATE [\" + item.entitySet.tableName + \"]\" + setSection + \" \" + whereSection + \");\";\r\n        return { query: updateSqlString, param: setParam.concat(whereParam) };\r\n    },\r\n    save_NewEntity: function (item) {\r\n        var insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"](\";\r\n        var fieldList = \"\";\r\n        var fieldValue = \"\";\r\n        var fieldParam = [];\r\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n            if (fieldDef.key && !fieldDef.computed && Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\r\n                Guard.raise(new Exception('Key is not set', 'Value exception', item));\r\n                return;\r\n            }\r\n            if (fieldDef.key && fieldDef.computed && Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\r\n                var typeName = Container.resolveName(fieldDef.type);\r\n                if (typeof this.supportedAutoincrementKeys[typeName] === 'function') {\r\n                    item.physicalData[fieldDef.name] = this.supportedAutoincrementKeys[typeName]();\r\n                }\r\n            }\r\n\r\n            if (fieldList.length > 0 && fieldList[fieldList.length - 1] != \",\") { fieldList += \",\"; fieldValue += \",\"; }\r\n            var fieldName = fieldDef.name;\r\n            if (/*item.physicalData[fieldName] !== null && */item.physicalData[fieldName] !== undefined) {\r\n                if (fieldDef.dataType && (!fieldDef.dataType.isAssignableTo || (fieldDef.dataType.isAssignableTo && !fieldDef.dataType.isAssignableTo($data.EntitySet)))) {\r\n                    fieldValue += '?';\r\n                    fieldList += \"[\" + fieldName + \"]\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        fieldParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[fieldName], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        fieldParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldName]));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, this);\r\n        if (fieldParam.length < 1) {\r\n            insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"] Default values\";\r\n        } else {\r\n            if (fieldList[fieldList.length - 1] == \",\") { fieldList = fieldList.slice(0, fieldList.length - 1); }\r\n            if (fieldValue[fieldValue.length - 1] == \",\") { fieldValue = fieldValue.slice(0, fieldValue.length - 1); }\r\n            insertSqlString += fieldList + \") VALUES(\" + fieldValue + \");\";\r\n        }\r\n        return { query: insertSqlString, param: fieldParam };\r\n    },\r\n    save_reloadSavedEntity: function (rowid, tableName) {\r\n        return { query: \"SELECT * FROM \" + tableName + \" WHERE rowid=?\", param: [rowid] };\r\n    },\r\n    createSqlFromStorageModel: function (memberDef) {\r\n        ///<param name=\"memberDef\" type=\"$data.StorageModel\">StorageModel object wich contains physical entity definition</param>\r\n        if (memberDef === undefined || memberDef === null || memberDef.PhysicalType === undefined) { Guard.raise(\"StorageModel not contains physical entity definition\"); }\r\n\r\n        var keyFieldNumber = 0;\r\n        var autoincrementFieldNumber = 0;\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\r\n\r\n            if (item.key) { keyFieldNumber++; }\r\n            if (item.computed) {\r\n                //if (!item.key) {\r\n                //    Guard.raise(new Exception('Only key field can be computed field!'));\r\n                //}\r\n                autoincrementFieldNumber++;\r\n            }\r\n\r\n        }, this);\r\n\r\n        if (autoincrementFieldNumber === 1 && keyFieldNumber > 1) {\r\n            Guard.raise(new Exception('Do not use computed field with multiple primary key!'));\r\n        }\r\n        if (autoincrementFieldNumber > 1 && keyFieldNumber > 1) {\r\n            Guard.raise(new Exception('Do not use multiple computed field!'));\r\n        }\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getKeyProperties().forEach(function (item, index) {\r\n            var typeName = Container.resolveName(item.type);\r\n            if (item.computed && !(typeName in this.supportedAutoincrementKeys)) {\r\n                console.log(\"WARRNING! '\" + typeName + \"' not supported as computed Key!\");\r\n            }\r\n        }, this);\r\n\r\n        var sql = \"CREATE TABLE IF NOT EXISTS [\" + memberDef.TableName + \"] (\";\r\n        var pkFragment = ',PRIMARY KEY (';\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\r\n\r\n            if (index > 0 && !sql.match(', $') && !sql.match('\\\\($'))\r\n                sql += ', ';\r\n            //var field = memberDef.createNew.memberDefinitions[fieldIndex];\r\n            sql += this.createSqlFragmentFromField(item, autoincrementFieldNumber === 1, memberDef);\r\n            if (autoincrementFieldNumber === 0 && item.key) {\r\n                if (pkFragment.length > 14 && !pkFragment.match(', $'))\r\n                    pkFragment += ', ';\r\n                pkFragment += \"[\" + item.name + \"]\";\r\n            }\r\n\r\n        }, this);\r\n\r\n        if (sql.match(', $'))\r\n            sql = sql.substr(0, sql.length - 2);\r\n        if (autoincrementFieldNumber === 0 && pkFragment.length > 14) {\r\n            sql += pkFragment + ')';\r\n        }\r\n        sql += ');';\r\n        return sql;\r\n    },\r\n    createSqlFragmentFromField: function (field, parsePk, storageModelObject) {\r\n        if (('schemaCreate' in field) && (field['schemaCreate']))\r\n            return field.schemaCreate(field);\r\n\r\n        var fldBuilder = new this.FieldTypeBuilder(field, this, parsePk, storageModelObject);\r\n        return fldBuilder.build();\r\n    },\r\n    FieldTypeBuilder: function (field, prov, parseKey, storageModelObject) {\r\n        this.fieldDef = \"\";\r\n        this.fld = field;\r\n        this.provider = prov;\r\n        this.parsePk = parseKey;\r\n        this.entitySet = storageModelObject;\r\n        this.build = function () {\r\n\r\n            var typeName = Container.resolveName(this.fld.dataType);\r\n            var mapping = $data.SqLiteFieldMapping[typeName];\r\n\r\n            if (mapping) {\r\n                this.buildFieldNameAndType(mapping);\r\n            } else {\r\n                this.buildRelations();\r\n            }\r\n\r\n            return this.fieldDef;\r\n        };\r\n        this.buildFieldNameAndType = function (type) {\r\n            this.fieldDef = \"[\" + this.fld.name + \"] \" + type;\r\n            this.parsePk ? this.buildPrimaryKey() : this.buildNotNull();\r\n        };\r\n        this.buildPrimaryKey = function () {\r\n            if (this.fld.key) {\r\n                this.fieldDef += \" PRIMARY KEY\";\r\n\r\n                var typeName = Container.resolveName(this.fld.dataType);\r\n                if (this.provider.supportedAutoincrementKeys[typeName] === true) {\r\n                    this.buildAutoIncrement();\r\n                }\r\n            }\r\n            else {\r\n                this.buildNotNull();\r\n            }\r\n        };\r\n        this.buildNotNull = function () {\r\n            if (this.fld.required)\r\n                this.fieldDef += \" NOT NULL\";\r\n        };\r\n        this.buildAutoIncrement = function () {\r\n            if (this.fld.computed)\r\n                this.fieldDef += \" AUTOINCREMENT\";\r\n        };\r\n    }\r\n}, {\r\n    isSupported: {\r\n        get: function () { return \"openDatabase\" in $data.__global; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nif ($data.storageProviders.sqLite.SqLiteStorageProvider.isSupported) {\r\n    $data.StorageProviderBase.registerProvider(\"webSql\", $data.storageProviders.sqLite.SqLiteStorageProvider);\r\n    $data.StorageProviderBase.registerProvider(\"sqLite\", $data.storageProviders.sqLite.SqLiteStorageProvider);\r\n    $data.webSqlProvider = $data.storageProviders.sqLite.SqLiteStorageProvider;\r\n}\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.sqLite.SqlExpressionMonitor', $data.Expressions.ExpressionMonitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.VisitIncludeExpression = function (expression, context) {\r\n            var newSourceExpression = this.Visit(expression.source, context);\r\n            monitorDefinition.isMapped = true;\r\n            var newSelectorExpresion = this.Visit(expression.selector, context);\r\n            monitorDefinition.isMapped = false;\r\n\r\n            if (newSourceExpression !== expression.source || newSelectorExpresion !== expression.selector) {\r\n                return Container.createIncludeExpression(newSourceExpression, newSelectorExpresion);\r\n            }\r\n            return expression;\r\n        };\r\n        this.VisitProjectionExpression = function (expression, context) {\r\n            var source = this.Visit(expression.source, context);\r\n            monitorDefinition.isMapped = true;\r\n            var selector = this.Visit(expression.selector, context);\r\n            monitorDefinition.isMapped = false;\r\n            if (source !== expression.source || selector !== expression.selector) {\r\n                var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n                expr.projectionAs = expression.projectionAs;\r\n                return expr;\r\n            }\r\n            return expression;\r\n        };\r\n    }\r\n\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlFilterCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.expression, sqlBuilder);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n            sqlBuilder.addText(expression.resolution.mapTo);\r\n            sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n            this.Visit(expression.operand, sqlBuilder);\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        var self = this;\r\n\r\n        if (expression.nodeType == \"arrayIndex\") {\r\n            this.Visit(expression.left, sqlBuilder);\r\n        } else {\r\n            sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n\r\n            //check null filter\r\n            if (expression.left instanceof $data.Expressions.EntityFieldExpression && expression.right instanceof $data.Expressions.ConstantExpression && expression.right.value === null) {\r\n                this.Visit(expression.left, sqlBuilder);\r\n                sqlBuilder.addText(expression.resolution.nullMap);\r\n            } else if (expression.right instanceof $data.Expressions.EntityFieldExpression && expression.left instanceof $data.Expressions.ConstantExpression && expression.left.value === null) {\r\n                this.Visit(expression.right, sqlBuilder);\r\n                sqlBuilder.addText(expression.resolution.nullMap);\r\n            } else {\r\n                this.Visit(expression.left, sqlBuilder);\r\n                sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\r\n\r\n                if (expression.nodeType == \"in\") {\r\n                    //TODO: refactor and generalize\r\n                    Guard.requireType(\"expression.right\", expression.right, $data.Expressions.ConstantExpression);\r\n                    var set = expression.right.value;\r\n                    if (set instanceof Array) {\r\n                        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n                        set.forEach(function (item, i) {\r\n                            if (i > 0) sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                            self.Visit(item, sqlBuilder);\r\n                        });\r\n                        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n                    } else if (set instanceof $data.Queryable) {\r\n                        sqlBuilder.addText(\"(SELECT d FROM (\" + set.toTraceString().sqlText + \"))\");\r\n                        //Guard.raise(\"Not yet... but coming!\");\r\n                    } else {\r\n                        Guard.raise(new Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\r\n                    };\r\n                } else {\r\n                    this.Visit(expression.right, sqlBuilder);\r\n                }\r\n            }\r\n\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n        }\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\r\n        /// <param name=\"sqlBuilder\"></param>\r\n\r\n        //this.Visit(expression.operation);\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        var opDefinition = expression.operation.memberDefinition;\r\n        var opName = opDefinition.mapTo || opDefinition.name;\r\n\r\n        sqlBuilder.addText(opName);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        if (opName === \"like\") {\r\n            var builder = $data.sqLite.SqlBuilder.create([], sqlBuilder.entityContext);\r\n            builder.selectTextPart(\"fragment\");\r\n            this.Visit(expression.parameters[0], builder);\r\n            var fragment = builder.getTextPart(\"fragment\");\r\n            fragment.params.forEach(function (p) {\r\n                var v = p;\r\n                var paramDef = opDefinition.parameters[0];\r\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\r\n                v = paramDef.suffix ? v + paramDef.suffix : v;\r\n                sqlBuilder.addParameter(v);\r\n            });\r\n            sqlBuilder.addText(fragment.text);\r\n            sqlBuilder.addText(\" , \");\r\n            this.Visit(expression.source, sqlBuilder);\r\n        } else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            expression.parameters.forEach(function (p) {\r\n                sqlBuilder.addText(\" , \");\r\n                this.Visit(p, sqlBuilder);\r\n            }, this);\r\n        };\r\n\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n    VisitQueryParameterExpression: function (expression, sqlBuilder) {\r\n        var value = null;\r\n        if (expression.type == \"array\") {\r\n            value = expression.value[expression.index];\r\n        } else {\r\n            value = expression.value;\r\n        }\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        //var typeNameHintFromValue = Container.getTypeName(expression.value);\r\n        var value = sqlBuilder.entityContext.storageProvider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);;\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitEntityFieldExpression:function(expression, sqlBuilder){\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        sqlBuilder.addText(\"__\");\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlOrderCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (expression, sqlBuilder) {\r\n        this.Visit(expression, sqlBuilder);\r\n    },\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n    VisitOrderExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        if (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending) {\r\n            sqlBuilder.addText(\" DESC\");\r\n        } else {\r\n            sqlBuilder.addText(\" ASC\");\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.expression, sqlBuilder);\r\n    },\r\n    VisitEntityFieldExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        sqlBuilder.addText('__');\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlPagingCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.amount, sqlBuilder);\r\n    },\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addParameter(expression.value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlProjectionCompiler', $data.Expressions.EntityExpressionVisitor, null,\r\n{\r\n    constructor: function () {\r\n        this.anonymFiledPrefix = \"\";\r\n        this.currentObjectLiteralName = null;\r\n    },\r\n    VisitProjectionExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\r\n        }\r\n        else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.anonymFiledPrefix = sqlBuilder.getExpressionAlias(expression.expression) + '__'\r\n            this.MappedFullEntitySet(expression.expression, sqlBuilder);\r\n        }\r\n        else if (expression.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.Visit(expression.expression, sqlBuilder);\r\n        } else {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid\");\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(SqlStatementBlocks.rowIdName);\r\n            sqlBuilder.addText(', ');\r\n            sqlBuilder.addKeyField(SqlStatementBlocks.rowIdName);\r\n            this.Visit(expression.expression, sqlBuilder);\r\n            if (!(expression.expression instanceof $data.Expressions.ComplexTypeExpression)) {\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(SqlStatementBlocks.scalarFieldName);\r\n            }\r\n        }\r\n    },\r\n\r\n    VisitEntityExpressionAsProjection: function (expression, sqlBuilder) {\r\n        var ee = expression.expression;\r\n        var alias = sqlBuilder.getExpressionAlias(ee.source);\r\n\r\n        var localPrefix = this.anonymFiledPrefix + (expression.fieldName ? expression.fieldName : '');\r\n        localPrefix = localPrefix ? localPrefix + '__' : '';\r\n\r\n        ee.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberInfo, index) {\r\n            if (index > 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n\r\n            var fieldName = localPrefix + memberInfo.name;\r\n\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(memberInfo.name);\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(fieldName);\r\n        }, this);\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\r\n        /// <param name=\"sqlBuilder\"></param>\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        var opDefinition = expression.operation.memberDefinition;\r\n        var opName = opDefinition.mapTo || opDefinition.name;\r\n\r\n        sqlBuilder.addText(opName);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        if (opName === \"like\") {\r\n            var builder = $data.sqLite.SqlBuilder.create();\r\n            this.Visit(expression.parameters[0], builder);\r\n            builder.params.forEach(function (p) {\r\n                var v = p;\r\n                var paramDef = opDefinition.parameters[0];\r\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\r\n                v = paramDef.suffix ? v + paramDef.suffix : v;\r\n                sqlBuilder.addParameter(v);\r\n            });\r\n            sqlBuilder.addText(builder.sql);\r\n            sqlBuilder.addText(\" , \");\r\n            this.Visit(expression.source, sqlBuilder);\r\n        } else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            expression.parameters.forEach(function (p) {\r\n                sqlBuilder.addText(\" , \");\r\n                this.Visit(p, sqlBuilder);\r\n            }, this);\r\n        };\r\n\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        sqlBuilder.addText(expression.resolution.mapTo);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        this.Visit(expression.operand, sqlBuilder);\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        this.Visit(expression.left, sqlBuilder);\r\n        var self = this;\r\n        sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\r\n        if (expression.nodeType == \"in\") {\r\n            //TODO: refactor and generalize\r\n            Guard.requireType(\"expression.right\", expression.right, $data.Expressions.ConstantExpression);\r\n            var set = expression.right.value;\r\n            if (set instanceof Array) {\r\n                sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n                set.forEach(function (item, i) {\r\n                    if (i > 0) sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                    var c = Container.createConstantExpression(item);\r\n                    self.Visit(c, sqlBuilder);\r\n                });\r\n                sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n            } else if (set instanceof $data.Queryable) {\r\n                Guard.raise(\"not yet... but coming\");\r\n            } else {\r\n                Guard.raise(new Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\r\n            };\r\n        } else {\r\n            this.Visit(expression.right, sqlBuilder);\r\n        }\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        var value = expression.value;\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, sqlBuilder) {\r\n        if (expression.source instanceof $data.Expressions.ComplexTypeExpression) {\r\n            var alias = sqlBuilder.getExpressionAlias(expression.source.source.source);\r\n            var storageModel = expression.source.source.storageModel.ComplexTypes[expression.source.selector.memberName];\r\n            var member = storageModel.ReferentialConstraint.filter(function (item) { return item[expression.source.selector.memberName] == expression.selector.memberName; })[0];\r\n            if (!member) { Guard.raise(new Exception('Compiler error! ComplexType does not contain ' + expression.source.selector.memberName + ' property!')); return;}\r\n\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(member[storageModel.From]);\r\n        }\r\n        else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            this.Visit(expression.selector, sqlBuilder);\r\n        }\r\n\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression.source.source);\r\n        var storageModel = expression.source.storageModel.ComplexTypes[expression.selector.memberName];\r\n        storageModel.ReferentialConstraint.forEach(function (constrain, index) {\r\n            if (index > 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(constrain[storageModel.From]);\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(this.anonymFiledPrefix + constrain[storageModel.To]);\r\n        }, this);\r\n    },\r\n\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, sqlBuilder) {\r\n        var membersNumber = expression.members.length;\r\n        for (var i = 0; i < membersNumber; i++) {\r\n            if (i != 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n            this.Visit(expression.members[i], sqlBuilder);\r\n        }\r\n    },\r\n    MappedFullEntitySet: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        var properties = expression.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties();\r\n        properties.forEach(function (prop, index) {\r\n            if (!prop.association) {\r\n                if (index > 0) {\r\n                    sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                }\r\n                sqlBuilder.addText(alias);\r\n                sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n                sqlBuilder.addText(prop.name);\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(this.anonymFiledPrefix + prop.name);\r\n            }\r\n        }, this);\r\n        //ToDo: complex type\r\n    },\r\n    VisitObjectFieldExpression: function (expression, sqlBuilder) {\r\n\r\n        var tempObjectLiteralName = this.currentObjectLiteralName;\r\n        if (this.currentObjectLiteralName) {\r\n            this.currentObjectLiteralName += '.' + expression.fieldName;\r\n        } else {\r\n            this.currentObjectLiteralName = expression.fieldName;\r\n        }\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\r\n        } else {\r\n\r\n            var tmpPrefix = this.anonymFiledPrefix;\r\n            this.anonymFiledPrefix += expression.fieldName + \"__\";\r\n\r\n            if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n                this.MappedFullEntitySet(expression.expression, sqlBuilder);\r\n            } else {\r\n                this.Visit(expression.expression, sqlBuilder);\r\n            }\r\n\r\n            this.anonymFiledPrefix = tmpPrefix;\r\n\r\n            if (!(expression.expression instanceof $data.Expressions.ObjectLiteralExpression) && !(expression.expression instanceof $data.Expressions.ComplexTypeExpression) && !(expression.expression instanceof $data.Expressions.EntitySetExpression)) {\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(this.anonymFiledPrefix + expression.fieldName);\r\n            }\r\n        }\r\n        this.currentObjectLiteralName = tempObjectLiteralName;\r\n    }\r\n\r\n}, null);\r\n","import $data from 'jaydata/core';\r\n\r\n//dbCommand\r\nimport DbCommand from '../../DbClient/DbCommand.js';\r\nimport DbConnection from '../../DbClient/DbConnection.js';\r\nimport OpenDbCommand from '../../DbClient/OpenDatabaseClient/OpenDbCommand.js';\r\nimport OpenDbConnection from '../../DbClient/OpenDatabaseClient/OpenDbConnection.js';\r\nimport JayStorageCommand from '../../DbClient/JayStorageClient/JayStorageCommand.js';\r\nimport JayStorageConnection from '../../DbClient/JayStorageClient/JayStorageConnection.js';\r\nimport SqLiteNjCommand from '../../DbClient/SqLiteNjClient/SqLiteNjCommand.js';\r\nimport SqLiteNjConnection from '../../DbClient/SqLiteNjClient/SqLiteNjConnection.js';\r\n\r\n//provider\r\nimport SqLiteConverter from './SqLiteConverter.js';\r\nimport SqLiteStorageProvider from './SqLiteStorageProvider.js';\r\nimport SqLiteCompiler from './SqLiteCompiler.js';\r\nimport SqlPagingCompiler from './SqlPagingCompiler.js';\r\nimport SqlOrderCompiler from './SqlOrderCompiler.js';\r\nimport SqlProjectionCompiler from './SqlProjectionCompiler.js';\r\nimport SqlExpressionMonitor from './SqlExpressionMonitor.js';\r\nimport SqlFilterCompiler from './SqlFilterCompiler.js';\r\nimport sqLite_ModelBinderCompiler from './ModelBinder/sqLite_ModelBinderCompiler.js';\r\n\r\nexport default $data;\r\n"],"sourceRoot":"/source/"}